{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6700\u4f73\u5b9e\u8df5","text":"<p>\u5404\u7c7b\u6280\u672f\u548c\u6846\u67b6\u7684\u6700\u4f73\u5b9e\u8df5\u4e2d\u6587\u8d44\u6599</p> <p>\u5305\u62ec:</p> <ul> <li>fastapi</li> <li>http</li> </ul>"},{"location":"about/","title":"\u5173\u4e8e","text":"<ul> <li>\u7ffb\u8bd1\u81ea https://github.com/zhanymkanov/fastapi-best-practices \u6709\u6548\u6027\u53c2\u8003\u539f\u6587\u3002</li> </ul>"},{"location":"about/#\u57fa\u7840","title":"\u57fa\u7840","text":"<ul> <li>\u7f51\u7edc\u57fa\u7840, \u53c2\u8003: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - \u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e00\uff09</li> <li>HTTP Referer \u6559\u7a0b, \u53c2\u8003: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTP Referer \u6559\u7a0b</li> <li>HTTPS \u5347\u7ea7\u6307\u5357, \u53c2\u8003: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTPS \u5347\u7ea7\u6307\u5357</li> </ul>"},{"location":"about/#\u5176\u4ed6","title":"\u5176\u4ed6","text":"<p>\u4f5c\u8005\u8fd8\u6709\u4e00\u4e2a\u4ed3\u5e93: https://github.com/zhanymkanov/fastapi_production_template - \u4e00\u4e2a\u57fa\u4e8efastapi\u7684\u751f\u4ea7\u6a21\u7248\u4ed3\u5e93\uff0c\u4e5f\u633a\u4e0d\u9519\u7684\u3002</p>"},{"location":"fastapi/v1/","title":"FastAPI \u6700\u4f73\u5b9e\u8df5","text":"\u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5728\u521b\u4e1a\u65f6\u4f7f\u7528\u7684\u5e76\u4e14\u81ea\u4ee5\u4e3a\u662f\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u60ef\u4f8b\u5217\u8868\u3002</p> <p>\u5728\u8fc7\u53bb 1.5 \u5e74\u7684\u751f\u4ea7\u4e2d\uff0c \u6211\u4eec\u4e00\u76f4\u5728\u505a\u51fa\u597d\u7684\u548c\u574f\u7684\u51b3\u5b9a\uff0c\u8fd9\u4e9b\u51b3\u5b9a\u6781\u5927\u5730\u5f71\u54cd\u4e86\u6211\u4eec\u7684\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u3002 \u5176\u4e2d\u4e00\u4e9b\u503c\u5f97\u5206\u4eab\u3002</p> <p>Opinionated list of best practices and conventions we used at our startup.</p> <p>For the last 1.5 years in production, we have been making good and bad decisions that impacted our developer experience dramatically. Some of them are worth sharing.</p>"},{"location":"fastapi/v1/#1-\u9879\u76ee\u7ed3\u6784-\u4e00\u81f4\u4e14\u53ef\u9884\u6d4b","title":"1. \u9879\u76ee\u7ed3\u6784\u3002 \u4e00\u81f4\u4e14\u53ef\u9884\u6d4b","text":"<p>1. Project Structure. Consistent &amp; predictable</p> \u4e2d\u6587\u82f1\u6587 <p>\u6784\u5efa\u9879\u76ee\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u4f46\u6700\u597d\u7684\u7ed3\u6784\u662f\u4e00\u81f4\u3001\u76f4\u63a5\u4e14\u6ca1\u6709\u610f\u5916\u7684\u7ed3\u6784\u3002</p> <ul> <li>\u5982\u679c\u67e5\u770b\u9879\u76ee\u7ed3\u6784\u4e0d\u80fd\u8ba9\u60a8\u4e86\u89e3\u9879\u76ee\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u7ed3\u6784\u53ef\u80fd\u4e0d\u6e05\u695a\u3002</li> <li>\u5982\u679c\u60a8\u5fc5\u987b\u6253\u5f00\u5305\u624d\u80fd\u4e86\u89e3\u5176\u4e2d\u5305\u542b\u54ea\u4e9b\u6a21\u5757\uff0c\u90a3\u4e48\u60a8\u7684\u7ed3\u6784\u5c31\u4e0d\u6e05\u695a\u4e86\u3002</li> <li>\u5982\u679c\u6587\u4ef6\u7684\u91cd\u590d\u7387\u548c\u4f4d\u7f6e\u611f\u89c9\u662f\u968f\u673a\u7684\uff0c\u90a3\u4e48\u60a8\u7684\u9879\u76ee\u7ed3\u6784\u5f88\u7cdf\u7cd5\u3002</li> <li>\u5982\u679c\u67e5\u770b\u6a21\u5757\u7684\u4f4d\u7f6e\u53ca\u5176\u540d\u79f0\u4e0d\u80fd\u8ba9\u60a8\u4e86\u89e3\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u60a8\u7684\u7ed3\u6784\u975e\u5e38\u7cdf\u7cd5\u3002</li> </ul> <p>@tiangolo \u63d0\u4f9b\u7684\u9879\u76ee\u7ed3\u6784\uff08\u6211\u4eec\u6309\u6587\u4ef6\u7c7b\u578b\uff08\u4f8b\u5982 api\u3001crud\u3001\u6a21\u578b\u3001\u6a21\u5f0f\uff09\u5206\u9694\u6587\u4ef6\uff09\u9002\u7528\u4e8e\u5fae\u670d\u52a1\u6216\u8303\u56f4\u8f83\u5c0f\u7684\u9879\u76ee\uff0c\u4f46\u6211\u4eec\u65e0\u6cd5\u5c06\u5b83\u653e\u5165\u6211\u4eec\u5177\u6709\u5927\u91cf\u57df\u548c\u6a21\u5757\u7684\u6574\u4f53\u4e2d\u3002</p> <p>\u6211\u53d1\u73b0\u66f4\u5177\u53ef\u6269\u5c55\u6027\u548c\u53ef\u6f14\u5316\u6027\u7684\u7ed3\u6784\u662f\u53d7 Netflix \u7684 Dispatch \u542f\u53d1\u5e76\u7a0d\u4f5c\u4fee\u6539\u3002</p> <pre><code>fastapi-project\n\u251c\u2500\u2500 alembic/\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py  # pydantic \u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 models.py  # db \u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py  # \u672c\u5730\u914d\u7f6e\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2502   \u251c\u2500\u2500 client.py  # \u5916\u90e8\u670d\u52a1\u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 posts\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 config.py  # \u5168\u5c40\u914d\u7f6e\n\u2502   \u251c\u2500\u2500 models.py  # \u5168\u5c40\u6a21\u578b\n\u2502   \u251c\u2500\u2500 exceptions.py  # \u5168\u5c40\u5f02\u5e38\n\u2502   \u251c\u2500\u2500 pagination.py  # \u5168\u5c40\u6a21\u5757 \u4f8b\u5982. pagination \u5206\u9875\n\u2502   \u251c\u2500\u2500 database.py  # \u6570\u636e\u5e93\u8fde\u63a5\u76f8\u5173\u7684\u4e1c\u897f\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2514\u2500\u2500 posts\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 requirements\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u2514\u2500\u2500 prod.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 logging.ini\n\u2514\u2500\u2500 alembic.ini\n</code></pre> <ol> <li>\u5c06\u6240\u6709\u57df\u76ee\u5f55\u5b58\u50a8\u5728 <code>src</code> \u6587\u4ef6\u5939\u4e2d<ol> <li><code>src/</code> - \u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u9ad8\u7ea7\u522b\uff0c\u5305\u542b\u901a\u7528\u6a21\u578b\u3001\u914d\u7f6e\u548c\u5e38\u91cf\u7b49\u3002</li> <li><code>src/main.py</code> - \u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u7528\u4e8e\u542f\u52a8 FastAPI \u5e94\u7528\u7a0b\u5e8f</li> </ol> </li> <li>\u6bcf\u4e2a\u5305\u90fd\u6709\u81ea\u5df1\u7684 router, schemas, models, \u7b49\u3002<ol> <li><code>router.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684\u6838\u5fc3\uff0c\u662f\u6240\u6709\u8def\u7531\u63a5\u53e3\u7684\u5165\u53e3\u3002</li> <li><code>schemas.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684 pydantic\u7684\u6a21\u578b</li> <li><code>models.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684\u6570\u636e\u5e93\u6a21\u578b</li> <li><code>service.py</code> - \u6a21\u5757\u7279\u6709\u7684\u4e1a\u52a1\u903b\u8f91</li> <li><code>dependencies.py</code> - \u8def\u7531\u4f9d\u8d56(Depends)</li> <li><code>constants.py</code> - \u6a21\u5757\u7279\u6709\u7684\u5e38\u91cf\u548c\u9519\u8bef\u7801\u5b9a\u4e49</li> <li><code>config.py</code> - \u4f8b\u5982\uff0c\u73af\u5883\u53d8\u91cf</li> <li><code>utils.py</code> - \u975e\u4e1a\u52a1\u903b\u8f91\u529f\u80fd\uff0c \u4f8b\u5982. \u54cd\u5e94\u89c4\u8303\u5316\u3001\u6570\u636e\u4e30\u5bcc\u7b49\u3002</li> <li><code>exceptions</code> - \u6a21\u5757\u7279\u6709\u7684\u4e00\u573a\uff0c\u4f8b\u5982. <code>PostNotFound</code>, <code>InvalidUserData</code></li> </ol> </li> <li>\u5f53\u5305\u9700\u8981\u6765\u81ea\u5176\u4ed6\u5305\u7684\u670d\u52a1\u6216\u4f9d\u8d56\u9879\u6216\u5e38\u91cf\u65f6 - \u4f7f\u7528\u663e\u5f0f\u6a21\u5757\u540d\u79f0\u5bfc\u5165\u5b83\u4eec</li> </ol> <pre><code>from src.auth import constants as auth_constants\nfrom src.notifications import service as notification_service\nfrom src.posts.constants import ErrorCode as PostsErrorCode  # \u5982\u679c\u6211\u4eec\u5728\u6bcf\u4e2a\u5305\u7684\u5e38\u91cf\u6a21\u5757\u4e2d\u90fd\u6709\u6807\u51c6\u9519\u8bef\u4ee3\u7801\n</code></pre> <p>There are many ways to structure the project, but the best structure is a structure that is consistent, straightforward, and has no surprises.</p> <ul> <li>If looking at the project structure doesn't give you an idea of what the project is about, then the structure might be unclear.</li> <li>If you have to open packages to understand what modules are located in them, then your structure is unclear.</li> <li>If the frequency and location of the files feels random, then your project structure is bad.</li> <li>If looking at the module's location and its name doesn't give you an idea of what's inside it, then your structure is very bad.</li> </ul> <p>Although the project structure, where we separate files by their type (e.g. api, crud, models, schemas) presented by @tiangolo is good for microservices or projects with fewer scopes, we couldn't fit it into our monolith with a lot of domains and modules. Structure that I found more scalable and evolvable is inspired by Netflix's Dispatch with some little modifications.</p> <pre><code>fastapi-project\n\u251c\u2500\u2500 alembic/\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py  # pydantic models\n\u2502   \u2502   \u251c\u2500\u2500 models.py  # db models\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py  # local configs\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2502   \u251c\u2500\u2500 client.py  # client model for external service communication\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 posts\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 config.py  # global configs\n\u2502   \u251c\u2500\u2500 models.py  # global models\n\u2502   \u251c\u2500\u2500 exceptions.py  # global exceptions\n\u2502   \u251c\u2500\u2500 pagination.py  # global module e.g. pagination\n\u2502   \u251c\u2500\u2500 database.py  # db connection related stuff\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2514\u2500\u2500 posts\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 requirements\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u2514\u2500\u2500 prod.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 logging.ini\n\u2514\u2500\u2500 alembic.ini\n</code></pre> <ol> <li>Store all domain directories inside <code>src</code> folder</li> <li><code>src/</code> - highest level of an app, contains common models, configs, and constants, etc.</li> <li><code>src/main.py</code> - root of the project, which inits the FastAPI app</li> <li>Each package has its own router, schemas, models, etc.</li> <li><code>router.py</code> - is a core of each module with all the endpoints</li> <li><code>schemas.py</code> - for pydantic models</li> <li><code>models.py</code> - for db models</li> <li><code>service.py</code> - module specific business logic  </li> <li><code>dependencies.py</code> - router dependencies</li> <li><code>constants.py</code> - module specific constants and error codes</li> <li><code>config.py</code> - e.g. env vars</li> <li><code>utils.py</code> - non-business logic functions, e.g. response normalization, data enrichment, etc.</li> <li><code>exceptions</code> - module specific exceptions, e.g. <code>PostNotFound</code>, <code>InvalidUserData</code></li> <li>When package requires services or dependencies or constants from other packages - import them with an explicit module name</li> </ol> <pre><code>from src.auth import constants as auth_constants\nfrom src.notifications import service as notification_service\nfrom src.posts.constants import ErrorCode as PostsErrorCode  # in case we have Standard ErrorCode in constants module of each package\n</code></pre>"},{"location":"fastapi/v1/#2-\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528-pydantic-\u8fdb\u884c\u6570\u636e\u9a8c\u8bc1","title":"2. \u5c3d\u53ef\u80fd\u7684\u4f7f\u7528 Pydantic \u8fdb\u884c\u6570\u636e\u9a8c\u8bc1","text":"<p>Excessively use Pydantic for data validation</p> \u4e2d\u6587\u82f1\u6587 <p>Pydantic \u5177\u6709\u4e00\u7ec4\u4e30\u5bcc\u7684\u529f\u80fd\u6765\u9a8c\u8bc1\u548c\u8f6c\u6362\u6570\u636e\u3002</p> <p>\u9664\u4e86\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u5fc5\u586b\u548c\u975e\u5fc5\u586b\u5b57\u6bb5\u7b49\u5e38\u89c4\u529f\u80fd\u5916\uff0c</p> <p>Pydantic \u5185\u7f6e\u4e86\u5168\u9762\u7684\u6570\u636e\u5904\u7406\u5de5\u5177\uff0c\u5982\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u6709\u9650\u5141\u8bb8\u9009\u9879\u7684\u679a\u4e3e\u3001\u957f\u5ea6\u9a8c\u8bc1\u3001\u7535\u5b50\u90ae\u4ef6\u9a8c\u8bc1\u7b49\u3002</p> <pre><code>from enum import Enum\nfrom pydantic import AnyUrl, BaseModel, EmailStr, Field, constr\n\nclass MusicBand(str, Enum):\n    AEROSMITH = \"AEROSMITH\"\n    QUEEN = \"QUEEN\"\n    ACDC = \"AC/DC\"\n\n\nclass UserBase(BaseModel):\n    first_name: str = Field(min_length=1, max_length=128)\n    username: constr(regex=\"^[A-Za-z0-9-_]+$\", to_lower=True, strip_whitespace=True)\n    email: EmailStr\n    age: int = Field(ge=18, default=None)  # must be greater or equal to 18\n    favorite_band: MusicBand = None  # only \"AEROSMITH\", \"QUEEN\", \"AC/DC\" values are allowed to be inputted\n    website: AnyUrl = None\n</code></pre> <p>Pydantic has a rich set of features to validate and transform data.</p> <p>In addition to regular features like required &amp; non-required fields with default values, Pydantic has built-in comprehensive data processing tools like regex, enums for limited allowed options, length validation, email validation, etc.</p> <pre><code>from enum import Enum\nfrom pydantic import AnyUrl, BaseModel, EmailStr, Field, constr\n\nclass MusicBand(str, Enum):\n   AEROSMITH = \"AEROSMITH\"\n   QUEEN = \"QUEEN\"\n   ACDC = \"AC/DC\"\n\n\nclass UserBase(BaseModel):\n    first_name: str = Field(min_length=1, max_length=128)\n    username: constr(regex=\"^[A-Za-z0-9-_]+$\", to_lower=True, strip_whitespace=True)\n    email: EmailStr\n    age: int = Field(ge=18, default=None)  # must be greater or equal to 18\n    favorite_band: MusicBand = None  # only \"AEROSMITH\", \"QUEEN\", \"AC/DC\" values are allowed to be inputted\n    website: AnyUrl = None\n</code></pre>"},{"location":"fastapi/v1/#3-\u4f7f\u7528depends\u4f9d\u8d56\u8fdb\u884c\u4e0e\u6570\u636e\u5e93\u6709\u5173\u7684\u6570\u636e\u9a8c\u8bc1","title":"3. \u4f7f\u7528Depends(\u4f9d\u8d56)\u8fdb\u884c\u4e0e\u6570\u636e\u5e93\u6709\u5173\u7684\u6570\u636e\u9a8c\u8bc1","text":"<p>Use dependencies for data validation vs DB</p> \u4e2d\u6587\u82f1\u6587 <p>Pydantic \u53ef\u4ee5\u53ea\u9a8c\u8bc1\u6765\u81ea\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u503c\u3002</p> <p>\u4f7f\u7528\u4f9d\u8d56\u9879\u6839\u636e\u6570\u636e\u5e93\u7ea6\u675f\u9a8c\u8bc1\u6570\u636e\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u5df2\u5b58\u5728\u3001\u672a\u627e\u5230\u7528\u6237\u7b49\u3002</p> <pre><code># dependencies.py\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\n# router.py\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post_by_id(post: Mapping = Depends(valid_post_id)):\n    return post\n\n\n@router.put(\"/posts/{post_id}\", response_model=PostResponse)\nasync def update_post(\n    update_data: PostUpdate,  \n    post: Mapping = Depends(valid_post_id), \n):\n    updated_post: Mapping = await service.update(id=post[\"id\"], data=update_data)\n    return updated_post\n\n\n@router.get(\"/posts/{post_id}/reviews\", response_model=list[ReviewsResponse])\nasync def get_post_reviews(post: Mapping = Depends(valid_post_id)):\n    post_reviews: list[Mapping] = await reviews_service.get_by_post_id(post[\"id\"])\n    return post_reviews\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u4e0d\u5c06\u6570\u636e\u9a8c\u8bc1\u653e\u5728\u4f9d\u8d56\u9879\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u4e3a\u6bcf\u4e2a\u63a5\u53e3\u6dfb\u52a0 <code>post_id</code> \u9a8c\u8bc1\u5e76\u4e3a\u6bcf\u4e2a\u63a5\u53e3\u7f16\u5199\u76f8\u540c\u7684\u6d4b\u8bd5\u3002</p> <p>Pydantic can only validate the values from client input. Use dependencies to validate data against database constraints like email already exists, user not found, etc.</p> <pre><code># dependencies.py\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\n# router.py\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post_by_id(post: Mapping = Depends(valid_post_id)):\n    return post\n\n\n@router.put(\"/posts/{post_id}\", response_model=PostResponse)\nasync def update_post(\n    update_data: PostUpdate,  \n    post: Mapping = Depends(valid_post_id), \n):\n    updated_post: Mapping = await service.update(id=post[\"id\"], data=update_data)\n    return updated_post\n\n\n@router.get(\"/posts/{post_id}/reviews\", response_model=list[ReviewsResponse])\nasync def get_post_reviews(post: Mapping = Depends(valid_post_id)):\n    post_reviews: list[Mapping] = await reviews_service.get_by_post_id(post[\"id\"])\n    return post_reviews\n</code></pre> <p>If we didn't put data validation to dependency, we would have to add post_id validation for every endpoint and write the same tests for each of them.</p>"},{"location":"fastapi/v1/#4-\u4f9d\u8d56dependency\u94fe","title":"4. \u4f9d\u8d56(Dependency)\u94fe","text":"<p>Chain dependencies</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f9d\u8d56\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u4f9d\u8d56\uff0c\u907f\u514d\u7c7b\u4f3c\u903b\u8f91\u7684\u4ee3\u7801\u91cd\u590d\u3002</p> <pre><code># dependencies.py\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(post: Mapping = Depends(valid_owned_post)):\n    return post\n</code></pre> <p>Dependencies can use other dependencies and avoid code repetition for similar logic.</p> <pre><code># dependencies.py\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(post: Mapping = Depends(valid_owned_post)):\n    return post\n</code></pre>"},{"location":"fastapi/v1/#5-\u89e3\u8026\u548c\u91cd\u7528\u4f9d\u8d56\u5173\u7cfb-\u7f13\u5b58\u4f9d\u8d56dependency\u8c03\u7528\u7ed3\u679c","title":"5. \u89e3\u8026\u548c\u91cd\u7528\u4f9d\u8d56\u5173\u7cfb\u3002 \u7f13\u5b58\u4f9d\u8d56(Dependency)\u8c03\u7528\u7ed3\u679c","text":"<p>Decouple &amp; Reuse dependencies. Dependency calls are cached</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f9d\u8d56\u9879\u53ef\u4ee5\u591a\u6b21\u91cd\u7528\uff0c\u5e76\u4e14\u4e0d\u4f1a\u91cd\u65b0\u8ba1\u7b97 - \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cFastAPI \u5c06\u4f9d\u8d56\u9879\u7684\u7ed3\u679c\u7f13\u5b58\u5728\u8bf7\u6c42\u7684\u8303\u56f4\u5185\u3002</p> <p>\u4f8b\u5982\uff1a\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u8c03\u7528\u670d\u52a1 <code>get_post_by_id</code> \u7684\u4f9d\u8d56\u9879\uff0c\u6211\u4eec\u5c06\u4e0d\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528\u8be5\u4f9d\u8d56\u9879\u65f6\u90fd\u8bbf\u95ee\u6570\u636e\u5e93 - \u53ea\u6709\u7b2c\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u7528\u5230\u3002</p> <p>\u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u4f9d\u8d56\u5173\u7cfb\u89e3\u8026\u5230\u591a\u4e2a\u8f83\u5c0f\u7684\u51fd\u6570\u4e0a\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u8f83\u5c0f\u7684\u57df\u4e0a\u8fd0\u884c\u5e76\u4e14\u66f4\u5bb9\u6613\u5728\u5176\u4ed6\u8def\u7531\u4e2d\u91cd\u7528\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 3 \u6b21 <code>parse_jwt_data</code>\uff1a</p> <ol> <li><code>valid_owned_post</code></li> <li><code>valid_active_creator</code></li> <li><code>get_user_post</code></li> </ol> <p>\u4f46\u662f <code>parse_jwt_data</code> \u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\u3002</p> <pre><code># dependencies.py\nfrom fastapi import BackgroundTasks\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n\nasync def valid_active_creator(\n    token_data: dict = Depends(parse_jwt_data),\n):\n    user = await users_service.get_by_id(token_data[\"user_id\"])\n    if not user[\"is_active\"]:\n        raise UserIsBanned()\n\n    if not user[\"is_creator\"]:\n       raise UserNotCreator()\n\n    return user\n\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(\n    worker: BackgroundTasks,\n    post: Mapping = Depends(valid_owned_post),\n    user: Mapping = Depends(valid_active_creator),\n):\n    \"\"\"Get post that belong the active user.\"\"\"\n    worker.add_task(notifications_service.send_email, user[\"id\"])\n    return post\n</code></pre> <p>Dependencies can be reused multiple times, and they won't be recalculated - FastAPI caches dependency's result within a request's scope by default, i.e. if we have a dependency that calls service <code>get_post_by_id</code>, we won't be visiting DB each time we call this dependency - only the first function call.</p> <p>Knowing this, we can easily decouple dependencies onto multiple smaller functions that operate on a smaller domain and are easier to reuse in other routes. For example, in the code below we are using <code>parse_jwt_data</code> three times:</p> <ol> <li><code>valid_owned_post</code></li> <li><code>valid_active_creator</code></li> <li><code>get_user_post</code>,</li> </ol> <p>but <code>parse_jwt_data</code> is called only once, in the very first call.</p> <pre><code># dependencies.py\nfrom fastapi import BackgroundTasks\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n\nasync def valid_active_creator(\n    token_data: dict = Depends(parse_jwt_data),\n):\n    user = await users_service.get_by_id(token_data[\"user_id\"])\n    if not user[\"is_active\"]:\n        raise UserIsBanned()\n\n    if not user[\"is_creator\"]:\n       raise UserNotCreator()\n\n    return user\n\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(\n    worker: BackgroundTasks,\n    post: Mapping = Depends(valid_owned_post),\n    user: Mapping = Depends(valid_active_creator),\n):\n    \"\"\"Get post that belong the active user.\"\"\"\n    worker.add_task(notifications_service.send_email, user[\"id\"])\n    return post\n</code></pre>"},{"location":"fastapi/v1/#6-\u9075\u5faa-rest-\u89c4\u8303","title":"6. \u9075\u5faa REST \u89c4\u8303","text":"<p>Follow the REST</p> \u4e2d\u6587\u82f1\u6587 <p>\u8bd1\u8005\u6ce8 - REST API \u8bbe\u8ba1\u89c4\u8303</p> <p>\u53c2\u8003 \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - RESTful API \u8bbe\u8ba1\u6307\u5357 \u548c RESTful API \u6700\u4f73\u5b9e\u8df5</p> <p>\u5f00\u53d1 RESTful API \u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u5728\u5982\u4e0b\u8def\u7531\u4e2d\u91cd\u7528\u4f9d\u8d56\u9879\uff1a</p> <ol> <li><code>GET /courses/:course_id</code></li> <li><code>GET /courses/:course_id/chapters/:chapter_id/lessons</code></li> <li><code>GET /chapters/:chapter_id</code></li> </ol> <p>\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u8def\u5f84\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u53d8\u91cf\u540d\uff1a</p> <ul> <li>\u5982\u679c\u4f60\u6709\u4e24\u4e2a\u63a5\u53e3 <code>GET /profiles/:profile_id</code> \u548c <code>GET /creators/:creator_id</code> \u4e24\u8005\u90fd\u9a8c\u8bc1\u7ed9\u5b9a\u7684 <code>profile_id</code> \u662f\u5426\u5b58\u5728\uff0c\u4f46\u662f <code>GET /creators/:creator_id</code> \u8fd8\u68c0\u67e5\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u662f\u521b\u5efa\u8005\uff0c\u90a3\u4e48\u6700\u597d\u5c06 <code>creator_id</code> \u8def\u5f84\u53d8\u91cf\u91cd\u547d\u540d\u4e3a <code>profile_id</code> \u5e76\u5c06\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u94fe\u63a5\u8d77\u6765\u3002</li> </ul> <pre><code># src.profiles.dependencies\nasync def valid_profile_id(profile_id: UUID4) -&gt; Mapping:\n    profile = await service.get_by_id(post_id)\n    if not profile:\n        raise ProfileNotFound()\n\n    return profile\n\n# src.creators.dependencies\nasync def valid_creator_id(\n    profile: Mapping = Depends(valid_profile_id)\n) -&gt; Mapping:\n    if not profile[\"is_creator\"]:\n       raise ProfileNotCreator()\n\n    return profile\n\n# src.profiles.router.py\n@router.get(\"/profiles/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(profile: Mapping = Depends(valid_profile_id)):\n    \"\"\"Get profile by id.\"\"\"\n    return profile\n\n# src.creators.router.py\n@router.get(\"/creators/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(\n     creator_profile: Mapping = Depends(valid_creator_id)\n):\n    \"\"\"Get creator's profile by id.\"\"\"\n    return creator_profile\n</code></pre> <p>\u4f7f\u7528 <code>/me</code> \u8def\u7531\u5b9a\u4e49\u6765\u8fd4\u56de\u5f53\u524d\u7528\u6237\u8d44\u6e90 (\u4f8b\u5982. <code>GET /profiles/me</code>, <code>GET /users/me/posts</code>)</p> <ol> <li>\u65e0\u9700\u68c0\u67e5\u7528\u6237ID\u662f\u5426\u5b58\u5728 - \u56e0\u4e3aauth\u6821\u9a8c\u65e9\u5df2\u6821\u9a8c\u4e86\u5176\u662f\u5426\u5b58\u5728\u3002</li> <li>\u65e0\u9700\u68c0\u67e5\u7528\u6237ID\u662f\u5426\u5c5e\u4e8e\u8bf7\u6c42\u8005</li> </ol> <p>Developing RESTful API makes it easier to reuse dependencies in routes like these:</p> <ol> <li><code>GET /courses/:course_id</code></li> <li><code>GET /courses/:course_id/chapters/:chapter_id/lessons</code></li> <li><code>GET /chapters/:chapter_id</code></li> </ol> <p>The only caveat is to use the same variable names in the path:</p> <ul> <li>If you have two endpoints <code>GET /profiles/:profile_id</code> and <code>GET /creators/:creator_id</code> that both validate whether the given <code>profile_id</code> exists,  but <code>GET /creators/:creator_id</code> also checks if the profile is creator, then it's better to rename <code>creator_id</code> path variable to <code>profile_id</code> and chain those two dependencies.</li> </ul> <pre><code># src.profiles.dependencies\nasync def valid_profile_id(profile_id: UUID4) -&gt; Mapping:\n    profile = await service.get_by_id(post_id)\n    if not profile:\n        raise ProfileNotFound()\n\n    return profile\n\n# src.creators.dependencies\nasync def valid_creator_id(profile: Mapping = Depends(valid_profile_id)) -&gt; Mapping:\n    if not profile[\"is_creator\"]:\n       raise ProfileNotCreator()\n\n    return profile\n\n# src.profiles.router.py\n@router.get(\"/profiles/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(profile: Mapping = Depends(valid_profile_id)):\n    \"\"\"Get profile by id.\"\"\"\n    return profile\n\n# src.creators.router.py\n@router.get(\"/creators/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(\n     creator_profile: Mapping = Depends(valid_creator_id)\n):\n    \"\"\"Get creator's profile by id.\"\"\"\n    return creator_profile\n</code></pre> <p>Use /me endpoints for users resources (e.g. <code>GET /profiles/me</code>, <code>GET /users/me/posts</code>)</p> <ol> <li>No need to validate that user id exists - it's already checked via auth method</li> <li>No need to check whether the user id belongs to the requester</li> </ol>"},{"location":"fastapi/v1/#7-\u5982\u679c\u4f60\u7684\u8def\u7531\u53ea\u6709\u963b\u585e\u7684-io-\u64cd\u4f5c-\u4e0d\u8981\u8ba9\u4f60\u7684\u8def\u7531\u5f02\u6b65","title":"7. \u5982\u679c\u4f60\u7684\u8def\u7531\u53ea\u6709\u963b\u585e\u7684 I/O \u64cd\u4f5c, \u4e0d\u8981\u8ba9\u4f60\u7684\u8def\u7531\u5f02\u6b65","text":"<p>Don't make your routes async, if you have only blocking I/O operations</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u5e95\u5c42\uff0cFastAPI \u53ef\u4ee5\u6709\u6548\u5730\u5904\u7406 \u5f02\u6b65\u548c\u540c\u6b65 I/O \u64cd\u4f5c\u3002</p> <ul> <li>FastAPI \u5728\u7ebf\u7a0b\u6c60 \u4e2d\u8fd0\u884c<code>sync</code>(\u540c\u6b65)\u8def\u7531\uff0c\u963b\u585e I/O \u64cd\u4f5c\u4e0d\u4f1a\u963b\u6b62[\u4e8b\u4ef6\u5faa\u73af](https://docs.python.org/3/library/asyncio-eventloop.html\uff09\u6267\u884c\u4efb\u52a1\u3002</li> <li>\u5426\u5219\uff0c\u5982\u679c\u8def\u7531\u88ab\u5b9a\u4e49\u4e3a<code>async</code>\uff0c\u90a3\u4e48\u5b83\u4f1a\u901a\u8fc7<code>await</code>\u5b9a\u671f\u8c03\u7528\uff0c\u5e76\u4e14 FastAPI \u76f8\u4fe1\u60a8\u53ea\u4f1a\u6267\u884c\u975e\u963b\u585e I/O \u64cd\u4f5c\u3002</li> </ul> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u60a8\u672a\u80fd\u4fe1\u4efb\u5e76\u5728\u5f02\u6b65\u8def\u7531\u4e2d\u6267\u884c\u963b\u585e\u64cd\u4f5c\uff0c\u4e8b\u4ef6\u5faa\u73af\u5c06\u65e0\u6cd5\u8fd0\u884c\u4e0b\u4e00\u4e2a\u4efb\u52a1\uff0c\u76f4\u5230\u8be5\u963b\u585e\u64cd\u4f5c\u5b8c\u6210\u3002</p> <pre><code>import asyncio\nimport time\n\n@router.get(\"/terrible-ping\")\nasync def terrible_catastrophic_ping():\n    time.sleep(10) # I/O\u963b\u585e\u64cd\u4f5c10\u79d2\n    pong = service.get_pong()  # \u4ece DB \u83b7\u53d6 pong \u7684 I/O \u963b\u585e\u64cd\u4f5c\n\n    return {\"pong\": pong}\n\n@router.get(\"/good-ping\")\ndef good_ping():\n    time.sleep(10) # I/O \u963b\u585e\u64cd\u4f5c 10 \u79d2\uff0c\u4f46\u5728\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\n    pong = service.get_pong()  # \u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6 pong \u7684 I/O \u963b\u585e\u64cd\u4f5c\uff0c\u4f46\u5728\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\n\n    return {\"pong\": pong}\n\n@router.get(\"/perfect-ping\")\nasync def perfect_ping():\n    await asyncio.sleep(10) # \u5f02\u6b65\u963b\u585e I/O \u64cd\u4f5c\n    pong = await service.async_get_pong()  # \u5f02\u6b65\u963b\u585e I/O \u6570\u636e\u5e93\u8c03\u7528\n\n    return {\"pong\": pong}\n</code></pre> <p>\u5f53\u6211\u4eec\u8c03\u7528\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48</p> <code>GET /terrible-ping</code><code>GET /good-ping</code><code>GET /perfect-ping</code> <ol> <li>FastAPI \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</li> <li>\u670d\u52a1\u5668\u7684\u4e8b\u4ef6\u5faa\u73af\u548c\u961f\u5217\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u5c06\u7b49\u5f85\u76f4\u5230 <code>time.sleep()</code> \u5b8c\u6210<ol> <li>\u670d\u52a1\u5668\u8ba4\u4e3a <code>time.sleep()</code> \u4e0d\u662f\u4e00\u4e2a I/O \u4efb\u52a1, \u6240\u4ee5\u4f1a\u4e00\u76f4\u7b49\u5f85\u5e76\u76f4\u5230\u5b83\u5b8c\u6210\u3002</li> <li>\u5728\u7b49\u5f85\u671f\u95f4\u670d\u52a1\u5668\u4e0d\u4f1a\u63a5\u53d7\u4efb\u4f55\u65b0\u7684\u8bf7\u6c42\u3002</li> </ol> </li> <li>\u7136\u540e, \u4e8b\u4ef6\u5faa\u73af\u548c\u6240\u6709\u4efb\u52a1\u4f1a\u5728\u961f\u5217\u4e2d\u4e00\u8d77\u7b49\u5f85\uff0c\u76f4\u5230<code>service.get_pong</code>\u6267\u884c\u5b8c\u6bd5\u3002<ol> <li>\u670d\u52a1\u5668\u8ba4\u4e3a <code>service.get_pong()</code> \u4e0d\u662f\u4e00\u4e2a I/O \u4efb\u52a1, \u6240\u4ee5\u4ed6\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u76f4\u5230\u5b83\u5b8c\u6210\u3002</li> <li>\u670d\u52a1\u5668\u5728\u7b49\u5f85\u671f\u95f4\u4e0d\u4f1a\u63a5\u53d7\u4efb\u4f55\u65b0\u7684\u7684\u8bf7\u6c42\u3002</li> </ol> </li> <li>\u670d\u52a1\u5668\u8fd4\u56de\u54cd\u5e94\u3002<ol> <li>\u54cd\u5e94\u4e4b\u540e, \u670d\u52a1\u5668\u5f00\u59cb\u63a5\u53d7\u65b0\u7684\u8bf7\u6c42\u3002</li> </ol> </li> </ol> <ol> <li>FastAPI \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</li> <li>FastAPI \u5c06\u6574\u4e2a\u8def\u7531 <code>good_ping</code> \u5206\u914d\u5230\u7ebf\u7a0b\u6c60\u4e2d, \u6c60\u4e2d\u6709\u5de5\u4f5c\u7ebf\u7a0b\u8d1f\u8d23\u8fd0\u884c\u8be5\u8def\u7531\u7ed1\u5b9a\u7684\u51fd\u6570\u3002</li> <li>\u5728 <code>good_ping</code> \u6267\u884c\u5176\u95f4, \u4e8b\u4ef6\u5faa\u73af\u4f1a\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u548c\u5de5\u4f5c\u7ebf\u7a0b\u7ed9\u4ed6\u4eec\uff0c (\u6bd4\u5982. \u63a5\u53d7\u65b0\u8bf7\u6c42, \u8c03\u7528\u6570\u636e\u5e93)<ul> <li>\u5de5\u4f5c\u7ebf\u7a0b\u72ec\u7acb\u4e8e\u4e3b\u7ebf\u7a0b (\u6bd4\u5982. \u6211\u4eec\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f), \u5b83\u5c06\u7b49\u5f85 <code>time.sleep</code> \u5b8c\u6210\uff0c\u7136\u540e\u7b49\u5f85 <code>service.get_pong</code> \u5b8c\u6210\u3002</li> <li>Sync(\u540c\u6b65)\u64cd\u4f5c\u53ea\u4f1a\u963b\u585e\u5b50\u7ebf\u7a0b\uff0c\u4e0d\u4f1a\u963b\u585e\u4e3b\u7ebf\u7a0b\u3002</li> </ul> </li> <li>\u7136\u540e <code>good_ping</code> \u5b8c\u6210\u4ed6\u7684\u5de5\u4f5c, \u670d\u52a1\u5668\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002</li> </ol> <ol> <li>FastAPI \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</li> <li>FastAPI \u5f02\u6b65\u7b49\u5f85 <code>asyncio.sleep(10)</code></li> <li>\u4e8b\u4ef6\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u5e76\u5904\u7406\u5b83\u4eec  (\u6bd4\u5982. \u63a5\u53d7\u65b0\u8bf7\u6c42, \u8c03\u7528\u6570\u636e\u5e93)</li> <li>\u5f53 <code>asyncio.sleep(10)</code> \u5b8c\u6210\u65f6, \u670d\u52a1\u5668\u8f6c\u5230\u4e0b\u4e00\u884c\u5e76\u7b49\u5f85 <code>service.async_get_pong</code> \u5b8c\u6210\u3002</li> <li>\u4e8b\u4ef6\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u5e76\u5904\u7406\u5b83\u4eec  (\u6bd4\u5982. \u63a5\u53d7\u65b0\u8bf7\u6c42, \u8c03\u7528\u6570\u636e\u5e93)</li> <li>\u5f53 <code>service.async_get_pong</code> \u5b8c\u6210, \u670d\u52a1\u5668\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002</li> </ol> <p>\u7b2c\u4e8c\u4e2a\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0cnon-blocking awaitables (\u975e\u963b\u585e\u7b49\u5f85)\u6216\u8005\u53d1\u9001\u5230\u7ebf\u7a0b\u6c60\u7684\u64cd\u4f5c\u5fc5\u987b\u662fI/O\u5bc6\u96c6\u578b\u4efb\u52a1(\u6bd4\u5982: \u6253\u5f00\u6587\u4ef6\u3001\u6570\u636e\u5e93\u8c03\u7528\u3001\u5916\u90e8API\u8c03\u7528\u7b49\u7b49)\u3002</p> <ul> <li>\u7b49\u5f85CPU\u5bc6\u96c6\u578b\u4efb\u52a1 (\u6bd4\u5982. \u8d1f\u8d23\u7684\u8ba1\u7b97, \u6570\u636e\u5904\u7406, \u89c6\u9891\u8f6c\u7801) \u662f\u6ca1\u6709\u4ef7\u503c\u7684\uff0c\u56e0\u4e3aCPU\u5fc5\u987b\u5de5\u4f5c\u624d\u80fd\u5b8c\u6210\u8ba1\u7b97\u4efb\u52a1, \u800cI/O\u64cd\u4f5c\u662f\u5916\u90e8\u7684\uff0c\u670d\u52a1\u5668\u5728\u7b49\u5f85\u8be5\u64cd\u4f5c\u5b8c\u6210\u65f6\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u53bb\u505a\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> <li>\u7531\u4e8e GIL\uff0c\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u8fd0\u884c CPU \u5bc6\u96c6\u578b\u4efb\u52a1\u4e5f\u4e0d\u662f\u6709\u6548\u7684\u3002 \u7b80\u800c\u8a00\u4e4b\uff0cGIL \u4e00\u6b21\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u5de5\u4f5c\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5bf9 CPU\u5bc6\u96c6\u578b\u4efb\u52a1\u6beb\u65e0\u7528\u5904\u3002</li> <li>\u5982\u679c\u4f60\u60f3\u4f18\u5316 CPU \u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u4f60\u5e94\u8be5\u5c06\u5b83\u4eec\u53d1\u9001\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u8fdb\u884c\u5de5\u4f5c\u3002</li> </ul> <p>StackOverflow\u4e0a\u56f0\u60d1\u7528\u6237\u7684\u76f8\u5173\u95ee\u9898:</p> <ol> <li>https://stackoverflow.com/questions/62976648/architecture-flask-vs-fastapi/70309597#70309597 - \u540c\u6837\u53ef\u4ee5\u770b\u770b \u6211\u7684\u56de\u7b54</li> <li>https://stackoverflow.com/questions/65342833/fastapi-uploadfile-is-slow-compared-to-flask</li> <li>https://stackoverflow.com/questions/71516140/fastapi-runs-api-calls-in-serial-instead-of-parallel-fashion</li> </ol> <p>Under the hood, FastAPI can effectively handle both async and sync I/O operations.</p> <ul> <li>FastAPI runs <code>sync</code> routes in the threadpool and blocking I/O operations won't stop the event loop from executing the tasks.</li> <li>Otherwise, if the route is defined <code>async</code> then it's called regularly via <code>await</code> and FastAPI trusts you to do only non-blocking I/O operations.</li> </ul> <p>The caveat is if you fail that trust and execute blocking operations within async routes, the event loop will not be able to run the next tasks until that blocking operation is done.</p> <pre><code>import asyncio\nimport time\n\n@router.get(\"/terrible-ping\")\nasync def terrible_catastrophic_ping():\n    time.sleep(10) # I/O blocking operation for 10 seconds\n    pong = service.get_pong()  # I/O blocking operation to get pong from DB\n\n    return {\"pong\": pong}\n\n@router.get(\"/good-ping\")\ndef good_ping():\n    time.sleep(10) # I/O blocking operation for 10 seconds, but in another thread\n    pong = service.get_pong()  # I/O blocking operation to get pong from DB, but in another thread\n\n    return {\"pong\": pong}\n\n@router.get(\"/perfect-ping\")\nasync def perfect_ping():\n    await asyncio.sleep(10) # non-blocking I/O operation\n    pong = await service.async_get_pong()  # non-blocking I/O db call\n\n    return {\"pong\": pong}\n</code></pre> <p>What happens when we call:</p> <ol> <li><code>GET /terrible-ping</code></li> <li>FastAPI server receives a request and starts handling it</li> <li>Server's event loop and all the tasks in the queue will be waiting until <code>time.sleep()</code> is finished<ol> <li>Server thinks <code>time.sleep()</code> is not an I/O task, so it waits until it is finished</li> <li>Server won't accept any new requests while waiting</li> </ol> </li> <li>Then, event loop and all the tasks in the queue will be waiting until <code>service.get_pong</code> is finished<ol> <li>Server thinks <code>service.get_pong()</code> is not an I/O task, so it waits until it is finished</li> <li>Server won't accept any new requests while waiting</li> </ol> </li> <li>Server returns the response.<ol> <li>After a response, server starts accepting new requests</li> </ol> </li> <li><code>GET /good-ping</code></li> <li>FastAPI server receives a request and starts handling it</li> <li>FastAPI sends the whole route <code>good_ping</code> to the threadpool, where a worker thread will run the function</li> <li>While <code>good_ping</code> is being executed, event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)<ul> <li>Independently of main thread (i.e. our FastAPI app),     worker thread will be waiting for <code>time.sleep</code> to finish and then for <code>service.get_pong</code> to finish</li> <li>Sync operation blocks only the side thread, not the main one.</li> </ul> </li> <li>When <code>good_ping</code> finishes its work, server returns a response to the client</li> <li><code>GET /perfect-ping</code></li> <li>FastAPI server receives a request and starts handling it</li> <li>FastAPI awaits <code>asyncio.sleep(10)</code></li> <li>Event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)</li> <li>When <code>asyncio.sleep(10)</code> is done, servers goes to the next lines and awaits <code>service.async_get_pong</code></li> <li>Event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)</li> <li>When <code>service.async_get_pong</code> is done, server returns a response to the client</li> </ol> <p>The second caveat is that operations that are non-blocking awaitables or are sent to the thread pool must be I/O intensive tasks (e.g. open file, db call, external API call).</p> <ul> <li>Awaiting CPU-intensive tasks (e.g. heavy calculations, data processing, video transcoding) is worthless since the CPU has to work to finish the tasks, while I/O operations are external and server does nothing while waiting for that operations to finish, thus it can go to the next tasks.</li> <li>Running CPU-intensive tasks in other threads also isn't effective, because of GIL. In short, GIL allows only one thread to work at a time, which makes it useless for CPU tasks.</li> <li>If you want to optimize CPU intensive tasks you should send them to workers in another process.</li> </ul> <p>Related StackOverflow questions of confused users</p> <ol> <li>https://stackoverflow.com/questions/62976648/architecture-flask-vs-fastapi/70309597#70309597</li> <li>Here you can also check my answer</li> <li>https://stackoverflow.com/questions/65342833/fastapi-uploadfile-is-slow-compared-to-flask</li> <li>https://stackoverflow.com/questions/71516140/fastapi-runs-api-calls-in-serial-instead-of-parallel-fashion</li> </ol>"},{"location":"fastapi/v1/#8-\u4ece\u7b2c-0-\u5929\u5f00\u59cb\u7684\u81ea\u5b9a\u4e49\u57fa\u7840\u6a21\u578b","title":"8. \u4ece\u7b2c 0 \u5929\u5f00\u59cb\u7684\u81ea\u5b9a\u4e49\u57fa\u7840\u6a21\u578b","text":"<p>Custom base model from day 0</p> \u4e2d\u6587\u82f1\u6587 <p>\u62e5\u6709\u53ef\u63a7\u7684\u5168\u5c40\u57fa\u7840\u6a21\u578b\u4f7f\u6211\u4eec\u80fd\u591f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u6a21\u578b\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u6807\u51c6\u7684\u65e5\u671f\u65f6\u95f4\u683c\u5f0f\u6216\u4e3a\u57fa\u7840\u6a21\u578b\u7684\u6240\u6709\u5b50\u7c7b\u6dfb\u52a0\u4e00\u4e2a\u8d85\u7ea7\u65b9\u6cd5\u3002</p> <pre><code>from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel, root_validator\n\n\ndef orjson_dumps(v, *, default):\n    # orjson.dumps \u8fd4\u56de\u5b57\u8282\uff0c\u4e3a\u4e86\u5339\u914d\u6807\u51c6\u7684 json.dumps, \u6211\u4eec\u9700\u8981\u89e3\u7801\u3002\n    return orjson.dumps(v, default=default).decode()\n\n\ndef convert_datetime_to_gmt(dt: datetime) -&gt; str:\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n\n\nclass ORJSONModel(BaseModel):\n    class Config:\n        json_loads = orjson.loads\n        json_dumps = orjson_dumps\n        json_encoders = {datetime: convert_datetime_to_gmt}  # \u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\u7684\u81ea\u5b9a\u4e49 JSON \u7f16\u7801\u65b9\u6cd5\n\n    @root_validator()\n    def set_null_microseconds(cls, data: dict) -&gt; dict:\n       \"\"\"\u5728\u6240\u6709\u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\u503c\u4e2d\u5220\u9664\u5fae\u79d2\u3002\"\"\"\n        datetime_fields = {\n            k: v.replace(microsecond=0)\n            for k, v in data.items()\n            if isinstance(k, datetime)\n        }\n\n        return {**data, **datetime_fields}\n\n    def serializable_dict(self, **kwargs):\n       \"\"\"\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b\u53ef\u5e8f\u5217\u5316\u5b57\u6bb5\u7684\u5b57\u5178\u3002\"\"\"\n        default_dict = super().dict(**kwargs)\n\n        return jsonable_encoder(default_dict)\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u51b3\u5b9a\u5236\u4f5c\u4e00\u4e2a\u5168\u5c40\u57fa\u7840\u6a21\u578b\uff1a</p> <ul> <li>\u4f7f\u7528 orjson \u7528\u4e8e\u6570\u636e\u7684\u5e8f\u5217\u5316</li> <li>\u5728\u6240\u6709\u65e5\u671f\u683c\u5f0f\u4e2d\u5c06\u5fae\u79d2\u964d\u4e3a 0</li> <li>\u5c06\u6240\u6709\u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\u5e8f\u5217\u5316\u4e3a\u5177\u6709\u663e\u5f0f\u65f6\u533a\u7684\u6807\u51c6\u683c\u5f0f</li> </ul> <p>Having a controllable global base model allows us to customize all the models within the app. For example, we could have a standard datetime format or add a super method for all subclasses of the base model.</p> <pre><code>from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel, root_validator\n\n\ndef orjson_dumps(v, *, default):\n    # orjson.dumps returns bytes, to match standard json.dumps we need to decode\n    return orjson.dumps(v, default=default).decode()\n\n\ndef convert_datetime_to_gmt(dt: datetime) -&gt; str:\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n\n\nclass ORJSONModel(BaseModel):\n    class Config:\n        json_loads = orjson.loads\n        json_dumps = orjson_dumps\n        json_encoders = {datetime: convert_datetime_to_gmt}  # method for customer JSON encoding of datetime fields\n\n    @root_validator()\n    def set_null_microseconds(cls, data: dict) -&gt; dict:\n       \"\"\"Drops microseconds in all the datetime field values.\"\"\"\n        datetime_fields = {\n            k: v.replace(microsecond=0)\n            for k, v in data.items()\n            if isinstance(k, datetime)\n        }\n\n        return {**data, **datetime_fields}\n\n    def serializable_dict(self, **kwargs):\n       \"\"\"Return a dict which contains only serializable fields.\"\"\"\n        default_dict = super().dict(**kwargs)\n\n        return jsonable_encoder(default_dict)\n</code></pre> <p>In the example above we have decided to make a global base model which:</p> <ul> <li>uses orjson to serialize data</li> <li>drops microseconds to 0 in all date formats</li> <li>serializes all datetime fields to standard format with explicit timezone</li> </ul>"},{"location":"fastapi/v1/#9-\u6587\u6863docs","title":"9. \u6587\u6863(Docs)","text":"<p>Docs</p> \u4e2d\u6587\u82f1\u6587 <ol> <li> <p>\u9664\u975e\u60a8\u7684 API \u662f\u516c\u5f00\u7684\uff0c\u5426\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9690\u85cf\u6587\u6863\u3002 \u4ec5\u5728\u9009\u5b9a\u7684\u73af\u5883\u4e2d\u660e\u786e\u663e\u793a\u5b83\u3002</p> <pre><code>from fastapi import FastAPI\nfrom starlette.config import Config\n\nconfig = Config(\".env\")  # \u89e3\u6790 .env \u6587\u4ef6\u4e2d\u7684\u73af\u5883\u53d8\u91cf\n\nENVIRONMENT = config(\"ENVIRONMENT\")  # \u83b7\u53d6\u5f53\u524d\u73af\u5883\u540d\u79f0\nSHOW_DOCS_ENVIRONMENT = (\"local\", \"staging\")  # \u5141\u8bb8\u663e\u793a\u6587\u6863\u7684\u73af\u5883\u540d\u79f0\u5217\u8868\n\napp_configs = {\"title\": \"My Cool API\"}\nif ENVIRONMENT not in SHOW_DOCS_ENVIRONMENT:\napp_configs[\"openapi_url\"] = None  # \u5c06\u6587\u6863\u7684 url \u8bbe\u7f6e\u4e3a null\n\napp = FastAPI(**app_configs)\n</code></pre> </li> <li> <p>\u5e2e\u52a9FastAPI\u751f\u6210\u901a\u4fd7\u6613\u61c2\u7684\u6587\u6863</p> </li> <li>\u8bbe\u7f6e <code>response_model</code>, <code>status_code</code>, <code>description</code>, \u7b49\u5b57\u6bb5.</li> <li>\u5982\u679c\u54cd\u5e94\u6a21\u578b\u548c\u72b6\u6001\u4e0d\u540c\uff0c\u4f7f\u7528 <code>responses</code> \u8def\u7531\u5c5e\u6027\u4e3a\u4e0d\u540c\u7684\u54cd\u5e94\u6dfb\u52a0\u6587\u6863</li> </ol> <pre><code>from fastapi import APIRouter, status\n\nrouter = APIRouter()\n\n@router.post(\n    \"/endpoints\",\n    response_model=DefaultResponseModel,  # \u9ed8\u8ba4\u54cd\u5e94\u7684 pydantic \u6a21\u578b\n    status_code=status.HTTP_201_CREATED,  # \u9ed8\u8ba4\u72b6\u6001\u7801\n    description=\"\u6587\u6863\u63a5\u53e3\u7684\u6e05\u6670\u63cf\u8ff0\",\n    tags=[\"Endpoint Category\"],  # \u63a5\u53e3\u5206\u7c7b\n    summary=\"Summary of the Endpoint\",  # \u63a5\u53e3\u6982\u8981\n    responses={\n        status.HTTP_200_OK: {\n            \"model\": OkResponse, # \u81ea\u5b9a\u4e49 pydantic \u6a21\u578b\uff0c\u7528\u4e8e 200 \u54cd\u5e94\n            \"description\": \"Ok Response\",\n        },\n        status.HTTP_201_CREATED: {\n            \"model\": CreatedResponse,  # \u81ea\u5b9a\u4e49 pydantic \u6a21\u578b\uff0c\u7528\u4e8e 201 \u54cd\u5e94\n            \"description\": \"Creates something from user request \",\n        },\n        status.HTTP_202_ACCEPTED: {\n            \"model\": AcceptedResponse,  # \u81ea\u5b9a\u4e49 pydantic \u6a21\u578b\uff0c\u7528\u4e8e 202 \u54cd\u5e94\n            \"description\": \"Accepts request and handles it later\",\n        },\n    },\n)\nasync def documented_route():\n    pass\n</code></pre> <p>\u5373\u751f\u6210\u7684\u6587\u6863\u5c31\u50cf\u8fd9\u6837: </p> <ol> <li>Unless your API is public, hide docs by default. Show it explicitly on the selected envs only.</li> </ol> <pre><code>from fastapi import FastAPI\nfrom starlette.config import Config\n\nconfig = Config(\".env\")  # parse .env file for env variables\n\nENVIRONMENT = config(\"ENVIRONMENT\")  # get current env name\nSHOW_DOCS_ENVIRONMENT = (\"local\", \"staging\")  # explicit list of allowed envs\n\napp_configs = {\"title\": \"My Cool API\"}\nif ENVIRONMENT not in SHOW_DOCS_ENVIRONMENT:\napp_configs[\"openapi_url\"] = None  # set url for docs as null\n\napp = FastAPI(**app_configs)\n</code></pre> <ol> <li>Help FastAPI to generate an easy-to-understand docs</li> <li>Set <code>response_model</code>, <code>status_code</code>, <code>description</code>, etc.</li> <li>If models and statuses vary, use <code>responses</code> route attribute to add docs for different responses</li> </ol> <pre><code>from fastapi import APIRouter, status\n\nrouter = APIRouter()\n\n@router.post(\n    \"/endpoints\",\n    response_model=DefaultResponseModel,  # default response pydantic model \n    status_code=status.HTTP_201_CREATED,  # default status code\n    description=\"Description of the well documented endpoint\",\n    tags=[\"Endpoint Category\"],\n    summary=\"Summary of the Endpoint\",\n    responses={\n        status.HTTP_200_OK: {\n            \"model\": OkResponse, # custom pydantic model for 200 response\n            \"description\": \"Ok Response\",\n        },\n        status.HTTP_201_CREATED: {\n            \"model\": CreatedResponse,  # custom pydantic model for 201 response\n            \"description\": \"Creates something from user request \",\n        },\n        status.HTTP_202_ACCEPTED: {\n            \"model\": AcceptedResponse,  # custom pydantic model for 202 response\n            \"description\": \"Accepts request and handles it later\",\n        },\n    },\n)\nasync def documented_route():\n    pass\n</code></pre> <p>Will generate docs like this: </p>"},{"location":"fastapi/v1/#10-\u4f7f\u7528-pydantic-\u7684-basesettings-\u8fdb\u884c\u914d\u7f6e","title":"10. \u4f7f\u7528 Pydantic \u7684 BaseSettings \u8fdb\u884c\u914d\u7f6e","text":"<p>Use Pydantic's BaseSettings for configs</p> \u4e2d\u6587\u82f1\u6587 <p>Pydantic \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177 \u6765\u89e3\u6790\u73af\u5883\u53d8\u91cf\u5e76\u4f7f\u7528\u5176\u9a8c\u8bc1\u5668\u5904\u7406\u5b83\u4eec\u3002</p> <pre><code>from pydantic import AnyUrl, BaseSettings, PostgresDsn\n\nclass AppSettings(BaseSettings):\n    class Config:\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n        env_prefix = \"app_\"\n\n    DATABASE_URL: PostgresDsn\n    IS_GOOD_ENV: bool = True\n    ALLOWED_CORS_ORIGINS: set[AnyUrl]\n</code></pre> <p>Pydantic gives a powerful tool to parse environment variables and process them with its validators.</p> <pre><code>from pydantic import AnyUrl, BaseSettings, PostgresDsn\n\nclass AppSettings(BaseSettings):\n    class Config:\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n        env_prefix = \"app_\"\n\n    DATABASE_URL: PostgresDsn\n    IS_GOOD_ENV: bool = True\n    ALLOWED_CORS_ORIGINS: set[AnyUrl]\n</code></pre>"},{"location":"fastapi/v1/#11-sqlalchemy-\u8bbe\u7f6e\u6570\u636e\u5e93\u952e\u547d\u540d\u7ea6\u5b9a","title":"11. SQLAlchemy: \u8bbe\u7f6e\u6570\u636e\u5e93\u952e\u547d\u540d\u7ea6\u5b9a","text":"<p>SQLAlchemy: Set DB keys naming convention</p> \u4e2d\u6587\u82f1\u6587 <p>\u6839\u636e\u60a8\u7684\u6570\u636e\u5e93\u7ea6\u5b9a\u660e\u786e\u8bbe\u7f6e\u7d22\u5f15\u7684\u547d\u540d\u4f18\u4e8e <code>sqlalchemy</code> \u81ea\u52a8\u547d\u540d\u3002</p> <pre><code>from sqlalchemy import MetaData\n\nPOSTGRES_INDEXES_NAMING_CONVENTION = {\n    \"ix\": \"%(column_0_label)s_idx\",\n    \"uq\": \"%(table_name)s_%(column_0_name)s_key\",\n    \"ck\": \"%(table_name)s_%(constraint_name)s_check\",\n    \"fk\": \"%(table_name)s_%(column_0_name)s_fkey\",\n    \"pk\": \"%(table_name)s_pkey\",\n}\nmetadata = MetaData(naming_convention=POSTGRES_INDEXES_NAMING_CONVENTION)\n</code></pre> <p>Explicitly setting the indexes' namings according to your database's convention is preferable over sqlalchemy's.</p> <pre><code>from sqlalchemy import MetaData\n\nPOSTGRES_INDEXES_NAMING_CONVENTION = {\n    \"ix\": \"%(column_0_label)s_idx\",\n    \"uq\": \"%(table_name)s_%(column_0_name)s_key\",\n    \"ck\": \"%(table_name)s_%(constraint_name)s_check\",\n    \"fk\": \"%(table_name)s_%(column_0_name)s_fkey\",\n    \"pk\": \"%(table_name)s_pkey\",\n}\nmetadata = MetaData(naming_convention=POSTGRES_INDEXES_NAMING_CONVENTION)\n</code></pre>"},{"location":"fastapi/v1/#12-\u8fc1\u79fb-alembic","title":"12. \u8fc1\u79fb: Alembic","text":"<p>Migrations. Alembic</p> \u4e2d\u6587\u82f1\u6587 <ol> <li>\u8fc1\u79fb\u5fc5\u987b\u662f\u9759\u6001\u7684\u548c\u53ef\u6062\u590d\u7684\u3002 \u5982\u679c\u60a8\u7684\u8fc1\u79fb\u4f9d\u8d56\u4e8e\u52a8\u6001\u751f\u6210\u7684\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u786e\u4fdd\u552f\u4e00\u52a8\u6001\u7684\u662f\u6570\u636e\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5176\u7ed3\u6784\u3002</li> <li>\u751f\u6210\u5177\u6709\u63cf\u8ff0\u6027\u540d\u79f0\u548c slug \u7684\u8fc1\u79fb\u3002 Slug \u662f\u5fc5\u9700\u7684\uff0c\u5e94\u8be5\u89e3\u91ca\u8fd9\u4e9b\u53d8\u5316\u3002</li> <li>\u4e3a\u65b0\u8fc1\u79fb\u8bbe\u7f6e\u4eba\u7c7b\u53ef\u8bfb\u7684\u6587\u4ef6\u6a21\u677f\u3002 \u6211\u4eec\u4f7f\u7528 <code>*date*_*slug*.py</code> \u6a21\u5f0f\uff0c\u4f8b\u5982 <code>2022-08-24_post_content_idx.py</code></li> </ol> <pre><code># alembic.ini\nfile_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s\n</code></pre> <ol> <li>Migrations must be static and revertable. If your migrations depend on dynamically generated data, then make sure the only thing that is dynamic is the data itself, not its structure.</li> <li>Generate migrations with descriptive names &amp; slugs. Slug is required and should explain the changes.</li> <li>Set human-readable file template for new migrations. We use <code>*date*_*slug*.py</code> pattern, e.g. <code>2022-08-24_post_content_idx.py</code></li> </ol> <pre><code># alembic.ini\nfile_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s\n</code></pre>"},{"location":"fastapi/v1/#13-\u8bbe\u7f6e\u6570\u636e\u5e93\u8868\u5b57\u5178\u547d\u540d\u7ea6\u5b9a","title":"13. \u8bbe\u7f6e\u6570\u636e\u5e93(\u8868/\u5b57\u5178)\u547d\u540d\u7ea6\u5b9a","text":"<p>Set DB naming convention</p> \u4e2d\u6587\u82f1\u6587 <p>\u547d\u540d\u4fdd\u6301\u4e00\u81f4\u5f88\u91cd\u8981\u3002 \u6211\u4eec\u9075\u5faa\u7684\u4e00\u4e9b\u89c4\u5219\uff1a</p> <ol> <li>lower_case_snake (\u5c0f\u5199\u9a7c\u5cf0\u547d\u540d)</li> <li>\u5355\u6570\u5f62\u5f0f (\u4f8b\u5982. <code>post</code>, <code>post_like</code>, <code>user_playlist</code>)</li> <li>\u4f7f\u7528\u6a21\u5757\u524d\u7f00\u5bf9\u76f8\u4f3c\u8868\u8fdb\u884c\u5206\u7ec4, \u4f8b\u5982. <code>payment_account</code>, <code>payment_bill</code>, <code>post</code>, <code>post_like</code></li> <li>\u8de8\u8868\u547d\u540d\u4fdd\u6301\u4e00\u81f4\uff0c\u4f46\u5177\u4f53\u7684\u547d\u540d\u662f\u53ef\u4ee5\u7684, \u4f8b\u5982.</li> <li>\u5728\u6240\u6709\u8868\u4e2d\u4f7f\u7528 <code>profile_id</code>\uff0c\u4f46\u5982\u679c\u5176\u4e2d\u4e00\u4e9b\u53ea\u9700\u8981\u4f5c\u4e3a\u521b\u5efa\u8005\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8bf7\u4f7f\u7528 <code>creator_id</code></li> <li>\u5728\u6240\u6709\u62bd\u8c61\u8868\uff0c\u5f62\u5982 <code>post_like</code> \u3001 <code>post_view</code> \u4e2d\u4f7f\u7528 <code>post_id</code> \uff0c\u4f46\u5728\u76f8\u5173\u6a21\u5757\u4e2d\u4f7f\u7528\u5177\u4f53\u547d\u540d\uff0c\u5982 <code>chapters.course_id</code> \u4e2d\u7684 <code>course_id</code> \u3002</li> <li><code>_at</code> \u4f5c\u4e3a <code>datetime</code> \u7c7b\u578b\u7684\u540e\u7f00</li> <li><code>_date</code> \u4f5c\u4e3a <code>date</code> \u7c7b\u578b\u7684\u540e\u7f00</li> </ol> <p>Being consistent with names is important. Some rules we followed:</p> <ol> <li>lower_case_snake</li> <li>singular form (e.g. <code>post</code>, <code>post_like</code>, <code>user_playlist</code>)</li> <li>group similar tables with module prefix, e.g. <code>payment_account</code>, <code>payment_bill</code>, <code>post</code>, <code>post_like</code></li> <li>stay consistent across tables, but concrete namings are ok, e.g.</li> <li>use <code>profile_id</code> in all tables, but if some of them need only profiles that are creators, use <code>creator_id</code></li> <li>use <code>post_id</code> for all abstract tables like <code>post_like</code>, <code>post_view</code>, but use concrete naming in relevant modules like <code>course_id</code> in <code>chapters.course_id</code></li> <li><code>_at</code> suffix for datetime</li> <li><code>_date</code> suffix for date</li> </ol>"},{"location":"fastapi/v1/#14-\u4ece\u7b2c0\u5929\u5f00\u59cb\u5199\u57fa\u4e8e\u5f02\u6b65\u7684\u6d4b\u8bd5","title":"14. \u4ece\u7b2c0\u5929\u5f00\u59cb\u5199\u57fa\u4e8e\u5f02\u6b65\u7684\u6d4b\u8bd5","text":"<p>Set tests client async from day 0</p> \u4e2d\u6587\u82f1\u6587 <p>\u57fa\u4e8eDB\u5199\u96c6\u6210\u6d4b\u8bd5\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u5728\u5c06\u6765\u51fa\u73b0\u57fa\u4e8e\u4e8b\u4ef6\u5faa\u73af\u7684\u9519\u8bef\u3002</p> <p>\u7acb\u5373\u5f00\u59cb\u57fa\u4e8e\u5f02\u6b65\u6d4b\u8bd5\u5ba2\u6237\u7aef\u7684\u6d4b\u8bd5\uff0c \u4f8b\u5982. async_asgi_testclient \u6216 httpx</p> <pre><code>import pytest\nfrom async_asgi_testclient import TestClient\n\nfrom src.main import app  # inited FastAPI app\n\n\n@pytest.fixture\nasync def client():\n    host, port = \"127.0.0.1\", \"5555\"\n    scope = {\"client\": (host, port)}\n\n    async with TestClient(\n        app, scope=scope, headers={\"X-User-Fingerprint\": \"Test\"}\n    ) as client:\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_create_post(client: TestClient):\n    resp = await client.post(\"/posts\")\n\n    assert resp.status_code == 201\n</code></pre> <p>\u9664\u975e\u4f60\u6709\u540c\u6b65\u5230\u6570\u636e\u5e93\u8fde\u63a5\uff08\u6253\u6270\u4e86\uff1f\uff09\u6216\u8005\u4e0d\u6253\u7b97\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\u3002</p> <p>Writing integration tests with DB will most likely lead to messed up event loop errors in the future. Set the async test client immediately, e.g. async_asgi_testclient or httpx</p> <pre><code>import pytest\nfrom async_asgi_testclient import TestClient\n\nfrom src.main import app  # inited FastAPI app\n\n\n@pytest.fixture\nasync def client():\n    host, port = \"127.0.0.1\", \"5555\"\n    scope = {\"client\": (host, port)}\n\n    async with TestClient(\n        app, scope=scope, headers={\"X-User-Fingerprint\": \"Test\"}\n    ) as client:\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_create_post(client: TestClient):\n    resp = await client.post(\"/posts\")\n\n    assert resp.status_code == 201\n</code></pre> <p>Unless you have sync db connections (excuse me?) or aren't planning to write integration tests.</p>"},{"location":"fastapi/v1/#15-\u540e\u53f0\u4efb\u52a1\u4f7f\u7528-asynciocreate_task","title":"15. \u540e\u53f0\u4efb\u52a1\u4f7f\u7528 asyncio.create_task","text":"<p>BackgroundTasks &gt; asyncio.create_task</p> \u4e2d\u6587\u82f1\u6587 <p>BackgroundTasks \u53ef\u4ee5 \u6709\u6548\u8fd0\u884c \u6240\u6709\u7684\u963b\u585e\u548c\u975e\u963b\u585eI/O\u64cd\u4f5c, \u5c31\u50cfFastAPI \u5904\u7406\u963b\u585e\u8def\u7531\u4e00\u6837\u3002 (<code>sync</code>(\u540c\u6b65)\u4efb\u52a1\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c, \u800c <code>async</code>(\u5f02\u6b65) \u4eba\u7269\u5219\u7b49\u5f85\u4e2d\u7a0d\u540e\u8fd0\u884c\u3002)</p> <ul> <li>\u4e0d\u8981\u6b3a\u9a97\u5de5\u4f5c\u4f8b\u7a0b\u4ee5\u53ca\u5c06\u963b\u585e\u7684I/O\u64cd\u4f5c\u6807\u8bb0\u4e3a<code>async</code>(\u5f02\u6b65).\uff08\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u4f1a\u963b\u585e\u4e8b\u4ef6\u8c03\u7528\u5faa\u73af\uff0c\u5bfc\u81f4\u5f71\u54cd\u5176\u4ed6\u7684\u5f02\u6b65\u4efb\u52a1\u8c03\u7528\uff09</li> <li>\u4e0d\u8981\u5c06\u5b83\u7528\u4e8e\u7e41\u91cd\u7684CPU\u5bc6\u96c6\u578b\u4efb\u52a1\u3002</li> </ul> <pre><code>from fastapi import APIRouter, BackgroundTasks\nfrom pydantic import UUID4\n\nfrom src.notifications import service as notifications_service\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/users/{user_id}/email\")\nasync def send_user_email(worker: BackgroundTasks, user_id: UUID4):\n    \"\"\"Send email to user\"\"\"\n    worker.add_task(notifications_service.send_email, user_id)  # send email after responding client\n    return {\"status\": \"ok\"}\n</code></pre> <p>BackgroundTasks can effectively run both blocking and non-blocking I/O operations the same way FastAPI handles blocking routes (<code>sync</code> tasks are run in a threadpool, while <code>async</code> tasks are awaited later)</p> <ul> <li>Don't lie to the worker and don't mark blocking I/O operations as <code>async</code></li> <li>Don't use it for heavy CPU intensive tasks.</li> </ul> <pre><code>from fastapi import APIRouter, BackgroundTasks\nfrom pydantic import UUID4\n\nfrom src.notifications import service as notifications_service\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/users/{user_id}/email\")\nasync def send_user_email(worker: BackgroundTasks, user_id: UUID4):\n    \"\"\"Send email to user\"\"\"\n    worker.add_task(notifications_service.send_email, user_id)  # send email after responding client\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"fastapi/v1/#16-\u7c7b\u578b\u6ce8\u89e3\u5f88\u91cd\u8981","title":"16. \u7c7b\u578b\u6ce8\u89e3\u5f88\u91cd\u8981","text":"<p>Typing is important</p> \u4e2d\u6587\u82f1\u6587 <p>FastAPI, Pydantic, \u4ee5\u53ca\u73b0\u4ee3\u7684 IDE \u9f13\u52b1\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u3002</p> <p>\u6ca1\u6709\u7c7b\u578b\u63d0\u793a:</p> <p></p> <p>\u6709\u7c7b\u578b\u63d0\u793a:</p> <p></p> <p>FastAPI, Pydantic, and modern IDEs encourage to take use of type hints.</p> <p>Without Type Hints</p> <p></p> <p>With Type Hints</p> <p></p>"},{"location":"fastapi/v1/#17-\u4ee5chunks\u5757\u7684\u5f62\u5f0f\u4fdd\u5b58\u6587\u4ef6","title":"17. \u4ee5chunks(\u5757)\u7684\u5f62\u5f0f\u4fdd\u5b58\u6587\u4ef6","text":"<p>Save files in chunks</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0d\u8981\u671f\u671b\u60a8\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u5c0f\u6587\u4ef6\u3002</p> <pre><code>import aiofiles\nfrom fastapi import UploadFile\n\nDEFAULT_CHUNK_SIZE = 1024 * 1024 * 50  # 50 megabytes MB(\u5146\u5b57\u8282)\n\nasync def save_video(video_file: UploadFile):\n   async with aiofiles.open(\"/file/path/name.mp4\", \"wb\") as f:\n     while chunk := await video_file.read(DEFAULT_CHUNK_SIZE):\n         await f.write(chunk)\n</code></pre> <p>Don't hope your clients will send small files.</p> <pre><code>import aiofiles\nfrom fastapi import UploadFile\n\nDEFAULT_CHUNK_SIZE = 1024 * 1024 * 50  # 50 megabytes\n\nasync def save_video(video_file: UploadFile):\n   async with aiofiles.open(\"/file/path/name.mp4\", \"wb\") as f:\n     while chunk := await video_file.read(DEFAULT_CHUNK_SIZE):\n         await f.write(chunk)\n</code></pre>"},{"location":"fastapi/v1/#18-\u5c0f\u5fc3pydantic\u7684\u52a8\u6001\u5b57\u6bb5","title":"18. \u5c0f\u5fc3pydantic\u7684\u52a8\u6001\u5b57\u6bb5","text":"<p>Be careful with dynamic pydantic fields</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u8054\u5408\u7c7b\u578b(Union)\u7684 pydantic \u5b57\u6bb5\uff0c\u8bf7\u786e\u4fdd\u9a8c\u8bc1\u5668\u660e\u786e\u77e5\u9053\u8fd9\u4e9b\u7c7b\u578b\u4e4b\u95f4\u7684\u533a\u522b\u3002</p> <pre><code>from pydantic import BaseModel\n\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n\nclass Post(BaseModel):\n   content: Article | Video\n\n\npost = Post(content={\"video_id\": 1, \"text\": \"text\"})\nprint(type(post.content))\n# OUTPUT: Article\n# Article \u975e\u5e38\u5305\u5bb9\uff0c\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\uff0c\u5141\u8bb8\u4efb\u4f55\u5b57\u5178\u751f\u6548\n</code></pre> <p>\u89e3\u51b3\u65b9\u6848:</p> <ol> <li> <p>\u9a8c\u8bc1\u8f93\u5165\u53ea\u5141\u8bb8\u6709\u6548\u5b57\u6bb5\u5e76\u5728\u63d0\u4f9b\u672a\u77e5\u6570\u65f6\u5f15\u53d1\u9519\u8bef</p> <pre><code>from pydantic import BaseModel, Extra\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Post(BaseModel):\n   content: Article | Video\n</code></pre> </li> <li> <p>\u5982\u679c\u5b57\u6bb5\u5f88\u7b80\u5355\uff0c\u8bf7\u4f7f\u7528 Pydantic \u7684 Smart Union (&gt;v1.9)</p> <p>\u5982\u679c\u5b57\u6bb5\u5f88\u7b80\u5355\uff0c\u5982 <code>int</code> \u6216 <code>bool</code>\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5b83\u4e0d\u9002\u7528\u4e8e\u7c7b\u7b49\u590d\u6742\u5b57\u6bb5\u3002</p> <p>\u6ca1\u6709 Smart Union :</p> <pre><code>from pydantic import BaseModel\n\n\nclass Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: True\nprint(type(p.field_2))\n# OUTPUT: int\nprint(type(p.content))\n# OUTPUT: Article\n</code></pre> <p>\u6709 Smart Union :</p> <pre><code>class Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\n   class Config:\n      smart_union = True\n\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: 1\nprint(type(p.field_2))\n# OUTPUT: str\nprint(type(p.content))\n# OUTPUT: Article, \u56e0\u4e3a smart_union \u4e0d\u9002\u7528\u4e8e\u50cf\u7c7b\u8fd9\u6837\u7684\u590d\u6742\u5b57\u6bb5\n</code></pre> </li> <li> <p>\u5feb\u901f\u89e3\u51b3\u65b9\u6cd5</p> <p>\u6b63\u786e\u6392\u5e8f\u5b57\u6bb5\u7c7b\u578b: \u4ece\u6700\u4e25\u683c\u7684\u5230\u5bbd\u677e\u7684\u6821\u9a8c\u3002</p> <pre><code>class Post(BaseModel):\n   content: Video | Article\n</code></pre> </li> </ol> <p>If you have a pydantic field that can accept a union of types, be sure the validator explicitly knows the difference between those types.</p> <pre><code>from pydantic import BaseModel\n\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n\nclass Post(BaseModel):\n   content: Article | Video\n\n\npost = Post(content={\"video_id\": 1, \"text\": \"text\"})\nprint(type(post.content))\n# OUTPUT: Article\n# Article is very inclusive and all fields are optional, allowing any dict to become valid\n</code></pre> <p>Solutions:</p> <ol> <li>Validate input has only allowed valid fields and raise error if unknowns are provided</li> </ol> <pre><code>from pydantic import BaseModel, Extra\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Post(BaseModel):\n   content: Article | Video\n</code></pre> <ol> <li>Use Pydantic's Smart Union (&gt;v1.9) if fields are simple</li> </ol> <p>It's a good solution if the fields are simple like <code>int</code> or <code>bool</code>, but it doesn't work for complex fields like classes.</p> <p>Without Smart Union</p> <pre><code>from pydantic import BaseModel\n\n\nclass Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: True\nprint(type(p.field_2))\n# OUTPUT: int\nprint(type(p.content))\n# OUTPUT: Article\n</code></pre> <p>With Smart Union</p> <pre><code>class Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\n   class Config:\n      smart_union = True\n\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: 1\nprint(type(p.field_2))\n# OUTPUT: str\nprint(type(p.content))\n# OUTPUT: Article, because smart_union doesn't work for complex fields like classes\n</code></pre> <ol> <li>Fast Workaround</li> </ol> <p>Order field types properly: from the most strict ones to loose ones.</p> <pre><code>class Post(BaseModel):\n   content: Video | Article\n</code></pre>"},{"location":"fastapi/v1/#19-sql-\u7b2c\u4e00-pydantic-\u7b2c\u4e8c","title":"19. SQL-\u7b2c\u4e00, Pydantic-\u7b2c\u4e8c","text":"<p>SQL-first, Pydantic-second</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u901a\u5e38\uff0c\u6570\u636e\u5e93\u5904\u7406\u6570\u636e\u7684\u901f\u5ea6\u6bd4 CPython \u66f4\u5feb\u3001\u66f4\u5e72\u51c0\u3002</li> <li>\u6700\u597d\u4f7f\u7528 SQL \u6267\u884c\u6240\u6709\u590d\u6742\u7684\u8fde\u63a5\u548c\u7b80\u5355\u7684\u6570\u636e\u64cd\u4f5c\u3002</li> <li>\u6700\u597d\u5728\u6570\u636e\u5e93\u4e2d\u805a\u5408 JSON \u4ee5\u54cd\u5e94\u5d4c\u5957\u5bf9\u8c61\u3002</li> </ul> <pre><code># src.posts.service\nfrom typing import Mapping\n\nfrom pydantic import UUID4\nfrom sqlalchemy import desc, func, select, text\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom src.database import database, posts, profiles, post_review, products\n\nasync def get_posts(\n    creator_id: UUID4, *, limit: int = 10, offset: int = 0\n) -&gt; list[Mapping]: \n    select_query = (\n        select(\n            (\n                posts.c.id,\n                posts.c.type,\n                posts.c.slug,\n                posts.c.title,\n                func.json_build_object(\n                text(\"'id', profiles.id\"),\n                text(\"'first_name', profiles.first_name\"),\n                text(\"'last_name', profiles.last_name\"),\n                text(\"'username', profiles.username\"),\n                ).label(\"creator\"),\n            )\n        )\n        .select_from(posts.join(profiles, posts.c.owner_id == profiles.c.id))\n        .where(posts.c.owner_id == creator_id)\n        .limit(limit)\n        .offset(offset)\n        .group_by(\n            posts.c.id,\n            posts.c.type,\n            posts.c.slug,\n            posts.c.title,\n            profiles.c.id,\n            profiles.c.first_name,\n            profiles.c.last_name,\n            profiles.c.username,\n            profiles.c.avatar,\n        )\n        .order_by(\n            desc(coalesce(posts.c.updated_at, posts.c.published_at, posts.c.created_at))\n        )\n    )\n\n    return await database.fetch_all(select_query)\n\n# src.posts.schemas\nimport orjson\nfrom enum import Enum\n\nfrom pydantic import BaseModel, UUID4, validator\n\n\nclass PostType(str, Enum):\n    ARTICLE = \"ARTICLE\"\n    COURSE = \"COURSE\"\n\n\nclass Creator(BaseModel):\n    id: UUID4\n    first_name: str\n    last_name: str\n    username: str\n\n\nclass Post(BaseModel):\n    id: UUID4\n    type: PostType\n    slug: str\n    title: str\n    creator: Creator\n\n    @validator(\"creator\", pre=True)  # before default validation\n    def parse_json(cls, creator: str | dict | Creator) -&gt; dict | Creator:\n    if isinstance(creator, str):  # i.e. json\n        return orjson.loads(creator)\n\n    return creator\n\n# src.posts.router\nfrom fastapi import APIRouter, Depends\n\nrouter = APIRouter()\n\n\n@router.get(\"/creators/{creator_id}/posts\", response_model=list[Post])\nasync def get_creator_posts(creator: Mapping = Depends(valid_creator_id)):\nposts = await service.get_posts(creator[\"id\"])\n\nreturn posts\n</code></pre> <p>\u5982\u679c\u805a\u5408\u6570\u636e\u8868\u5355 DB \u662f\u4e00\u4e2a\u7b80\u5355\u7684 JSON\uff0c\u90a3\u4e48\u770b\u770b Pydantic \u7684<code>Json</code>\u5b57\u6bb5\u7c7b\u578b\uff0c\u5b83\u5c06\u9996\u5148\u52a0\u8f7d\u539f\u59cb JSON\u3002</p> <pre><code>from pydantic import BaseModel, Json\n\nclass A(BaseModel):\n    numbers: Json[list[int]]\n    dicts: Json[dict[str, int]]\n\nvalid_a = A(numbers=\"[1, 2, 3]\", dicts='{\"key\": 1000}')  # becomes A(numbers=[1,2,3], dicts={\"key\": 1000})\ninvalid_a = A(numbers='[\"a\", \"b\", \"c\"]', dicts='{\"key\": \"str instead of int\"}')  # raises ValueError\n</code></pre> <ul> <li>Usually, database handles data processing much faster and cleaner than CPython will ever do.</li> <li>It's preferable to do all the complex joins and simple data manipulations with SQL.</li> <li>It's preferable to aggregate JSONs in DB for responses with nested objects.</li> </ul> <pre><code># src.posts.service\nfrom typing import Mapping\n\nfrom pydantic import UUID4\nfrom sqlalchemy import desc, func, select, text\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom src.database import database, posts, profiles, post_review, products\n\nasync def get_posts(\n    creator_id: UUID4, *, limit: int = 10, offset: int = 0\n) -&gt; list[Mapping]: \n    select_query = (\n        select(\n            (\n                posts.c.id,\n                posts.c.type,\n                posts.c.slug,\n                posts.c.title,\n                func.json_build_object(\n                   text(\"'id', profiles.id\"),\n                   text(\"'first_name', profiles.first_name\"),\n                   text(\"'last_name', profiles.last_name\"),\n                   text(\"'username', profiles.username\"),\n                ).label(\"creator\"),\n            )\n        )\n        .select_from(posts.join(profiles, posts.c.owner_id == profiles.c.id))\n        .where(posts.c.owner_id == creator_id)\n        .limit(limit)\n        .offset(offset)\n        .group_by(\n            posts.c.id,\n            posts.c.type,\n            posts.c.slug,\n            posts.c.title,\n            profiles.c.id,\n            profiles.c.first_name,\n            profiles.c.last_name,\n            profiles.c.username,\n            profiles.c.avatar,\n        )\n        .order_by(\n            desc(coalesce(posts.c.updated_at, posts.c.published_at, posts.c.created_at))\n        )\n    )\n\n    return await database.fetch_all(select_query)\n\n# src.posts.schemas\nimport orjson\nfrom enum import Enum\n\nfrom pydantic import BaseModel, UUID4, validator\n\n\nclass PostType(str, Enum):\n    ARTICLE = \"ARTICLE\"\n    COURSE = \"COURSE\"\n\n\nclass Creator(BaseModel):\n    id: UUID4\n    first_name: str\n    last_name: str\n    username: str\n\n\nclass Post(BaseModel):\n    id: UUID4\n    type: PostType\n    slug: str\n    title: str\n    creator: Creator\n\n    @validator(\"creator\", pre=True)  # before default validation\n    def parse_json(cls, creator: str | dict | Creator) -&gt; dict | Creator:\n       if isinstance(creator, str):  # i.e. json\n          return orjson.loads(creator)\n\n       return creator\n\n# src.posts.router\nfrom fastapi import APIRouter, Depends\n\nrouter = APIRouter()\n\n\n@router.get(\"/creators/{creator_id}/posts\", response_model=list[Post])\nasync def get_creator_posts(creator: Mapping = Depends(valid_creator_id)):\n   posts = await service.get_posts(creator[\"id\"])\n\n   return posts\n</code></pre> <p>If an aggregated data form DB is a simple JSON, then take a look at Pydantic's <code>Json</code> field type, which will load raw JSON first.</p> <pre><code>from pydantic import BaseModel, Json\n\nclass A(BaseModel):\n    numbers: Json[list[int]]\n    dicts: Json[dict[str, int]]\n\nvalid_a = A(numbers=\"[1, 2, 3]\", dicts='{\"key\": 1000}')  # becomes A(numbers=[1,2,3], dicts={\"key\": 1000})\ninvalid_a = A(numbers='[\"a\", \"b\", \"c\"]', dicts='{\"key\": \"str instead of int\"}')  # raises ValueError\n</code></pre>"},{"location":"fastapi/v1/#20-\u9a8c\u8bc1host\u5982\u679c\u7528\u6237\u53ef\u4ee5\u53d1\u9001\u516c\u5f00\u53ef\u7528\u7684-url","title":"20. \u9a8c\u8bc1host\uff0c\u5982\u679c\u7528\u6237\u53ef\u4ee5\u53d1\u9001\u516c\u5f00\u53ef\u7528\u7684 URL","text":"<p>Validate hosts, if users can send publicly available URLs</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5165\u53e3\uff1a</p> <ol> <li>\u63a5\u53d7\u6765\u81ea\u7528\u6237\u7684\u5a92\u4f53\u6587\u4ef6\uff0c</li> <li>\u4e3a\u6b64\u6587\u4ef6\u751f\u6210\u552f\u4e00\u7684 url\uff0c</li> <li>\u8fd4\u56de url \u7ed9\u7528\u6237\uff0c</li> <li>\u4ed6\u4eec\u5c06\u5728\u5176\u4ed6\u5165\u53e3\u4f7f\u7528\u5b83\u4eec\uff0c\u4f8b\u5982 <code>PUT /profiles/me</code>, <code>POST /posts</code></li> <li>\u8fd9\u4e9b\u7aef\u70b9\u53ea\u63a5\u53d7\u6765\u81ea\u767d\u540d\u5355\u4e3b\u673a\u7684\u6587\u4ef6</li> <li>\u4f7f\u7528\u6b64\u540d\u79f0\u548c\u5339\u914d\u7684 URL \u5c06\u6587\u4ef6\u4e0a\u4f20\u5230 AWS\u3002</li> </ol> <p>\u5982\u679c\u6211\u4eec\u4e0d\u5c06 URL \u4e3b\u673a\u5217\u5165\u767d\u540d\u5355\uff0c\u90a3\u4e48\u4e0d\u826f\u7528\u6237\u5c31\u6709\u673a\u4f1a\u4e0a\u4f20\u5371\u9669\u94fe\u63a5\u3002</p> <pre><code>from pydantic import AnyUrl, BaseModel\n\nALLOWED_MEDIA_URLS = {\"mysite.com\", \"mysite.org\"}\n\nclass CompanyMediaUrl(AnyUrl):\n    @classmethod\n    def validate_host(cls, parts: dict) -&gt; tuple[str, str, str, bool]:\n       \"\"\"\u5c06 pydantic \u7684 AnyUrl \u9a8c\u8bc1\u6269\u5c55\u5230\u767d\u540d\u5355 URL \u4e3b\u673a\u3002\"\"\"\n        host, tld, host_type, rebuild = super().validate_host(parts)\n        if host not in ALLOWED_MEDIA_URLS:\n            raise ValueError(\n                \"Forbidden host url. Upload files only to internal services.\"\n            )\n\n        return host, tld, host_type, rebuild\n\n\nclass Profile(BaseModel):\n    avatar_url: CompanyMediaUrl  # only whitelisted urls for avatar\n</code></pre> <p>For example, we have a specific endpoint which:</p> <ol> <li>accepts media file from the user,</li> <li>generates unique url for this file,</li> <li>returns url to user,</li> <li>which they will use in other endpoints like <code>PUT /profiles/me</code>, <code>POST /posts</code></li> <li>these endpoints accept files only from whitelisted hosts</li> <li>uploads file to AWS with this name and matching URL.</li> </ol> <p>If we don't whitelist URL hosts, then bad users will have a chance to upload dangerous links.</p> <pre><code>from pydantic import AnyUrl, BaseModel\n\nALLOWED_MEDIA_URLS = {\"mysite.com\", \"mysite.org\"}\n\nclass CompanyMediaUrl(AnyUrl):\n    @classmethod\n    def validate_host(cls, parts: dict) -&gt; tuple[str, str, str, bool]:\n       \"\"\"Extend pydantic's AnyUrl validation to whitelist URL hosts.\"\"\"\n        host, tld, host_type, rebuild = super().validate_host(parts)\n        if host not in ALLOWED_MEDIA_URLS:\n            raise ValueError(\n                \"Forbidden host url. Upload files only to internal services.\"\n            )\n\n        return host, tld, host_type, rebuild\n\n\nclass Profile(BaseModel):\n    avatar_url: CompanyMediaUrl  # only whitelisted urls for avatar\n</code></pre>"},{"location":"fastapi/v1/#21-\u5982\u679cschema\u76f4\u63a5\u9762\u5411\u5ba2\u6237\u7aef\u5728pydantic\u7684\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u629b\u51favalueerror","title":"21. \u5982\u679cschema\u76f4\u63a5\u9762\u5411\u5ba2\u6237\u7aef\uff0c\u5728pydantic\u7684\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u629b\u51faValueError","text":"<p>Raise a ValueError in custom pydantic validators, if schema directly faces the client</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b83\u5c06\u5411\u7528\u6237\u8fd4\u56de\u4e00\u4e2a\u5f88\u597d\u7684\u8be6\u7ec6\u54cd\u5e94\u3002</p> <pre><code># src.profiles.schemas\nfrom pydantic import BaseModel, validator\n\nclass ProfileCreate(BaseModel):\n    username: str\n\n    @validator(\"username\")\n    def validate_bad_words(cls, username: str):\n        if username  == \"me\":\n            raise ValueError(\"bad username, choose another\")\n\n        return username\n\n\n# src.profiles.routes\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/profiles\")\nasync def get_creator_posts(profile_data: ProfileCreate):\n   pass\n</code></pre> <p>Response \u4f8b\u5b50:</p> <p></p> <p>It will return a nice detailed response to users.</p> <pre><code># src.profiles.schemas\nfrom pydantic import BaseModel, validator\n\nclass ProfileCreate(BaseModel):\n    username: str\n\n    @validator(\"username\")\n    def validate_bad_words(cls, username: str):\n        if username  == \"me\":\n            raise ValueError(\"bad username, choose another\")\n\n        return username\n\n\n# src.profiles.routes\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/profiles\")\nasync def get_creator_posts(profile_data: ProfileCreate):\n   pass\n</code></pre> <p>Response Example:</p> <p></p>"},{"location":"fastapi/v1/#22-\u4e0d\u8981\u5fd8\u8bb0-fastapi-\u5c06-response-\u7684-pydantic-\u5bf9\u8c61\u8f6c\u6362\u4e3a-dict\u7136\u540e\u8f6c\u6362\u4e3a-responsemodel-\u7684\u5b9e\u4f8b\u7136\u540e\u8f6c\u6362\u4e3a-dict\u7136\u540e\u8f6c\u6362\u4e3a-json","title":"22. \u4e0d\u8981\u5fd8\u8bb0 FastAPI \u5c06 Response \u7684 Pydantic \u5bf9\u8c61\u8f6c\u6362\u4e3a Dict\uff0c\u7136\u540e\u8f6c\u6362\u4e3a ResponseModel \u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u8f6c\u6362\u4e3a Dict\uff0c\u7136\u540e\u8f6c\u6362\u4e3a JSON","text":"<p>Don't forget FastAPI converts Response Pydantic Object to Dict then to an instance of ResponseModel then to Dict then to JSON</p> \u4e2d\u6587\u82f1\u6587 <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, root_validator\n\napp = FastAPI()\n\n\nclass ProfileResponse(BaseModel):\n    @root_validator\n    def debug_usage(cls, data: dict):\n        print(\"created pydantic model\")\n\n        return data\n\n    def dict(self, *args, **kwargs):\n        print(\"called dict\")\n        return super().dict(*args, **kwargs)\n\n\n@app.get(\"/\", response_model=ProfileResponse)\nasync def root():\n    return ProfileResponse()\n</code></pre> <p>\u65e5\u5fd7\u8f93\u51fa:</p> <pre><code>[INFO] [2022-08-28 12:00:00.000000] created pydantic model\n[INFO] [2022-08-28 12:00:00.000010] called dict\n[INFO] [2022-08-28 12:00:00.000020] created pydantic model\n[INFO] [2022-08-28 12:00:00.000030] called dict\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, root_validator\n\napp = FastAPI()\n\n\nclass ProfileResponse(BaseModel):\n    @root_validator\n    def debug_usage(cls, data: dict):\n        print(\"created pydantic model\")\n\n        return data\n\n    def dict(self, *args, **kwargs):\n        print(\"called dict\")\n        return super().dict(*args, **kwargs)\n\n\n@app.get(\"/\", response_model=ProfileResponse)\nasync def root():\n    return ProfileResponse()\n</code></pre> <p>Logs Output:</p> <pre><code>[INFO] [2022-08-28 12:00:00.000000] created pydantic model\n[INFO] [2022-08-28 12:00:00.000010] called dict\n[INFO] [2022-08-28 12:00:00.000020] created pydantic model\n[INFO] [2022-08-28 12:00:00.000030] called dict\n</code></pre>"},{"location":"fastapi/v1/#23-\u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528sync\u540c\u6b65-sdk-\u8bf7\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c","title":"23. \u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528sync(\u540c\u6b65) SDK, \u8bf7\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c","text":"<p>If you must use sync SDK, then run it in a thread pool</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528\u5e93\u4e0e\u5916\u90e8\u670d\u52a1\u4ea4\u4e92\uff0c\u5e76\u4e14\u5b83\u4e0d\u652f\u6301<code>async</code>(\u5f02\u6b65)\uff0c\u5219\u5728\u5916\u90e8\u5de5\u4f5c\u7ebf\u7a0b\u4e2d\u8fdb\u884c HTTP \u8c03\u7528\u3002</p> <p>\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6765\u81ea starlette \u7684\u8457\u540d\u7684<code>run_in_threadpool</code>\u3002</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\nfrom my_sync_library import SyncAPIClient \n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def call_my_sync_library():\n    my_data = await service.get_my_data()\n\n    client = SyncAPIClient()\n    await run_in_threadpool(client.make_request, data=my_data)\n</code></pre> <p>If you must use a library to interact with external services, and it's not <code>async</code>, then make the HTTP calls in an external worker thread.</p> <p>For a simple example, we could use our well-known <code>run_in_threadpool</code> from starlette.</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\nfrom my_sync_library import SyncAPIClient \n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def call_my_sync_library():\n    my_data = await service.get_my_data()\n\n    client = SyncAPIClient()\n    await run_in_threadpool(client.make_request, data=my_data)\n</code></pre>"},{"location":"fastapi/v1/#24-\u4f7f\u7528-linters-black-isort-autoflake","title":"24. \u4f7f\u7528 linters (black, isort, autoflake)","text":"<p>Use linters (black, isort, autoflake)</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528 linters, \u60a8\u53ef\u4ee5\u5fd8\u8bb0\u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u4e13\u6ce8\u4e8e\u7f16\u5199\u4e1a\u52a1\u903b\u8f91\u3002</p> <p>Black \u662f\u4e00\u4e2a\u6beb\u4e0d\u59a5\u534f\u7684\u4ee3\u7801\u683c\u5f0f\u5316\u7a0b\u5e8f\uff0c\u5b83\u6d88\u9664\u4e86\u60a8\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5fc5\u987b\u505a\u51fa\u7684\u8bb8\u591a\u5c0f\u51b3\u5b9a\u3002 \u5176\u4ed6 linter \u53ef\u5e2e\u52a9\u60a8\u7f16\u5199\u66f4\u6e05\u6670\u7684\u4ee3\u7801\u5e76\u9075\u5faa PEP8\u3002</p> <p>\u4f7f\u7528<code>pre-commit hook</code>(\u9884\u63d0\u4ea4\u94a9\u5b50)\u662f\u4e00\u79cd\u6d41\u884c\u7684\u826f\u597d\u505a\u6cd5\uff0c\u4f46\u4ec5\u4f7f\u7528\u811a\u672c\u5bf9\u6211\u4eec\u6765\u8bf4\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>#!/bin/sh -e\nset -x\n\nautoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place src tests --exclude=__init__.py\nisort src tests --profile black\nblack src tests\n</code></pre> <p>With linters, you can forget about formatting the code and focus on writing the business logic.</p> <p>Black is the uncompromising code formatter that eliminates so many small decisions you have to make during development. Other linters help you write cleaner code and follow the PEP8.</p> <p>It's a popular good practice to use pre-commit hooks, but just using the script was ok for us.</p> <pre><code>#!/bin/sh -e\nset -x\n\nautoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place src tests --exclude=__init__.py\nisort src tests --profile black\nblack src tests\n</code></pre>"},{"location":"fastapi/v1/#\u60ca\u559c\u90e8\u5206","title":"\u60ca\u559c\u90e8\u5206","text":"<p>Bonus Section</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e00\u4e9b\u975e\u5e38\u5584\u826f\u7684\u4eba\u5206\u4eab\u4e86\u4ed6\u4eec\u81ea\u5df1\u7684\u7ecf\u9a8c\u548c\u6700\u4f73\u5b9e\u8df5\uff0c\u7edd\u5bf9\u503c\u5f97\u4e00\u8bfb\u3002</p> <p>\u5728\u9879\u76ee\u7684 issues \u90e8\u5206\u67e5\u770b\u5b83\u4eec\u3002</p> <p>\u4f8b\u5982\uff0clowercase00 \u8be6\u7ec6\u63cf\u8ff0\u4e86\u4ed6\u4eec\u4f7f\u7528\u6743\u9650\u548c\u6388\u6743\u3001\u57fa\u4e8e\u7c7b\u7684\u670d\u52a1\u548c\u89c6\u56fe\u3001\u4efb\u52a1\u961f\u5217\u7684\u6700\u4f73\u5b9e\u8df5\uff0c \u81ea\u5b9a\u4e49\u54cd\u5e94\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u4f7f\u7528 dynaconf \u8fdb\u884c\u914d\u7f6e\u7b49\u3002</p> <p>\u5982\u679c\u60a8\u6709\u4efb\u4f55\u5173\u4e8e\u4f7f\u7528 FastAPI \u7684\u7ecf\u9a8c\u8981\u5206\u4eab\uff0c\u65e0\u8bba\u662f\u597d\u662f\u574f\uff0c\u90fd\u975e\u5e38\u6b22\u8fce\u60a8\u521b\u5efa\u4e00\u4e2a\u65b0\u95ee\u9898\u3002 \u9605\u8bfb\u5b83\u662f\u6211\u4eec\u7684\u8363\u5e78\u3002</p> <p>Some very kind people shared their own experience and best practices that are definitely worth reading. Check them out at issues section of the project.</p> <p>For instance, lowercase00 has described in details their best practices working with permissions &amp; auth, class-based services &amp; views, task queues, custom response serializers, configuration with dynaconf, etc.  </p> <p>If you have something to share about your experience working with FastAPI, whether it's good or bad, you are very welcome to create a new issue. It is our pleasure to read it.</p>"},{"location":"fastapi/v2/","title":"FastAPI \u6700\u4f73\u5b9e\u8df5","text":"<p>FastAPI Best Practices</p> <p>\u539f\u6587: https://github.com/zhanymkanov/fastapi-best-practices</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u662f\u6211\u5728\u521d\u521b\u516c\u53f8\u4f7f\u7528\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u60ef\u4f8b\u7684\u4e3b\u89c2\u5217\u8868\u3002</p> <p>\u5728\u8fc7\u53bb\u51e0\u5e74\u7684\u751f\u4ea7\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u505a\u51fa\u4e86\u4e00\u4e9b\u597d\u7684\u548c\u574f\u7684\u51b3\u5b9a\uff0c\u8fd9\u4e9b\u51b3\u5b9a\u6781\u5927\u5730\u5f71\u54cd\u4e86\u6211\u4eec\u7684\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u3002\u5176\u4e2d\u4e00\u4e9b\u503c\u5f97\u5206\u4eab\u3002</p> <p>Opinionated list of best practices and conventions I use in startups.</p> <p>For the last several years in production, we have been making good and bad decisions that impacted our developer experience dramatically. Some of them are worth sharing. </p>"},{"location":"fastapi/v2/#\u9879\u76ee\u7ed3\u6784","title":"\u9879\u76ee\u7ed3\u6784","text":"<p>Project Structure</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u7ec4\u7ec7\u4e00\u4e2a\u9879\u76ee\uff0c\u4f46\u6700\u597d\u7684\u7ed3\u6784\u662f\u4e00\u81f4\u7684\u3001\u76f4\u63a5\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u60ca\u559c\u3002</p> <p>\u8bb8\u591a\u793a\u4f8b\u9879\u76ee\u548c\u6559\u7a0b\u6309\u6587\u4ef6\u7c7b\u578b\uff08\u4f8b\u5982\uff0ccrud\u3001routers\u3001models\uff09\u5212\u5206\u9879\u76ee\uff0c\u8fd9\u5bf9\u4e8e\u5fae\u670d\u52a1\u6216\u8303\u56f4\u8f83\u5c0f\u7684\u9879\u76ee\u6548\u679c\u5f88\u597d\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u9002\u5408\u6211\u4eec\u62e5\u6709\u8bb8\u591a\u9886\u57df\u548c\u6a21\u5757\u7684\u5355\u4f53\u5e94\u7528\u3002</p> <p>\u6211\u53d1\u73b0\u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\u66f4\u53ef\u6269\u5c55\u548c\u53ef\u8fdb\u5316\u7684\u7ed3\u6784\u662f\u53d7 Netflix \u7684 Dispatch \u542f\u53d1\u7684\uff0c\u6709\u4e00\u4e9b\u5c0f\u7684\u4fee\u6539\u3002</p> <pre><code>fastapi-project\n\u251c\u2500\u2500 alembic/\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py  # pydantic\u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 models.py  # \u6570\u636e\u5e93\u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py  # \u672c\u5730\u914d\u7f6e\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2502   \u251c\u2500\u2500 client.py  # \u5916\u90e8\u670d\u52a1\u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 posts\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 config.py  # \u5168\u5c40\u914d\u7f6e\n\u2502   \u251c\u2500\u2500 models.py  # \u5168\u5c40\u6a21\u578b\n\u2502   \u251c\u2500\u2500 exceptions.py  # \u5168\u5c40\u5f02\u5e38\n\u2502   \u251c\u2500\u2500 pagination.py  # \u5168\u5c40\u6a21\u5757\uff0c\u4f8b\u5982\u5206\u9875\n\u2502   \u251c\u2500\u2500 database.py  # \u6570\u636e\u5e93\u8fde\u63a5\u76f8\u5173\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2514\u2500\u2500 posts\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 requirements\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u2514\u2500\u2500 prod.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 logging.ini\n\u2514\u2500\u2500 alembic.ini\n</code></pre> <ol> <li> <p>\u5c06\u6240\u6709\u9886\u57df\u76ee\u5f55\u5b58\u50a8\u5728 <code>src</code> \u6587\u4ef6\u5939\u5185</p> <ol> <li><code>src/</code> - \u5e94\u7528\u7684\u6700\u9ad8\u5c42\u7ea7\uff0c\u5305\u542b\u901a\u7528\u6a21\u578b\u3001\u914d\u7f6e\u548c\u5e38\u91cf\u7b49\u3002</li> <li><code>src/main.py</code> - \u9879\u76ee\u7684\u6839\uff0c\u521d\u59cb\u5316 FastAPI \u5e94\u7528</li> </ol> </li> <li> <p>\u6bcf\u4e2a\u5305\u90fd\u6709\u81ea\u5df1\u7684\u8def\u7531\u5668\u3001\u6a21\u5f0f\u3001\u6a21\u578b\u7b49\u3002</p> <ol> <li><code>router.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684\u6838\u5fc3\uff0c\u5305\u542b\u6240\u6709\u7aef\u70b9</li> <li><code>schemas.py</code> - \u7528\u4e8e pydantic \u6a21\u578b</li> <li><code>models.py</code> - \u7528\u4e8e\u6570\u636e\u5e93\u6a21\u578b</li> <li><code>service.py</code> - \u6a21\u5757\u7279\u5b9a\u7684\u4e1a\u52a1\u903b\u8f91</li> <li><code>dependencies.py</code> - \u8def\u7531\u5668\u4f9d\u8d56</li> <li><code>constants.py</code> - \u6a21\u5757\u7279\u5b9a\u7684\u5e38\u91cf\u548c\u9519\u8bef\u4ee3\u7801</li> <li><code>config.py</code> - \u4f8b\u5982\u73af\u5883\u53d8\u91cf</li> <li><code>utils.py</code> - \u975e\u4e1a\u52a1\u903b\u8f91\u51fd\u6570\uff0c\u4f8b\u5982\u54cd\u5e94\u6807\u51c6\u5316\u3001\u6570\u636e\u4e30\u5bcc\u5316\u7b49</li> <li><code>exceptions.py</code> - \u6a21\u5757\u7279\u5b9a\u7684\u5f02\u5e38\uff0c\u4f8b\u5982 <code>PostNotFound</code>, <code>InvalidUserData</code></li> </ol> </li> <li> <p>\u5f53\u5305\u9700\u8981\u4ece\u5176\u4ed6\u5305\u5bfc\u5165\u670d\u52a1\u3001\u4f9d\u8d56\u6216\u5e38\u91cf\u65f6 - \u4f7f\u7528\u663e\u5f0f\u7684\u6a21\u5757\u540d\u79f0\u5bfc\u5165\u5b83\u4eec</p> </li> </ol> <pre><code>from src.auth import constants as auth_constants\nfrom src.notifications import service as notification_service\nfrom src.posts.constants import ErrorCode as PostsErrorCode  # \u5982\u679c\u6211\u4eec\u5728\u6bcf\u4e2a\u5305\u7684\u5e38\u91cf\u6a21\u5757\u4e2d\u6709\u6807\u51c6\u9519\u8bef\u4ee3\u7801\n</code></pre> <p>There are many ways to structure a project, but the best structure is one that is consistent, straightforward, and free of surprises.</p> <p>Many example projects and tutorials divide the project by file type (e.g., crud, routers, models), which works well for microservices or projects with fewer scopes. However, this approach didn't fit our monolith with many domains and modules.</p> <p>The structure I found more scalable and evolvable for these cases is inspired by Netflix's Dispatch, with some minor modifications.</p> <pre><code>fastapi-project\n\u251c\u2500\u2500 alembic/\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py  # pydantic models\n\u2502   \u2502   \u251c\u2500\u2500 models.py  # db models\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py  # local configs\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2502   \u251c\u2500\u2500 client.py  # client model for external service communication\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 posts\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 config.py  # global configs\n\u2502   \u251c\u2500\u2500 models.py  # global models\n\u2502   \u251c\u2500\u2500 exceptions.py  # global exceptions\n\u2502   \u251c\u2500\u2500 pagination.py  # global module e.g. pagination\n\u2502   \u251c\u2500\u2500 database.py  # db connection related stuff\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2514\u2500\u2500 posts\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 requirements\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u2514\u2500\u2500 prod.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 logging.ini\n\u2514\u2500\u2500 alembic.ini\n</code></pre> <ol> <li> <p>Store all domain directories inside <code>src</code> folder</p> <ol> <li><code>src/</code> - highest level of an app, contains common models, configs, and constants, etc.</li> <li><code>src/main.py</code> - root of the project, which inits the FastAPI app</li> </ol> </li> <li> <p>Each package has its own router, schemas, models, etc.</p> <ol> <li><code>router.py</code> - is a core of each module with all the endpoints</li> <li><code>schemas.py</code> - for pydantic models</li> <li><code>models.py</code> - for db models</li> <li><code>service.py</code> - module specific business logic  </li> <li><code>dependencies.py</code> - router dependencies</li> <li><code>constants.py</code> - module specific constants and error codes</li> <li><code>config.py</code> - e.g. env vars</li> <li><code>utils.py</code> - non-business logic functions, e.g. response normalization, data enrichment, etc.</li> <li><code>exceptions.py</code> - module specific exceptions, e.g. <code>PostNotFound</code>, <code>InvalidUserData</code></li> </ol> </li> <li> <p>When package requires services or dependencies or constants from other packages - import them with an explicit module name</p> </li> </ol> <pre><code>from src.auth import constants as auth_constants\nfrom src.notifications import service as notification_service\nfrom src.posts.constants import ErrorCode as PostsErrorCode  # in case we have Standard ErrorCode in constants module of each package\n</code></pre>"},{"location":"fastapi/v2/#\u5f02\u6b65\u8def\u7531","title":"\u5f02\u6b65\u8def\u7531","text":"<p>Async Routes</p> \u4e2d\u6587\u82f1\u6587 <p>FastAPI \u662f\u4e00\u4e2a\u5f02\u6b65\u6846\u67b6\uff0c\u9996\u5148\u5b83\u662f\u4e3a\u5f02\u6b65 I/O \u64cd\u4f5c\u8bbe\u8ba1\u7684\uff0c\u8fd9\u4e5f\u662f\u5b83\u5982\u6b64\u5feb\u901f\u7684\u539f\u56e0\u3002</p> <p>\u7136\u800c\uff0cFastAPI \u5e76\u4e0d\u9650\u5236\u4f60\u53ea\u80fd\u4f7f\u7528 <code>async</code> \u8def\u7531\uff0c\u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>sync</code> \u8def\u7531\u3002\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u521d\u7ea7\u5f00\u53d1\u8005\u8bef\u4ee5\u4e3a\u5b83\u4eec\u662f\u4e00\u6837\u7684\uff0c\u4f46\u5b83\u4eec\u5e76\u975e\u5982\u6b64\u3002</p> <p>FastAPI is an async framework, in the first place. It is designed to work with async I/O operations and that is the reason it is so fast. </p> <p>However, FastAPI doesn't restrict you to use only <code>async</code> routes, and the developer can use <code>sync</code> routes as well. This might confuse beginner developers into believing that they are the same, but they are not.</p>"},{"location":"fastapi/v2/#io-\u5bc6\u96c6\u578b\u4efb\u52a1","title":"I/O \u5bc6\u96c6\u578b\u4efb\u52a1","text":"<p>I/O Intensive Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u5185\u90e8\uff0cFastAPI \u53ef\u4ee5\u6709\u6548\u5730\u5904\u7406\u5f02\u6b65\u548c\u540c\u6b65 I/O \u64cd\u4f5c\u3002</p> <ul> <li>FastAPI \u5728 \u7ebf\u7a0b\u6c60 \u4e2d\u8fd0\u884c <code>\u540c\u6b65</code> \u8def\u7531\uff0c\u5e76\u4e14\u963b\u585e I/O \u64cd\u4f5c\u4e0d\u4f1a\u963b\u6b62 \u4e8b\u4ef6\u5faa\u73af \u6267\u884c\u4efb\u52a1\u3002</li> <li>\u5982\u679c\u8def\u7531\u5b9a\u4e49\u4e3a <code>\u5f02\u6b65</code>\uff0c\u5219\u901a\u8fc7 <code>await</code> \u6b63\u5e38\u8c03\u7528\uff0cFastAPI \u76f8\u4fe1\u4f60\u53ea\u4f1a\u6267\u884c\u975e\u963b\u585e I/O \u64cd\u4f5c\u3002</li> </ul> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4f60\u8fdd\u80cc\u4e86\u8fd9\u79cd\u4fe1\u4efb\uff0c\u5728\u5f02\u6b65\u8def\u7531\u4e2d\u6267\u884c\u963b\u585e\u64cd\u4f5c\uff0c\u4e8b\u4ef6\u5faa\u73af\u5c06\u65e0\u6cd5\u5728\u963b\u585e\u64cd\u4f5c\u5b8c\u6210\u4e4b\u524d\u8fd0\u884c\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</p> <pre><code>import asyncio\nimport time\n\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/terrible-ping\")\nasync def terrible_ping():\n    time.sleep(10)  # 10\u79d2\u7684 I/O \u963b\u585e\u64cd\u4f5c\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5c06\u88ab\u963b\u585e\n\n    return {\"pong\": True}\n\n@router.get(\"/good-ping\")\ndef good_ping():\n    time.sleep(10)  # 10\u79d2\u7684 I/O \u963b\u585e\u64cd\u4f5c\uff0c\u4f46\u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u6574\u4e2a `good_ping` \u8def\u7531\n\n    return {\"pong\": True}\n\n@router.get(\"/perfect-ping\")\nasync def perfect_ping():\n    await asyncio.sleep(10)  # \u975e\u963b\u585e I/O \u64cd\u4f5c\n\n    return {\"pong\": True}\n</code></pre> <p>\u5f53\u6211\u4eec\u8c03\u7528\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a</p> <ol> <li> <p><code>GET /terrible-ping</code></p> </li> <li> <p>FastAPI \u670d\u52a1\u5668\u63a5\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</p> </li> <li> <p>\u670d\u52a1\u5668\u7684\u4e8b\u4ef6\u5faa\u73af\u548c\u961f\u5217\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u5c06\u7b49\u5f85 <code>time.sleep()</code> \u5b8c\u6210</p> <ol> <li>\u670d\u52a1\u5668\u8ba4\u4e3a <code>time.sleep()</code> \u4e0d\u662f\u4e00\u4e2a I/O \u4efb\u52a1\uff0c\u6240\u4ee5\u5b83\u7b49\u5f85\u76f4\u5230\u5b83\u5b8c\u6210</li> <li>\u670d\u52a1\u5668\u5728\u7b49\u5f85\u65f6\u4e0d\u4f1a\u63a5\u53d7\u4efb\u4f55\u65b0\u8bf7\u6c42</li> </ol> </li> <li> <p>\u670d\u52a1\u5668\u8fd4\u56de\u54cd\u5e94\u3002 </p> <ol> <li>\u54cd\u5e94\u540e\uff0c\u670d\u52a1\u5668\u5f00\u59cb\u63a5\u53d7\u65b0\u8bf7\u6c42</li> </ol> </li> <li> <p><code>GET /good-ping</code></p> </li> <li> <p>FastAPI \u670d\u52a1\u5668\u63a5\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</p> </li> <li>FastAPI \u5c06\u6574\u4e2a\u8def\u7531 <code>good_ping</code> \u53d1\u9001\u5230\u7ebf\u7a0b\u6c60\uff0c\u5de5\u4f5c\u7ebf\u7a0b\u5c06\u8fd0\u884c\u8be5\u51fd\u6570</li> <li> <p>\u867d\u7136 <code>good_ping</code> \u6b63\u5728\u6267\u884c\uff0c\u4e8b\u4ef6\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u5e76\u5904\u7406\u5b83\u4eec\uff08\u4f8b\u5982\u63a5\u53d7\u65b0\u8bf7\u6c42\uff0c\u8c03\u7528\u6570\u636e\u5e93\uff09</p> <ul> <li>\u72ec\u7acb\u4e8e\u4e3b\u7ebf\u7a0b\uff08\u5373\u6211\u4eec\u7684 FastAPI \u5e94\u7528\uff09\uff0c     \u5de5\u4f5c\u7ebf\u7a0b\u5c06\u7b49\u5f85 <code>time.sleep</code> \u5b8c\u6210\u3002</li> <li>\u540c\u6b65\u64cd\u4f5c\u4ec5\u963b\u585e\u8f85\u52a9\u7ebf\u7a0b\uff0c\u800c\u4e0d\u662f\u4e3b\u7ebf\u7a0b\u3002</li> </ul> </li> <li> <p>\u5f53 <code>good_ping</code> \u5b8c\u6210\u5de5\u4f5c\u65f6\uff0c\u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u54cd\u5e94</p> </li> <li> <p><code>GET /perfect-ping</code></p> </li> <li> <p>FastAPI \u670d\u52a1\u5668\u63a5\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</p> </li> <li>FastAPI \u7b49\u5f85 <code>asyncio.sleep(10)</code></li> <li>\u4e8b\u4ef6\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u5e76\u5904\u7406\u5b83\u4eec\uff08\u4f8b\u5982\u63a5\u53d7\u65b0\u8bf7\u6c42\uff0c\u8c03\u7528\u6570\u636e\u5e93\uff09</li> <li>\u5f53 <code>asyncio.sleep(10)</code> \u5b8c\u6210\u540e\uff0c\u670d\u52a1\u5668\u5b8c\u6210\u8def\u7531\u7684\u6267\u884c\u5e76\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u54cd\u5e94</li> </ol> <p>[!WARNING] \u5173\u4e8e\u7ebf\u7a0b\u6c60\u7684\u6ce8\u610f\u4e8b\u9879\uff1a - \u7ebf\u7a0b\u6bd4\u534f\u7a0b\u9700\u8981\u66f4\u591a\u8d44\u6e90\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0d\u50cf\u5f02\u6b65 I/O \u64cd\u4f5c\u90a3\u6837\u4fbf\u5b9c\u3002 - \u7ebf\u7a0b\u6c60\u7684\u7ebf\u7a0b\u6570\u91cf\u6709\u9650\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u53ef\u80fd\u4f1a\u7528\u5b8c\u7ebf\u7a0b\uff0c\u4f60\u7684\u5e94\u7528\u5c06\u53d8\u6162\u3002\u9605\u8bfb\u66f4\u591a  (\u5916\u90e8\u94fe\u63a5)</p> <p>Under the hood, FastAPI can effectively handle both async and sync I/O operations. </p> <ul> <li>FastAPI runs <code>sync</code> routes in the threadpool  and blocking I/O operations won't stop the event loop  from executing the tasks. </li> <li>If the route is defined <code>async</code> then it's called regularly via <code>await</code>  and FastAPI trusts you to do only non-blocking I/O operations.</li> </ul> <p>The caveat is if you fail that trust and execute blocking operations within async routes,  the event loop will not be able to run the next tasks until that blocking operation is done.</p> <pre><code>import asyncio\nimport time\n\nfrom fastapi import APIRouter\n\n\nrouter = APIRouter()\n\n\n@router.get(\"/terrible-ping\")\nasync def terrible_ping():\n    time.sleep(10) # I/O blocking operation for 10 seconds, the whole process will be blocked\n\n    return {\"pong\": True}\n\n@router.get(\"/good-ping\")\ndef good_ping():\n    time.sleep(10) # I/O blocking operation for 10 seconds, but in a separate thread for the whole `good_ping` route\n\n    return {\"pong\": True}\n\n@router.get(\"/perfect-ping\")\nasync def perfect_ping():\n    await asyncio.sleep(10) # non-blocking I/O operation\n\n    return {\"pong\": True}\n</code></pre> <p>What happens when we call:</p> <ol> <li> <p><code>GET /terrible-ping</code></p> </li> <li> <p>FastAPI server receives a request and starts handling it </p> </li> <li> <p>Server's event loop and all the tasks in the queue will be waiting until <code>time.sleep()</code> is finished</p> <ol> <li>Server thinks <code>time.sleep()</code> is not an I/O task, so it waits until it is finished</li> <li>Server won't accept any new requests while waiting</li> </ol> </li> <li> <p>Server returns the response. </p> <ol> <li>After a response, server starts accepting new requests</li> </ol> </li> <li> <p><code>GET /good-ping</code></p> </li> <li> <p>FastAPI server receives a request and starts handling it</p> </li> <li>FastAPI sends the whole route <code>good_ping</code> to the threadpool, where a worker thread will run the function</li> <li> <p>While <code>good_ping</code> is being executed, event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)</p> <ul> <li>Independently of main thread (i.e. our FastAPI app),      worker thread will be waiting for <code>time.sleep</code> to finish.</li> <li>Sync operation blocks only the side thread, not the main one.</li> </ul> </li> <li> <p>When <code>good_ping</code> finishes its work, server returns a response to the client</p> </li> <li> <p><code>GET /perfect-ping</code></p> </li> <li> <p>FastAPI server receives a request and starts handling it</p> </li> <li>FastAPI awaits <code>asyncio.sleep(10)</code></li> <li>Event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)</li> <li>When <code>asyncio.sleep(10)</code> is done, servers finishes the execution of the route and returns a response to the client</li> </ol> <p>[!WARNING] Notes on the thread pool: - Threads require more resources than coroutines, so they are not as cheap as async I/O operations. - Thread pool has a limited number of threads, i.e. you might run out of threads and your app will become slow. Read more (external link)</p>"},{"location":"fastapi/v2/#cpu-\u5bc6\u96c6\u578b\u4efb\u52a1","title":"CPU \u5bc6\u96c6\u578b\u4efb\u52a1","text":"<p>CPU Intensive Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>\u7b2c\u4e8c\u4e2a\u6ce8\u610f\u4e8b\u9879\u662f\uff0c\u975e\u963b\u585e\u7684 awaitable \u64cd\u4f5c\u6216\u53d1\u9001\u5230\u7ebf\u7a0b\u6c60\u7684\u64cd\u4f5c\u5fc5\u987b\u662f I/O \u5bc6\u96c6\u578b\u4efb\u52a1\uff08\u4f8b\u5982\u6253\u5f00\u6587\u4ef6\u3001\u6570\u636e\u5e93\u8c03\u7528\u3001\u5916\u90e8 API \u8c03\u7528\uff09\u3002</p> <ul> <li>\u7b49\u5f85 CPU \u5bc6\u96c6\u578b\u4efb\u52a1\uff08\u4f8b\u5982\u7e41\u91cd\u7684\u8ba1\u7b97\u3001\u6570\u636e\u5904\u7406\u3001\u89c6\u9891\u8f6c\u7801\uff09\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a CPU \u5fc5\u987b\u5de5\u4f5c\u4ee5\u5b8c\u6210\u4efb\u52a1\uff0c\u800c I/O \u64cd\u4f5c\u662f\u5916\u90e8\u7684\uff0c\u670d\u52a1\u5668\u5728\u7b49\u5f85\u8fd9\u4e9b\u64cd\u4f5c\u5b8c\u6210\u65f6\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> <li>\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u8fd0\u884c CPU \u5bc6\u96c6\u578b\u4efb\u52a1\u4e5f\u662f\u65e0\u6548\u7684\uff0c\u56e0\u4e3a GIL \u7684\u5b58\u5728\u3002\u7b80\u800c\u8a00\u4e4b\uff0cGIL \u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u4e00\u6b21\u5de5\u4f5c\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5bf9 CPU \u4efb\u52a1\u6beb\u65e0\u7528\u5904\u3002</li> <li>\u5982\u679c\u4f60\u60f3\u8981\u4f18\u5316 CPU \u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u4f60\u5e94\u8be5\u5c06\u5b83\u4eec\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u5de5\u4f5c\u5668\u3002</li> </ul> <p>\u76f8\u5173 StackOverflow \u4e0a\u56f0\u60d1\u7528\u6237\u7684\u63d0\u95ee</p> <ol> <li> <p>Flask \u4e0e FastAPI \u7684\u67b6\u6784\u5bf9\u6bd4 </p> <ul> <li>\u5728\u8fd9\u91cc\uff0c\u4f60\u4e5f\u53ef\u4ee5\u67e5\u770b\u6211\u7684\u56de\u7b54 </li> </ul> </li> <li> <p>FastAPI UploadFile \u6bd4 Flask \u6162</p> </li> <li>FastAPI \u8fd0\u884c API \u8c03\u7528\u662f\u4e32\u884c\u800c\u4e0d\u662f\u5e76\u884c</li> </ol> <p>The second caveat is that operations that are non-blocking awaitables or are sent to the thread pool must be I/O intensive tasks (e.g. open file, db call, external API call).</p> <ul> <li>Awaiting CPU-intensive tasks (e.g. heavy calculations, data processing, video transcoding) is worthless since the CPU has to work to finish the tasks,  while I/O operations are external and server does nothing while waiting for that operations to finish, thus it can go to the next tasks.</li> <li>Running CPU-intensive tasks in other threads also isn't effective, because of GIL.  In short, GIL allows only one thread to work at a time, which makes it useless for CPU tasks. </li> <li>If you want to optimize CPU intensive tasks you should send them to workers in another process.</li> </ul> <p>Related StackOverflow questions of confused users</p> <ol> <li> <p>https://stackoverflow.com/questions/62976648/architecture-flask-vs-fastapi/70309597#70309597</p> <ul> <li>Here you can also check my answer</li> </ul> </li> <li> <p>https://stackoverflow.com/questions/65342833/fastapi-uploadfile-is-slow-compared-to-flask</p> </li> <li>https://stackoverflow.com/questions/71516140/fastapi-runs-api-calls-in-serial-instead-of-parallel-fashion</li> </ol>"},{"location":"fastapi/v2/#pydantic","title":"Pydantic","text":"<p>Pydantic</p>"},{"location":"fastapi/v2/#\u5e38\u4f7f\u7528-pydantic","title":"\u5e38\u4f7f\u7528 Pydantic","text":"<p>Excessively use Pydantic</p> \u4e2d\u6587\u82f1\u6587 <p>Pydantic \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u529f\u80fd\u6765\u9a8c\u8bc1\u548c\u8f6c\u6362\u6570\u636e\u3002</p> <p>\u9664\u4e86\u50cf\u5fc5\u586b\u548c\u975e\u5fc5\u586b\u5b57\u6bb5\u4ee5\u53ca\u5e26\u6709\u9ed8\u8ba4\u503c\u7684\u5e38\u89c4\u7279\u6027\u5916\uff0cPydantic \u8fd8\u5185\u7f6e\u4e86\u5168\u9762\u7684\u6570\u636e\u5904\u7406\u5de5\u5177\uff0c\u5982\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u679a\u4e3e\u3001\u5b57\u7b26\u4e32\u64cd\u4f5c\u3001\u7535\u5b50\u90ae\u4ef6\u9a8c\u8bc1\u7b49\u3002</p> <pre><code>from enum import Enum\nfrom pydantic import AnyUrl, BaseModel, EmailStr, Field\n\n\nclass MusicBand(str, Enum):\n   AEROSMITH = \"AEROSMITH\"\n   QUEEN = \"QUEEN\"\n   ACDC = \"AC/DC\"\n\n\nclass UserBase(BaseModel):\n    first_name: str = Field(min_length=1, max_length=128)\n    username: str = Field(min_length=1, max_length=128, pattern=\"^[A-Za-z0-9-_]+$\")\n    email: EmailStr\n    age: int = Field(ge=18, default=None)  # \u5fc5\u987b\u5927\u4e8e\u6216\u7b49\u4e8e 18\n    favorite_band: MusicBand | None = None  # \u53ea\u5141\u8bb8\u8f93\u5165 \"AEROSMITH\", \"QUEEN\", \"AC/DC\" \u7684\u503c\n    website: AnyUrl | None = None\n</code></pre> <p>Pydantic has a rich set of features to validate and transform data. </p> <p>In addition to regular features like required &amp; non-required fields with default values,  Pydantic has built-in comprehensive data processing tools like regex, enums, strings manipulation, emails validation, etc.</p> <pre><code>from enum import Enum\nfrom pydantic import AnyUrl, BaseModel, EmailStr, Field\n\n\nclass MusicBand(str, Enum):\n   AEROSMITH = \"AEROSMITH\"\n   QUEEN = \"QUEEN\"\n   ACDC = \"AC/DC\"\n\n\nclass UserBase(BaseModel):\n    first_name: str = Field(min_length=1, max_length=128)\n    username: str = Field(min_length=1, max_length=128, pattern=\"^[A-Za-z0-9-_]+$\")\n    email: EmailStr\n    age: int = Field(ge=18, default=None)  # must be greater or equal to 18\n    favorite_band: MusicBand | None = None  # only \"AEROSMITH\", \"QUEEN\", \"AC/DC\" values are allowed to be inputted\n    website: AnyUrl | None = None\n</code></pre>"},{"location":"fastapi/v2/#\u81ea\u5b9a\u4e49\u57fa\u7840\u6a21\u578b","title":"\u81ea\u5b9a\u4e49\u57fa\u7840\u6a21\u578b","text":"<p>Custom Base Model</p> \u4e2d\u6587\u82f1\u6587 <p>\u62e5\u6709\u4e00\u4e2a\u53ef\u63a7\u5236\u7684\u5168\u5c40\u57fa\u7840\u6a21\u578b\u5141\u8bb8\u6211\u4eec\u81ea\u5b9a\u4e49\u5e94\u7528\u4e2d\u7684\u6240\u6709\u6a21\u578b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5f3a\u5236\u6267\u884c\u6807\u51c6\u65e5\u671f\u65f6\u95f4\u683c\u5f0f\u6216\u4e3a\u6240\u6709\u57fa\u7840\u6a21\u578b\u7684\u5b50\u7c7b\u5f15\u5165\u4e00\u4e2a\u901a\u7528\u65b9\u6cd5\u3002</p> <pre><code>from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel, ConfigDict\n\n\ndef datetime_to_gmt_str(dt: datetime) -&gt; str:\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n\n\nclass CustomModel(BaseModel):\n    model_config = ConfigDict(\n        json_encoders={datetime: datetime_to_gmt_str},\n        populate_by_name=True,\n    )\n\n    def serializable_dict(self, **kwargs):\n        \"\"\"\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b\u53ef\u5e8f\u5217\u5316\u5b57\u6bb5\u7684\u5b57\u5178\u3002\"\"\"\n        default_dict = self.model_dump()\n\n        return jsonable_encoder(default_dict)\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u51b3\u5b9a\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u57fa\u7840\u6a21\u578b\uff0c\u8be5\u6a21\u578b\uff1a</p> <ul> <li>\u5c06\u6240\u6709 datetime \u5b57\u6bb5\u5e8f\u5217\u5316\u4e3a\u5e26\u6709\u660e\u786e\u65f6\u533a\u7684\u6807\u51c6\u683c\u5f0f</li> <li>\u63d0\u4f9b\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8fd4\u56de\u53ea\u5305\u542b\u53ef\u5e8f\u5217\u5316\u5b57\u6bb5\u7684\u5b57\u5178</li> </ul> <p>Having a controllable global base model allows us to customize all the models within the app. For instance, we can enforce a standard datetime format or introduce a common method for all subclasses of the base model.</p> <pre><code>from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel, ConfigDict\n\n\ndef datetime_to_gmt_str(dt: datetime) -&gt; str:\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n\n\nclass CustomModel(BaseModel):\n    model_config = ConfigDict(\n        json_encoders={datetime: datetime_to_gmt_str},\n        populate_by_name=True,\n    )\n\n    def serializable_dict(self, **kwargs):\n        \"\"\"Return a dict which contains only serializable fields.\"\"\"\n        default_dict = self.model_dump()\n\n        return jsonable_encoder(default_dict)\n</code></pre> <p>In the example above, we have decided to create a global base model that:</p> <ul> <li>Serializes all datetime fields to a standard format with an explicit timezone</li> <li>Provides a method to return a dict with only serializable fields</li> </ul>"},{"location":"fastapi/v2/#\u89e3\u8026-pydantic-basesettings","title":"\u89e3\u8026 Pydantic BaseSettings","text":"<p>Decouple Pydantic BaseSettings</p> \u4e2d\u6587\u82f1\u6587 <p><code>BaseSettings</code> \u5728\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u65b9\u9762\u662f\u4e00\u9879\u4f1f\u5927\u7684\u521b\u65b0\uff0c\u4f46\u5982\u679c\u6574\u4e2a\u5e94\u7528\u53ea\u6709\u4e00\u4e2a <code>BaseSettings</code>\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u53ef\u80fd\u4f1a\u53d8\u5f97\u6df7\u4e71\u3002\u4e3a\u4e86\u63d0\u9ad8\u53ef\u7ef4\u62a4\u6027\u548c\u7ec4\u7ec7\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 <code>BaseSettings</code> \u5206\u6563\u5230\u4e0d\u540c\u7684\u6a21\u5757\u548c\u9886\u57df\u4e2d\u3002</p> <pre><code># src.auth.config\nfrom datetime import timedelta\n\nfrom pydantic_settings import BaseSettings\n\n\nclass AuthConfig(BaseSettings):\n    JWT_ALG: str\n    JWT_SECRET: str\n    JWT_EXP: int = 5  # minutes\n\n    REFRESH_TOKEN_KEY: str\n    REFRESH_TOKEN_EXP: timedelta = timedelta(days=30)\n\n    SECURE_COOKIES: bool = True\n\n\nauth_settings = AuthConfig()\n\n\n# src.config\nfrom pydantic import PostgresDsn, RedisDsn, model_validator\nfrom pydantic_settings import BaseSettings\n\nfrom src.constants import Environment\n\n\nclass Config(BaseSettings):\n    DATABASE_URL: PostgresDsn\n    REDIS_URL: RedisDsn\n\n    SITE_DOMAIN: str = \"myapp.com\"\n\n    ENVIRONMENT: Environment = Environment.PRODUCTION\n\n    SENTRY_DSN: str | None = None\n\n    CORS_ORIGINS: list[str]\n    CORS_ORIGINS_REGEX: str | None = None\n    CORS_HEADERS: list[str]\n\n    APP_VERSION: str = \"1.0\"\n\n\nsettings = Config()\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e24\u4e2a\u4e0d\u540c\u7684\u914d\u7f6e\u7c7b\uff1a</p> <ul> <li><code>AuthConfig</code> \u7528\u4e8e\u8ba4\u8bc1\u6a21\u5757\uff0c\u5305\u542b\u4e86\u4e0e JWT \u548c\u5237\u65b0\u4ee4\u724c\u76f8\u5173\u7684\u8bbe\u7f6e\u3002</li> <li><code>Config</code> \u7528\u4e8e\u6574\u4e2a\u5e94\u7528\uff0c\u5305\u542b\u4e86\u6570\u636e\u5e93\u3001\u7f13\u5b58\u3001\u73af\u5883\u3001CORS \u548c\u7248\u672c\u7b49\u914d\u7f6e\u3002</li> </ul> <p>\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u81ea\u5df1\u7684\u914d\u7f6e\u7c7b\uff0c\u4f7f\u5f97\u914d\u7f6e\u7684\u7ba1\u7406\u66f4\u52a0\u6a21\u5757\u5316\u548c\u6e05\u6670\u3002\u540c\u65f6\uff0c\u6bcf\u4e2a\u914d\u7f6e\u7c7b\u90fd\u53ef\u4ee5\u72ec\u7acb\u5730\u52a0\u8f7d\u548c\u9a8c\u8bc1\u5176\u73af\u5883\u53d8\u91cf\uff0c\u6709\u52a9\u4e8e\u4fdd\u6301\u4ee3\u7801\u7684\u6574\u6d01\u548c\u53ef\u7ef4\u62a4\u6027\u3002</p> <p>BaseSettings was a great innovation for reading environment variables, but having a single BaseSettings for the whole app can become messy over time. To improve maintainability and organization, we have split the BaseSettings across different modules and domains.</p> <pre><code># src.auth.config\nfrom datetime import timedelta\n\nfrom pydantic_settings import BaseSettings\n\n\nclass AuthConfig(BaseSettings):\n    JWT_ALG: str\n    JWT_SECRET: str\n    JWT_EXP: int = 5  # minutes\n\n    REFRESH_TOKEN_KEY: str\n    REFRESH_TOKEN_EXP: timedelta = timedelta(days=30)\n\n    SECURE_COOKIES: bool = True\n\n\nauth_settings = AuthConfig()\n\n\n# src.config\nfrom pydantic import PostgresDsn, RedisDsn, model_validator\nfrom pydantic_settings import BaseSettings\n\nfrom src.constants import Environment\n\n\nclass Config(BaseSettings):\n    DATABASE_URL: PostgresDsn\n    REDIS_URL: RedisDsn\n\n    SITE_DOMAIN: str = \"myapp.com\"\n\n    ENVIRONMENT: Environment = Environment.PRODUCTION\n\n    SENTRY_DSN: str | None = None\n\n    CORS_ORIGINS: list[str]\n    CORS_ORIGINS_REGEX: str | None = None\n    CORS_HEADERS: list[str]\n\n    APP_VERSION: str = \"1.0\"\n\n\nsettings = Config()\n</code></pre>"},{"location":"fastapi/v2/#\u4f9d\u8d56","title":"\u4f9d\u8d56","text":"<p>Dependencies</p>"},{"location":"fastapi/v2/#\u8d85\u8d8a\u4f9d\u8d56\u6ce8\u5165","title":"\u8d85\u8d8a\u4f9d\u8d56\u6ce8\u5165","text":"<p>Beyond Dependency Injection</p> \u4e2d\u6587\u82f1\u6587 <p>Pydantic \u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u6a21\u5f0f\u9a8c\u8bc1\u5668\uff0c\u4f46\u5bf9\u4e8e\u6d89\u53ca\u8c03\u7528\u6570\u636e\u5e93\u6216\u5916\u90e8\u670d\u52a1\u7684\u590d\u6742\u9a8c\u8bc1\u6765\u8bf4\uff0c\u5b83\u662f\u4e0d\u591f\u7684\u3002</p> <p>FastAPI \u6587\u6863\u4e3b\u8981\u5c06\u4f9d\u8d56\u9879\u5448\u73b0\u4e3a\u7aef\u70b9\u7684 DI\uff08\u4f9d\u8d56\u6ce8\u5165\uff09\uff0c\u4f46\u5b83\u4eec\u4e5f\u975e\u5e38\u9002\u5408\u8bf7\u6c42\u9a8c\u8bc1\u3002</p> <p>\u4f9d\u8d56\u9879\u53ef\u4ee5\u7528\u6765\u6839\u636e\u6570\u636e\u5e93\u7ea6\u675f\u9a8c\u8bc1\u6570\u636e\uff08\u4f8b\u5982\uff0c\u68c0\u67e5\u7535\u5b50\u90ae\u4ef6\u662f\u5426\u5df2\u5b58\u5728\uff0c\u786e\u4fdd\u627e\u5230\u4e86\u7528\u6237\u7b49\uff09\u3002</p> <pre><code># dependencies.py\nasync def valid_post_id(post_id: UUID4) -&gt; dict[str, Any]:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n\n    return post\n\n\n# router.py\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post_by_id(post: dict[str, Any] = Depends(valid_post_id)):\n    return post\n\n\n@router.put(\"/posts/{post_id}\", response_model=PostResponse)\nasync def update_post(\n    update_data: PostUpdate,  \n    post: dict[str, Any] = Depends(valid_post_id), \n):\n    updated_post = await service.update(id=post[\"id\"], data=update_data)\n    return updated_post\n\n\n@router.get(\"/posts/{post_id}/reviews\", response_model=list[ReviewsResponse])\nasync def get_post_reviews(post: dict[str, Any] = Depends(valid_post_id)):\n    post_reviews = await reviews_service.get_by_post_id(post[\"id\"])\n    return post_reviews\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u6ca1\u6709\u5c06\u6570\u636e\u9a8c\u8bc1\u653e\u5728\u4f9d\u8d56\u9879\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u4e3a\u6bcf\u4e2a\u7aef\u70b9\u9a8c\u8bc1 <code>post_id</code> \u7684\u5b58\u5728\uff0c\u5e76\u4e3a\u5b83\u4eec\u6bcf\u4e2a\u7f16\u5199\u76f8\u540c\u7684\u6d4b\u8bd5\u3002\u901a\u8fc7\u5c06\u9a8c\u8bc1\u903b\u8f91\u653e\u5728\u4f9d\u8d56\u9879\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u907f\u514d\u5728\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u51fd\u6570\u4e2d\u91cd\u590d\u76f8\u540c\u7684\u9a8c\u8bc1\u4ee3\u7801\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4e00\u4e2a\u5730\u65b9\u96c6\u4e2d\u5904\u7406\u9519\u8bef\uff0c\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u5e72\u51c0\u3001\u6613\u4e8e\u7ef4\u62a4\uff0c\u5e76\u4e14\u53ef\u4ee5\u91cd\u7528\u9a8c\u8bc1\u903b\u8f91\u3002</p> <p>\u6b64\u5916\uff0c\u4f9d\u8d56\u9879\u8fd8\u53ef\u4ee5\u7528\u4e8e\u6267\u884c\u8de8\u591a\u4e2a\u7aef\u70b9\u7684\u5171\u4eab\u903b\u8f91\uff0c\u4f8b\u5982\u8eab\u4efd\u9a8c\u8bc1\u3001\u6388\u6743\u3001\u65e5\u5fd7\u8bb0\u5f55\u7b49\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u7ecf\u8fc7\u5fc5\u8981\u7684\u9884\u5904\u7406\u6b65\u9aa4\uff0c\u540c\u65f6\u4fdd\u6301\u7aef\u70b9\u51fd\u6570\u7684\u7b80\u6d01\u548c\u4e13\u6ce8\u3002</p> <p>Pydantic is a great schema validator, but for complex validations that involve calling a database or external services, it is not sufficient.</p> <p>FastAPI documentation mostly presents dependencies as DI for endpoints, but they are also excellent for request validation.</p> <p>Dependencies can be used to validate data against database constraints (e.g., checking if an email already exists, ensuring a user is found, etc.).</p> <pre><code># dependencies.py\nasync def valid_post_id(post_id: UUID4) -&gt; dict[str, Any]:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\n# router.py\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post_by_id(post: dict[str, Any] = Depends(valid_post_id)):\n    return post\n\n\n@router.put(\"/posts/{post_id}\", response_model=PostResponse)\nasync def update_post(\n    update_data: PostUpdate,  \n    post: dict[str, Any] = Depends(valid_post_id), \n):\n    updated_post = await service.update(id=post[\"id\"], data=update_data)\n    return updated_post\n\n\n@router.get(\"/posts/{post_id}/reviews\", response_model=list[ReviewsResponse])\nasync def get_post_reviews(post: dict[str, Any] = Depends(valid_post_id)):\n    post_reviews = await reviews_service.get_by_post_id(post[\"id\"])\n    return post_reviews\n</code></pre> <p>If we didn't put data validation to dependency, we would have to validate <code>post_id</code> exists for every endpoint and write the same tests for each of them. </p>"},{"location":"fastapi/v2/#\u4f9d\u8d56\u94fe","title":"\u4f9d\u8d56\u94fe","text":"<p>Chain Dependencies</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f9d\u8d56\u9879\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u4f9d\u8d56\u9879\uff0c\u907f\u514d\u5bf9\u7c7b\u4f3c\u903b\u8f91\u7684\u4ee3\u7801\u91cd\u590d\u3002</p> <pre><code># dependencies.py\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; dict[str, Any]:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict[str, Any]:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n\n    return {\"user_id\": payload[\"sub\"]}\n\n\nasync def valid_owned_post(\n    post: dict[str, Any] = Depends(valid_post_id), \n    token_data: dict[str, Any] = Depends(parse_jwt_data),\n) -&gt; dict[str, Any]:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise HTTPException(status_code=403, detail=\"User is not the owner of the post\")\n\n    return post\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(post: dict[str, Any] = Depends(valid_owned_post)):\n    return post\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e09\u4e2a\u4f9d\u8d56\u9879\uff1a</p> <ol> <li><code>valid_post_id</code> \u7528\u4e8e\u9a8c\u8bc1\u5e16\u5b50 ID \u662f\u5426\u5b58\u5728\u3002</li> <li><code>parse_jwt_data</code> \u7528\u4e8e\u89e3\u6790 JWT \u4ee4\u724c\u5e76\u83b7\u53d6\u7528\u6237 ID\u3002</li> <li><code>valid_owned_post</code> \u7528\u4e8e\u9a8c\u8bc1\u5f53\u524d\u5e16\u5b50\u662f\u5426\u5c5e\u4e8e\u5f53\u524d\u7528\u6237\u3002</li> </ol> <p>\u901a\u8fc7\u5c06 <code>valid_post_id</code> \u548c <code>parse_jwt_data</code> \u4f5c\u4e3a <code>valid_owned_post</code> \u7684\u4f9d\u8d56\u9879\uff0c\u6211\u4eec\u907f\u514d\u4e86\u5728\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u51fd\u6570\u4e2d\u91cd\u590d\u76f8\u540c\u7684\u9a8c\u8bc1\u903b\u8f91\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u4e2a\u5730\u65b9\u96c6\u4e2d\u5904\u7406\u9519\u8bef\uff0c\u5e76\u786e\u4fdd\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u7ecf\u8fc7\u5fc5\u8981\u7684\u9884\u5904\u7406\u6b65\u9aa4\u3002</p> <p>\u6b64\u5916\uff0c\u8fd9\u79cd\u4f9d\u8d56\u9879\u7684\u7ec4\u5408\u65b9\u5f0f\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u6a21\u5757\u5316\u548c\u53ef\u91cd\u7528\uff0c\u540c\u65f6\u4e5f\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002</p> <p>Dependencies can use other dependencies and avoid code repetition for the similar logic.</p> <pre><code># dependencies.py\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; dict[str, Any]:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict[str, Any]:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: dict[str, Any] = Depends(valid_post_id), \n    token_data: dict[str, Any] = Depends(parse_jwt_data),\n) -&gt; dict[str, Any]:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(post: dict[str, Any] = Depends(valid_owned_post)):\n    return post\n</code></pre>"},{"location":"fastapi/v2/#\u89e3\u8026\u5e76\u91cd\u7528\u4f9d\u8d56\u9879\u4f9d\u8d56\u9879\u8c03\u7528\u88ab\u7f13\u5b58","title":"\u89e3\u8026\u5e76\u91cd\u7528\u4f9d\u8d56\u9879\u3002\u4f9d\u8d56\u9879\u8c03\u7528\u88ab\u7f13\u5b58","text":"<p>Decouple &amp; Reuse dependencies. Dependency calls are cached</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f9d\u8d56\u9879\u53ef\u4ee5\u591a\u6b21\u91cd\u7528\uff0c\u5e76\u4e14\u5b83\u4eec\u4e0d\u4f1a\u88ab\u91cd\u65b0\u8ba1\u7b97 - FastAPI \u9ed8\u8ba4\u4f1a\u5728\u8bf7\u6c42\u8303\u56f4\u5185\u7f13\u5b58\u4f9d\u8d56\u9879\u7684\u7ed3\u679c\uff0c\u5373\u5982\u679c <code>valid_post_id</code> \u5728\u4e00\u4e2a\u8def\u7531\u4e2d\u88ab\u591a\u6b21\u8c03\u7528\uff0c\u5b83\u53ea\u4f1a\u88ab\u8c03\u7528\u4e00\u6b21\u3002</p> <p>\u4e86\u89e3\u8fd9\u4e00\u70b9\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4f9d\u8d56\u9879\u5206\u89e3\u6210\u591a\u4e2a\u66f4\u5c0f\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u8f83\u5c0f\u7684\u9886\u57df\u5185\u64cd\u4f5c\uff0c\u5e76\u4e14\u66f4\u5bb9\u6613\u5728\u5176\u4ed6\u8def\u7531\u4e2d\u91cd\u7528\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4e09\u6b21\u4f7f\u7528\u4e86 <code>parse_jwt_data</code>\uff1a</p> <ol> <li><code>valid_owned_post</code></li> <li><code>valid_active_creator</code></li> <li><code>get_user_post</code></li> </ol> <p>\u4f46 <code>parse_jwt_data</code> \u53ea\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u88ab\u8c03\u7528\u4e00\u6b21\u3002</p> <pre><code># dependencies.py\nfrom fastapi import BackgroundTasks, HTTPException\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\nfrom pydantic import Mapping\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n    return {\"user_id\": payload[\"sub\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise HTTPException(status_code=403, detail=\"User is not the owner of the post\")\n    return post\n\n\nasync def valid_active_creator(\n    token_data: dict = Depends(parse_jwt_data),\n):\n    user = await users_service.get_by_id(token_data[\"user_id\"])\n    if not user[\"is_active\"]:\n        raise HTTPException(status_code=403, detail=\"User is banned\")\n    if not user[\"is_creator\"]:\n       raise HTTPException(status_code=403, detail=\"User is not a creator\")\n    return user\n\n\n# router.py\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(\n    worker: BackgroundTasks,\n    post: Mapping = Depends(valid_owned_post),\n    user: Mapping = Depends(valid_active_creator),\n):\n    \"\"\"Get post that belongs to the active user.\"\"\"\n    worker.add_task(notifications_service.send_email, user[\"id\"])\n    return post\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>parse_jwt_data</code> \u4f9d\u8d56\u9879\u88ab\u591a\u4e2a\u5176\u4ed6\u4f9d\u8d56\u9879\u91cd\u7528\uff0c\u4f46\u7531\u4e8e FastAPI \u7684\u4f9d\u8d56\u9879\u7f13\u5b58\u673a\u5236\uff0c\u5b83\u53ea\u4f1a\u5728\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u5185\u88ab\u8c03\u7528\u4e00\u6b21\u3002\u8fd9\u6837\u53ef\u4ee5\u63d0\u9ad8\u5e94\u7528\u7684\u6027\u80fd\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u5bf9\u76f8\u540c\u7684\u6570\u636e\u8fdb\u884c\u91cd\u590d\u7684\u89e3\u6790\u548c\u9a8c\u8bc1\u3002</p> <p>\u6b64\u5916\uff0c\u4f7f\u7528 <code>BackgroundTasks</code> \u53ef\u4ee5\u5728\u540e\u53f0\u6267\u884c\u4efb\u52a1\uff0c\u6bd4\u5982\u53d1\u9001\u901a\u77e5\u90ae\u4ef6\uff0c\u800c\u4e0d\u963b\u585e\u4e3b\u8bf7\u6c42\u7684\u54cd\u5e94\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u727a\u7272\u7528\u6237\u4f53\u9a8c\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u5fc5\u8981\u7684\u540e\u53f0\u5904\u7406\u3002</p> <p>Dependencies can be reused multiple times, and they won't be recalculated - FastAPI caches dependency's result within a request's scope by default, i.e. if <code>valid_post_id</code> gets called multiple times in one route, it will be called only once.</p> <p>Knowing this, we can decouple dependencies onto multiple smaller functions that operate on a smaller domain and are easier to reuse in other routes. For example, in the code below we are using <code>parse_jwt_data</code> three times:</p> <ol> <li><code>valid_owned_post</code></li> <li><code>valid_active_creator</code></li> <li><code>get_user_post</code>,</li> </ol> <p>but <code>parse_jwt_data</code> is called only once, in the very first call.</p> <pre><code># dependencies.py\nfrom fastapi import BackgroundTasks\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n\nasync def valid_active_creator(\n    token_data: dict = Depends(parse_jwt_data),\n):\n    user = await users_service.get_by_id(token_data[\"user_id\"])\n    if not user[\"is_active\"]:\n        raise UserIsBanned()\n\n    if not user[\"is_creator\"]:\n       raise UserNotCreator()\n\n    return user\n\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(\n    worker: BackgroundTasks,\n    post: Mapping = Depends(valid_owned_post),\n    user: Mapping = Depends(valid_active_creator),\n):\n    \"\"\"Get post that belong the active user.\"\"\"\n    worker.add_task(notifications_service.send_email, user[\"id\"])\n    return post\n</code></pre>"},{"location":"fastapi/v2/#\u9996\u9009\u5f02\u6b65\u4f9d\u8d56","title":"\u9996\u9009\u5f02\u6b65\u4f9d\u8d56","text":"<p>Prefer async dependencies</p> \u4e2d\u6587\u82f1\u6587 <p>FastAPI \u652f\u6301 <code>sync</code>\uff08\u540c\u6b65\uff09\u548c <code>async</code>\uff08\u5f02\u6b65\uff09\u4f9d\u8d56\u9879\uff0c\u5f53\u4f60\u4e0d\u9700\u8981\u7b49\u5f85\u4efb\u4f55\u5f02\u6b65\u64cd\u4f5c\u65f6\uff0c\u4f7f\u7528\u540c\u6b65\u4f9d\u8d56\u9879\u53ef\u80fd\u5f88\u8bf1\u4eba\uff0c\u4f46\u90a3\u53ef\u80fd\u5e76\u4e0d\u662f\u6700\u4f73\u9009\u62e9\u3002</p> <p>\u5c31\u50cf\u8def\u7531\u5904\u7406\u51fd\u6570\u4e00\u6837\uff0c\u540c\u6b65\u4f9d\u8d56\u9879\u4f1a\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c\u3002\u8fd9\u91cc\u7684\u7ebf\u7a0b\u4e5f\u5e26\u6765\u4e86\u4ee3\u4ef7\u548c\u9650\u5236\uff0c\u5982\u679c\u4f60\u53ea\u662f\u8fdb\u884c\u4e00\u4e9b\u5c0f\u7684\u975e I/O \u64cd\u4f5c\uff0c\u90a3\u4e48\u4f7f\u7528\u7ebf\u7a0b\u53ef\u80fd\u662f\u591a\u4f59\u7684\u3002</p> <p>\u53c2\u8003\u66f4\u591a (external link)</p> <p>\u5bf9\u4e8e\u4e0d\u9700\u8981\u8fdb\u884c I/O \u64cd\u4f5c\u6216\u4e0d\u9700\u8981\u7b49\u5f85\u7684\u4f9d\u8d56\u9879\uff0c\u6700\u597d\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u7ebf\u7a0b\u6c60\u7684\u5f00\u9500\uff0c\u5e76\u4e14\u5141\u8bb8\u4f60\u7684\u5e94\u7528\u5728\u5904\u7406\u8bf7\u6c42\u65f6\u66f4\u52a0\u9ad8\u6548\u3002\u5373\u4f7f\u51fd\u6570\u4f53\u5185\u90e8\u6ca1\u6709\u4efb\u4f55 <code>await</code> \u8bed\u53e5\uff0c\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570\u4e5f\u662f\u6709\u76ca\u7684\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u5176\u4ed6\u8bf7\u6c42\u5728\u7b49\u5f85\u65f6\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u3002</p> <p>\u5982\u679c\u4f60\u7684\u4f9d\u8d56\u9879\u53ea\u662f\u8fdb\u884c\u4e00\u4e9b\u5feb\u901f\u7684\u8ba1\u7b97\u6216\u8005\u5904\u7406\uff0c\u5e76\u4e14\u4e0d\u6d89\u53ca I/O \u64cd\u4f5c\uff0c\u90a3\u4e48\u5c06\u5176\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570\uff0c\u7136\u540e\u5728\u5185\u90e8\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9 FastAPI \u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u800c\u4e0d\u662f\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\u8fd9\u4e9b\u4f9d\u8d56\u9879\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u4f7f\u7528\u5f02\u6b65\u4f9d\u8d56\u9879\uff0c\u5373\u4f7f\u5b83\u4e0d\u5305\u542b\u4efb\u4f55 await \u8bed\u53e5\nasync def some_quick_calculation() -&gt; int:\n    # \u5feb\u901f\u8ba1\u7b97\n    result = 42\n    return result\n\n# \u5728\u8def\u7531\u4e2d\u4f7f\u7528\n@router.get(\"/example\")\nasync def example(quick_result: int = Depends(some_quick_calculation)):\n    return {\"result\": quick_result}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>some_quick_calculation</code> \u51fd\u6570\u662f\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570\uff0c\u5373\u4f7f\u5b83\u6ca1\u6709 <code>await</code> \u4efb\u4f55\u4e1c\u897f\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5f53\u5b83\u88ab\u7528\u4f5c\u4f9d\u8d56\u9879\u65f6\uff0cFastAPI \u4f1a\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u800c\u4e0d\u662f\u7ebf\u7a0b\u6c60\u4e2d\u8c03\u7528\u5b83\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u6027\u80fd\u3002</p> <p>\u5982\u679c\u4f60\u5c1d\u8bd5\u8bbf\u95ee\u63d0\u4f9b\u7684\u94fe\u63a5\u5e76\u4e14\u9047\u5230\u4e86\u95ee\u9898\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u7f51\u7edc\u95ee\u9898\u6216\u8005\u94fe\u63a5\u672c\u8eab\u7684\u95ee\u9898\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u68c0\u67e5\u94fe\u63a5\u662f\u5426\u6b63\u786e\uff0c\u6216\u8005\u7a0d\u540e\u518d\u8bd5\u3002\u5982\u679c\u4f60\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u5e2e\u52a9\uff0c\u8bf7\u544a\u8bc9\u6211\u3002</p> <p>FastAPI supports both <code>sync</code> and <code>async</code> dependencies, and there is a temptation to use <code>sync</code> dependencies, when you don't have to await anything, but that might not be the best choice.</p> <p>Just as with routes, <code>sync</code> dependencies are run in the thread pool. And threads here also come with a price and limitations, that are redundant, if you just make a small non-I/O operation.</p> <p>See more (external link)</p>"},{"location":"fastapi/v2/#\u5176\u4ed6","title":"\u5176\u4ed6","text":"<p>Miscellaneous</p>"},{"location":"fastapi/v2/#\u9075\u5faarest\u89c4\u8303","title":"\u9075\u5faaREST\u89c4\u8303","text":"<p>Follow the REST</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u5f00\u53d1 RESTful API \u65f6\uff0c\u91cd\u7528\u4f9d\u8d56\u9879\u53ef\u4ee5\u7b80\u5316\u8def\u7531\u4e2d\u7684\u4ee3\u7801\uff0c\u5c24\u5176\u662f\u5f53\u591a\u4e2a\u8def\u7531\u9700\u8981\u8fdb\u884c\u76f8\u4f3c\u6216\u76f8\u540c\u7684\u9a8c\u8bc1\u65f6\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u786e\u4fdd\u5728\u8def\u5f84\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u53d8\u91cf\u540d\u662f\u5f88\u91cd\u8981\u7684\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e24\u4e2a\u7aef\u70b9\uff1a</p> <ol> <li><code>GET /profiles/:profile_id</code> \u9a8c\u8bc1\u7ed9\u5b9a\u7684 <code>profile_id</code> \u662f\u5426\u5b58\u5728\u3002</li> <li><code>GET /creators/:creator_id</code> \u9664\u4e86\u9a8c\u8bc1 <code>creator_id</code> \u662f\u5426\u5b58\u5728\u5916\uff0c\u8fd8\u68c0\u67e5\u8be5\u8d44\u6599\u662f\u5426\u5c5e\u4e8e\u521b\u4f5c\u8005\u3002</li> </ol> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u5c06 <code>creator_id</code> \u8def\u5f84\u53d8\u91cf\u91cd\u547d\u540d\u4e3a <code>profile_id</code> \u5e76\u94fe\u5f0f\u8c03\u7528\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u3002</p> <pre><code># src.profiles.dependencies\nfrom fastapi import HTTPException, Depends\nfrom pydantic import Mapping\nfrom uuid import UUID4\n\n# \u5047\u8bbe service.get_by_id \u662f\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570\uff0c\u7528\u4e8e\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u8d44\u6599\nasync def valid_profile_id(profile_id: UUID4) -&gt; Mapping:\n    profile = await service.get_by_id(profile_id)\n    if not profile:\n        raise HTTPException(status_code=404, detail=\"Profile not found\")\n    return profile\n\n# src.creators.dependencies\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n# \u5047\u8bbe valid_profile_id \u5df2\u7ecf\u5728\u5176\u4ed6\u5730\u65b9\u5b9a\u4e49\nasync def valid_creator_id(profile: Mapping = Depends(valid_profile_id)) -&gt; Mapping:\n    if not profile[\"is_creator\"]:\n       raise HTTPException(status_code=403, detail=\"Profile is not a creator\")\n    return profile\n\n# src.profiles.router.py\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/profiles/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(profile: Mapping = Depends(valid_profile_id)):\n    \"\"\"\u6839\u636e ID \u83b7\u53d6\u7528\u6237\u8d44\u6599.\"\"\"\n    return profile\n\n# src.creators.router.py\n@router.get(\"/creators/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(creator_profile: Mapping = Depends(valid_creator_id)):\n    \"\"\"\u6839\u636e ID \u83b7\u53d6\u521b\u4f5c\u8005\u7684\u8d44\u6599.\"\"\"\n    return creator_profile\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>valid_profile_id</code> \u4f9d\u8d56\u9879\u9996\u5148\u9a8c\u8bc1 <code>profile_id</code> \u662f\u5426\u5b58\u5728\u3002\u7136\u540e\uff0c<code>valid_creator_id</code> \u4f9d\u8d56\u9879\u4f5c\u4e3a <code>valid_profile_id</code> \u7684\u6d88\u8d39\u8005\uff0c\u8fdb\u4e00\u6b65\u68c0\u67e5\u8be5\u8d44\u6599\u662f\u5426\u5c5e\u4e8e\u521b\u4f5c\u8005\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u907f\u514d\u4e86\u4ee3\u7801\u91cd\u590d\uff0c\u5e76\u786e\u4fdd\u4e86\u9a8c\u8bc1\u903b\u8f91\u7684\u4e00\u81f4\u6027\u3002</p> <p>\u6b64\u5916\uff0c\u901a\u8fc7\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u4e0d\u540c\u7684\u8def\u7531\u4e4b\u95f4\u5171\u4eab\u9a8c\u8bc1\u903b\u8f91\uff0c\u540c\u65f6\u4e5f\u4f7f\u5f97\u5355\u5143\u6d4b\u8bd5\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u72ec\u7acb\u5730\u6d4b\u8bd5\u6bcf\u4e2a\u4f9d\u8d56\u9879\u3002</p> <p>Developing RESTful API makes it easier to reuse dependencies in routes like these:</p> <ol> <li><code>GET /courses/:course_id</code></li> <li><code>GET /courses/:course_id/chapters/:chapter_id/lessons</code></li> <li><code>GET /chapters/:chapter_id</code></li> </ol> <p>The only caveat is to use the same variable names in the path:</p> <ul> <li>If you have two endpoints <code>GET /profiles/:profile_id</code> and <code>GET /creators/:creator_id</code> that both validate whether the given <code>profile_id</code> exists,  but <code>GET /creators/:creator_id</code> also checks if the profile is creator, then it's better to rename <code>creator_id</code> path variable to <code>profile_id</code> and chain those two dependencies.</li> </ul> <pre><code># src.profiles.dependencies\nasync def valid_profile_id(profile_id: UUID4) -&gt; Mapping:\n    profile = await service.get_by_id(profile_id)\n    if not profile:\n        raise ProfileNotFound()\n\n    return profile\n\n# src.creators.dependencies\nasync def valid_creator_id(profile: Mapping = Depends(valid_profile_id)) -&gt; Mapping:\n    if not profile[\"is_creator\"]:\n       raise ProfileNotCreator()\n\n    return profile\n\n# src.profiles.router.py\n@router.get(\"/profiles/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(profile: Mapping = Depends(valid_profile_id)):\n    \"\"\"Get profile by id.\"\"\"\n    return profile\n\n# src.creators.router.py\n@router.get(\"/creators/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(\n     creator_profile: Mapping = Depends(valid_creator_id)\n):\n    \"\"\"Get creator's profile by id.\"\"\"\n    return creator_profile\n</code></pre>"},{"location":"fastapi/v2/#fastapi-\u54cd\u5e94\u5e8f\u5217\u5316","title":"FastAPI \u54cd\u5e94\u5e8f\u5217\u5316","text":"<p>FastAPI response serialization</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728 FastAPI \u4e2d\uff0c\u5373\u4f7f\u4f60\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e0e\u8def\u7531\u7684 <code>response_model</code> \u76f8\u5339\u914d\u7684 Pydantic \u5bf9\u8c61\uff0c\u8fd9\u770b\u4f3c\u53ef\u4ee5\u4f18\u5316\u6027\u80fd\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u79cd\u505a\u6cd5\u5e76\u4e0d\u4f1a\u5e26\u6765\u6027\u80fd\u4e0a\u7684\u63d0\u5347\u3002</p> <p>FastAPI \u5728\u5904\u7406\u54cd\u5e94\u65f6\u4f1a\u9075\u5faa\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u9996\u5148\uff0c\u5c06 Pydantic \u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u5178\uff0c\u4f7f\u7528\u5176 <code>jsonable_encoder</code>\u3002</li> <li>\u7136\u540e\uff0c\u4f7f\u7528\u4f60\u7684 <code>response_model</code> \u9a8c\u8bc1\u6570\u636e\u3002</li> <li>\u6700\u540e\uff0c\u5c06\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a JSON\u3002</li> </ol> <p>\u8fd9\u610f\u5473\u7740\u5373\u4f7f\u4f60\u8fd4\u56de\u4e86\u4e00\u4e2a Pydantic \u6a21\u578b\u5b9e\u4f8b\uff0cFastAPI \u4e5f\u4f1a\u6267\u884c\u989d\u5916\u7684\u6b65\u9aa4\u6765\u786e\u4fdd\u54cd\u5e94\u6570\u636e\u7b26\u5408\u5b9a\u4e49\u7684\u6a21\u578b\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801\uff1a</p> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, root_validator\n\napp = FastAPI()\n\n\nclass ProfileResponse(BaseModel):\n    @model_validator(mode=\"after\")\n    def debug_usage(self):\n        print(\"created pydantic model\")\n        return self\n\n\n@app.get(\"/\", response_model=ProfileResponse)\nasync def root():\n    return ProfileResponse()\n</code></pre> <p>\u65e5\u5fd7\u8f93\u51fa\uff1a</p> <pre><code>[INFO] [2022-08-28 12:00:00.000000] created pydantic model\n[INFO] [2022-08-28 12:00:00.000020] created pydantic model\n</code></pre> <p>\u4ece\u65e5\u5fd7\u8f93\u51fa\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cPydantic \u6a21\u578b\u88ab\u521b\u5efa\u4e86\u4e24\u6b21\uff1a</p> <ol> <li>\u7b2c\u4e00\u6b21\u662f\u5728\u8def\u7531\u5904\u7406\u51fd\u6570\u4e2d\u76f4\u63a5\u8fd4\u56de <code>ProfileResponse()</code> \u65f6\u3002</li> <li>\u7b2c\u4e8c\u6b21\u662f\u5728 FastAPI \u5c06 Pydantic \u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u5178\u5e76\u9a8c\u8bc1\u6570\u636e\u65f6\u3002</li> </ol> <p>\u56e0\u6b64\uff0c\u76f4\u63a5\u8fd4\u56de Pydantic \u5bf9\u8c61\u5e76\u4e0d\u4f1a\u51cf\u5c11\u5bf9\u8c61\u7684\u521b\u5efa\u6b21\u6570\uff0c\u4e5f\u4e0d\u4f1a\u51cf\u5c11\u5e8f\u5217\u5316\u6b65\u9aa4\u3002FastAPI \u4ecd\u7136\u4f1a\u6267\u884c\u5fc5\u8981\u7684\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u8fc7\u7a0b\u3002</p> <p>\u6b63\u786e\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u8fd4\u56de\u5b57\u5178\u6216\u8005\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u8ba9 FastAPI \u5904\u7406\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u6b63\u786e\u6027\uff0c\u540c\u65f6\u5229\u7528 FastAPI \u7684\u5185\u7f6e\u529f\u80fd\u6765\u7b80\u5316\u4ee3\u7801\u3002</p> <p>If you think you can return Pydantic object that matches your route's <code>response_model</code> to make some optimizations, then it's wrong. </p> <p>FastAPI firstly converts that pydantic object to dict with its <code>jsonable_encoder</code>, then validates  data with your <code>response_model</code>, and only then serializes your object to JSON. </p> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, root_validator\n\napp = FastAPI()\n\n\nclass ProfileResponse(BaseModel):\n    @model_validator(mode=\"after\")\n    def debug_usage(self):\n        print(\"created pydantic model\")\n\n        return self\n\n\n@app.get(\"/\", response_model=ProfileResponse)\nasync def root():\n    return ProfileResponse()\n</code></pre> <p>Logs Output:</p> <pre><code>[INFO] [2022-08-28 12:00:00.000000] created pydantic model\n[INFO] [2022-08-28 12:00:00.000020] created pydantic model\n</code></pre>"},{"location":"fastapi/v2/#\u5982\u679c\u5fc5\u987b\u4f7f\u7528\u540c\u6b65-sdk\u5219\u8bf7\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c\u5b83","title":"\u5982\u679c\u5fc5\u987b\u4f7f\u7528\u540c\u6b65 SDK\uff0c\u5219\u8bf7\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c\u5b83\u3002","text":"<p>If you must use sync SDK, then run it in a thread pool.</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528\u4e00\u4e2a\u5e93\u4e0e\u5916\u90e8\u670d\u52a1\u8fdb\u884c\u4ea4\u4e92\uff0c\u800c\u8fd9\u4e2a\u5e93\u4e0d\u662f\u5f02\u6b65\u7684\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u5728\u4e00\u4e2a\u5916\u90e8\u5de5\u4f5c\u7ebf\u7a0b\u4e2d\u8fdb\u884cHTTP\u8c03\u7528\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528Starlette\u4e2d\u4f17\u6240\u5468\u77e5\u7684<code>run_in_threadpool</code>\u3002</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\nfrom my_sync_library import SyncAPIClient\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def call_my_sync_library():\n    my_data = await service.get_my_data()\n\n    client = SyncAPIClient()\n    await run_in_threadpool(client.make_request, data=my_data)\n</code></pre> <p>If you must use a library to interact with external services, and it's not <code>async</code>, then make the HTTP calls in an external worker thread.</p> <p>We can use the well-known <code>run_in_threadpool</code> from starlette.</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\nfrom my_sync_library import SyncAPIClient \n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def call_my_sync_library():\n    my_data = await service.get_my_data()\n\n    client = SyncAPIClient()\n    await run_in_threadpool(client.make_request, data=my_data)\n</code></pre>"},{"location":"fastapi/v2/#valueerrors-\u53ef\u80fd\u4f1a\u53d8\u6210-pydantic-validationerror","title":"ValueErrors \u53ef\u80fd\u4f1a\u53d8\u6210 Pydantic ValidationError","text":"<p>ValueErrors might become Pydantic ValidationError</p> \u4e2d\u6587 <p>\u5982\u679c\u5728\u76f4\u63a5\u9762\u5411\u5ba2\u6237\u7aef\u7684Pydantic\u6a21\u5f0f\u4e2d\u5f15\u53d1\u4e00\u4e2aValueError\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u8be6\u7ec6\u4e14\u53cb\u597d\u7684\u54cd\u5e94\u7ed9\u7528\u6237\u3002</p> <pre><code># src.profiles.schemas\nfrom pydantic import BaseModel, field_validator\n\nclass ProfileCreate(BaseModel):\n    username: str\n\n    @field_validator(\"password\", mode=\"after\")\n    @classmethod\n    def valid_password(cls, password: str) -&gt; str:\n        if not re.match(STRONG_PASSWORD_PATTERN, password):\n            raise ValueError(\n                \"Password must contain at least \"\n                \"one lower character, \"\n                \"one upper character, \"\n                \"digit or \"\n                \"special symbol\"\n            )\n\n        return password\n\n\n# src.profiles.routes\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/profiles\")\nasync def get_creator_posts(profile_data: ProfileCreate):\n    pass\n</code></pre> <p>Response Example:</p> <p></p> \u82f1\u6587 <p>If you raise a <code>ValueError</code> in a Pydantic schema that is directly faced by the client, it will return a nice detailed response to users.</p> <pre><code># src.profiles.schemas\nfrom pydantic import BaseModel, field_validator\n\nclass ProfileCreate(BaseModel):\n    username: str\n\n    @field_validator(\"password\", mode=\"after\")\n    @classmethod\n    def valid_password(cls, password: str) -&gt; str:\n        if not re.match(STRONG_PASSWORD_PATTERN, password):\n            raise ValueError(\n                \"Password must contain at least \"\n                \"one lower character, \"\n                \"one upper character, \"\n                \"digit or \"\n                \"special symbol\"\n            )\n\n        return password\n\n\n# src.profiles.routes\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/profiles\")\nasync def get_creator_posts(profile_data: ProfileCreate):\n    pass\n</code></pre> <p>Response Example:</p> <p></p>"},{"location":"fastapi/v2/#\u6587\u6863","title":"\u6587\u6863","text":"<p>Docs</p> \u4e2d\u6587\u82f1\u6587 <ol> <li> <p>\u9664\u975e\u60a8\u7684API\u662f\u516c\u5f00\u7684\uff0c\u5426\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9690\u85cf\u6587\u6863\u3002\u53ea\u5728\u9009\u5b9a\u7684\u73af\u5883\u4e2d\u660e\u786e\u663e\u793a\u5b83\u3002</p> <pre><code>from fastapi import FastAPI\nfrom starlette.config import Config\n\nconfig = Config(\".env\")  # \u89e3\u6790 .env \u6587\u4ef6\u4e2d\u7684\u73af\u5883\u53d8\u91cf\n\nENVIRONMENT = config(\"ENVIRONMENT\")  # \u83b7\u53d6\u5f53\u524d\u73af\u5883\u540d\u79f0\nSHOW_DOCS_ENVIRONMENT = (\"local\", \"staging\")  # \u5141\u8bb8\u663e\u793a\u6587\u6863\u7684\u73af\u5883\u5217\u8868\n\napp_configs = {\"title\": \"My Cool API\"}\nif ENVIRONMENT not in SHOW_DOCS_ENVIRONMENT:\n    app_configs[\"openapi_url\"] = None  # \u5c06\u6587\u6863URL\u8bbe\u7f6e\u4e3anull\n\napp = FastAPI(**app_configs)\n</code></pre> </li> <li> <p>\u5e2e\u52a9FastAPI\u751f\u6210\u6613\u4e8e\u7406\u89e3\u7684\u6587\u6863\u3002</p> </li> <li>\u8bbe\u7f6e<code>response_model</code>, <code>status_code</code>, <code>description</code>\u7b49\u3002</li> <li>\u5982\u679c\u6a21\u578b\u548c\u72b6\u6001\u4e0d\u540c\uff0c\u4f7f\u7528<code>responses</code>\u8def\u7531\u5c5e\u6027\u4e3a\u4e0d\u540c\u7684\u54cd\u5e94\u6dfb\u52a0\u6587\u6863\u3002</li> </ol> <pre><code>from fastapi import APIRouter, status\n\nrouter = APIRouter()\n\n@router.post(\n    \"/endpoints\",\n    response_model=DefaultResponseModel,  # \u9ed8\u8ba4\u54cd\u5e94\u7684Pydantic\u6a21\u578b\n    status_code=status.HTTP_201_CREATED,  # \u9ed8\u8ba4\u72b6\u6001\u7801\n    description=\"\u5bf9\u6587\u6863\u826f\u597d\u7684\u7aef\u70b9\u7684\u63cf\u8ff0\",\n    tags=[\"\u7aef\u70b9\u7c7b\u522b\"],\n    summary=\"\u7aef\u70b9\u6458\u8981\",\n    responses={\n        status.HTTP_200_OK: {\n            \"model\": OkResponse,  # 200\u54cd\u5e94\u7684\u81ea\u5b9a\u4e49Pydantic\u6a21\u578b\n            \"description\": \"OK\u54cd\u5e94\",\n        },\n        status.HTTP_201_CREATED: {\n            \"model\": CreatedResponse,  # 201\u54cd\u5e94\u7684\u81ea\u5b9a\u4e49Pydantic\u6a21\u578b\n            \"description\": \"\u6839\u636e\u7528\u6237\u8bf7\u6c42\u521b\u5efa\u67d0\u4e9b\u5185\u5bb9\",\n        },\n        status.HTTP_202_ACCEPTED: {\n            \"model\": AcceptedResponse,  # 202\u54cd\u5e94\u7684\u81ea\u5b9a\u4e49Pydantic\u6a21\u578b\n            \"description\": \"\u63a5\u53d7\u8bf7\u6c42\u5e76\u7a0d\u540e\u5904\u7406\",\n        },\n    },\n)\nasync def documented_route():\n    pass\n</code></pre> <p>\u5c06\u751f\u6210\u5982\u4e0b\u6587\u6863\uff1a</p> <p></p> <ol> <li> <p>Unless your API is public, hide docs by default. Show it explicitly on the selected envs only.</p> <pre><code>from fastapi import FastAPI\nfrom starlette.config import Config\n\nconfig = Config(\".env\")  # parse .env file for env variables\n\nENVIRONMENT = config(\"ENVIRONMENT\")  # get current env name\nSHOW_DOCS_ENVIRONMENT = (\"local\", \"staging\")  # explicit list of allowed envs\n\napp_configs = {\"title\": \"My Cool API\"}\nif ENVIRONMENT not in SHOW_DOCS_ENVIRONMENT:\napp_configs[\"openapi_url\"] = None  # set url for docs as null\n\napp = FastAPI(**app_configs)\n</code></pre> </li> <li> <p>Help FastAPI to generate an easy-to-understand docs</p> </li> <li>Set <code>response_model</code>, <code>status_code</code>, <code>description</code>, etc.</li> <li>If models and statuses vary, use <code>responses</code> route attribute to add docs for different responses</li> </ol> <pre><code>from fastapi import APIRouter, status\n\nrouter = APIRouter()\n\n@router.post(\n    \"/endpoints\",\n    response_model=DefaultResponseModel,  # default response pydantic model \n    status_code=status.HTTP_201_CREATED,  # default status code\n    description=\"Description of the well documented endpoint\",\n    tags=[\"Endpoint Category\"],\n    summary=\"Summary of the Endpoint\",\n    responses={\n        status.HTTP_200_OK: {\n            \"model\": OkResponse, # custom pydantic model for 200 response\n            \"description\": \"Ok Response\",\n        },\n        status.HTTP_201_CREATED: {\n            \"model\": CreatedResponse,  # custom pydantic model for 201 response\n            \"description\": \"Creates something from user request \",\n        },\n        status.HTTP_202_ACCEPTED: {\n            \"model\": AcceptedResponse,  # custom pydantic model for 202 response\n            \"description\": \"Accepts request and handles it later\",\n        },\n    },\n)\nasync def documented_route():\n    pass\n</code></pre> <p>Will generate docs like this:</p> <p></p>"},{"location":"fastapi/v2/#\u8bbe\u7f6e\u6570\u636e\u5e93\u952e\u547d\u540d\u7ea6\u5b9a","title":"\u8bbe\u7f6e\u6570\u636e\u5e93\u952e\u547d\u540d\u7ea6\u5b9a","text":"<p>Set DB keys naming conventions</p> \u4e2d\u6587\u82f1\u6587 <p>\u660e\u786e\u6839\u636e\u6570\u636e\u5e93\u7684\u7ea6\u5b9a\u8bbe\u7f6e\u7d22\u5f15\u7684\u547d\u540d\u6bd4\u4f7f\u7528SQLAlchemy\u7684\u9ed8\u8ba4\u547d\u540d\u66f4\u53ef\u53d6\u3002</p> <pre><code>from sqlalchemy import MetaData\n\nPOSTGRES_INDEXES_NAMING_CONVENTION = {\n    \"ix\": \"%(column_0_label)s_idx\",\n    \"uq\": \"%(table_name)s_%(column_0_name)s_key\",\n    \"ck\": \"%(table_name)s_%(constraint_name)s_check\",\n    \"fk\": \"%(table_name)s_%(column_0_name)s_fkey\",\n    \"pk\": \"%(table_name)s_pkey\",\n}\nmetadata = MetaData(naming_convention=POSTGRES_INDEXES_NAMING_CONVENTION)\n</code></pre> <p>Explicitly setting the indexes' namings according to your database's convention is preferable over sqlalchemy's.  <pre><code>from sqlalchemy import MetaData\n\nPOSTGRES_INDEXES_NAMING_CONVENTION = {\n    \"ix\": \"%(column_0_label)s_idx\",\n    \"uq\": \"%(table_name)s_%(column_0_name)s_key\",\n    \"ck\": \"%(table_name)s_%(constraint_name)s_check\",\n    \"fk\": \"%(table_name)s_%(column_0_name)s_fkey\",\n    \"pk\": \"%(table_name)s_pkey\",\n}\nmetadata = MetaData(naming_convention=POSTGRES_INDEXES_NAMING_CONVENTION)\n</code></pre></p>"},{"location":"fastapi/v2/#\u8fc1\u79fb-alembic","title":"\u8fc1\u79fb. Alembic","text":"<p>Migrations. Alembic</p> \u4e2d\u6587\u82f1\u6587 <ol> <li>\u8fc1\u79fb\u5fc5\u987b\u662f\u9759\u6001\u7684\u5e76\u4e14\u53ef\u56de\u6eda\u7684\u3002</li> </ol> <p>\u5982\u679c\u4f60\u7684\u8fc1\u79fb\u4f9d\u8d56\u4e8e\u52a8\u6001\u751f\u6210\u7684\u6570\u636e\uff0c\u90a3\u4e48\u786e\u4fdd\u552f\u4e00\u52a8\u6001\u7684\u662f\u6570\u636e\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5176\u7ed3\u6784\u3002</p> <ol> <li>\u7528\u63cf\u8ff0\u6027\u7684\u540d\u79f0\u548c\u7f29\u7565\u8bed\u751f\u6210\u8fc1\u79fb\u3002\u7f29\u7565\u8bed\u662f\u5fc5\u9700\u7684\uff0c\u5e94\u8be5\u89e3\u91ca\u53d8\u66f4\u3002</li> <li>\u4e3a\u65b0\u8fc1\u79fb\u8bbe\u7f6e\u53ef\u8bfb\u6027\u5f3a\u7684\u6587\u4ef6\u6a21\u677f\u3002\u6211\u4eec\u4f7f\u7528<code>*date*_*slug*.py</code>\u6a21\u5f0f\uff0c\u4f8b\u5982<code>2022-08-24_post_content_idx.py</code>\u3002</li> </ol> <pre><code># alembic.ini\nfile_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s\n</code></pre> <ol> <li>Migrations must be static and revertable.</li> </ol> <p>If your migrations depend on dynamically generated data, then  make sure the only thing that is dynamic is the data itself, not its structure.</p> <ol> <li>Generate migrations with descriptive names &amp; slugs. Slug is required and should explain the changes.</li> <li>Set human-readable file template for new migrations. We use <code>*date*_*slug*.py</code> pattern, e.g. <code>2022-08-24_post_content_idx.py</code></li> </ol> <pre><code># alembic.ini\nfile_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s\n</code></pre>"},{"location":"fastapi/v2/#\u8bbe\u7f6e\u6570\u636e\u5e93\u547d\u540d\u7ea6\u5b9a","title":"\u8bbe\u7f6e\u6570\u636e\u5e93\u547d\u540d\u7ea6\u5b9a","text":"<p>Set DB naming conventions</p> \u4e2d\u6587\u82f1\u6587 <p>\u4fdd\u6301\u547d\u540d\u7684\u4e00\u81f4\u6027\u975e\u5e38\u91cd\u8981\u3002\u6211\u4eec\u9075\u5faa\u7684\u4e00\u4e9b\u89c4\u5219\u5305\u62ec\uff1a</p> <ol> <li>\u4f7f\u7528\u5c0f\u5199\u86c7\u5f62\u547d\u540d\u6cd5\uff08lower_case_snake\uff09\u3002</li> <li>\u4f7f\u7528\u5355\u6570\u5f62\u5f0f\uff08\u4f8b\u5982 <code>post</code>, <code>post_like</code>, <code>user_playlist</code>\uff09\u3002</li> <li>\u5bf9\u76f8\u4f3c\u7684\u8868\u683c\u4f7f\u7528\u6a21\u5757\u524d\u7f00\u8fdb\u884c\u5206\u7ec4\uff0c\u4f8b\u5982 <code>payment_account</code>, <code>payment_bill</code>, <code>post</code>, <code>post_like</code>\u3002</li> <li> <p>\u5728\u8868\u683c\u95f4\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u4f46\u5177\u4f53\u7684\u547d\u540d\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u4f8b\u5982\uff1a</p> </li> <li> <p>\u5728\u6240\u6709\u8868\u683c\u4e2d\u4f7f\u7528 <code>profile_id</code>\uff0c\u4f46\u5982\u679c\u67d0\u4e9b\u8868\u683c\u53ea\u9700\u8981\u521b\u4f5c\u8005\u7c7b\u578b\u7684\u6863\u6848\uff0c\u4f7f\u7528 <code>creator_id</code>\u3002</p> </li> <li> <p>\u5bf9\u4e8e\u6240\u6709\u62bd\u8c61\u8868\u683c\u5982 <code>post_like</code>, <code>post_view</code> \u4f7f\u7528 <code>post_id</code>\uff0c\u4f46\u5728\u76f8\u5173\u6a21\u5757\u4e2d\u4f7f\u7528\u5177\u4f53\u547d\u540d\uff0c\u5982\u5728 <code>chapters</code> \u6a21\u5757\u4e2d\u4f7f\u7528 <code>course_id</code>\u3002</p> </li> <li> <p>\u5bf9\u4e8e\u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\uff0c\u4f7f\u7528 <code>_at</code> \u540e\u7f00\u3002</p> </li> <li>\u5bf9\u4e8e\u65e5\u671f\u5b57\u6bb5\uff0c\u4f7f\u7528 <code>_date</code> \u540e\u7f00\u3002</li> </ol> <p>Being consistent with names is important. Some rules we followed:</p> <ol> <li>lower_case_snake</li> <li>singular form (e.g. <code>post</code>, <code>post_like</code>, <code>user_playlist</code>)</li> <li>group similar tables with module prefix, e.g. <code>payment_account</code>, <code>payment_bill</code>, <code>post</code>, <code>post_like</code></li> <li>stay consistent across tables, but concrete namings are ok, e.g.</li> <li>use <code>profile_id</code> in all tables, but if some of them need only profiles that are creators, use <code>creator_id</code></li> <li>use <code>post_id</code> for all abstract tables like <code>post_like</code>, <code>post_view</code>, but use concrete naming in relevant modules like <code>course_id</code> in <code>chapters.course_id</code></li> <li><code>_at</code> suffix for datetime</li> <li><code>_date</code> suffix for date</li> </ol>"},{"location":"fastapi/v2/#sql-\u4f18\u5148pydantic-\u5176\u6b21","title":"SQL \u4f18\u5148\uff0cPydantic \u5176\u6b21","text":"<p>SQL-first. Pydantic-second</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u901a\u5e38\uff0c\u6570\u636e\u5e93\u5904\u7406\u6570\u636e\u7684\u901f\u5ea6\u548c\u6548\u7387\u8fdc\u8fdc\u8d85\u8fc7CPython\u80fd\u591f\u505a\u5230\u7684\u3002</li> <li>\u4f18\u5148\u4f7f\u7528SQL\u6765\u6267\u884c\u6240\u6709\u590d\u6742\u7684\u8fde\u63a5\u548c\u7b80\u5355\u7684\u6570\u636e\u64cd\u4f5c\u3002</li> <li>\u4f18\u5148\u5728\u6570\u636e\u5e93\u4e2d\u805a\u5408JSON\uff0c\u4ee5\u54cd\u5e94\u5305\u542b\u5d4c\u5957\u5bf9\u8c61\u7684\u8bf7\u6c42\u3002</li> </ul> <pre><code># src.posts.service\nfrom typing import Any\nfrom pydantic import UUID4\nfrom sqlalchemy import desc, func, select, text\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom src.database import database, posts, profiles, post_review, products\n\nasync def get_posts(\n    creator_id: UUID4, *, limit: int = 10, offset: int = 0\n) -&gt; list[dict[str, Any]]: \n    select_query = (\n        select(\n            (\n                posts.c.id,\n                posts.c.slug,\n                posts.c.title,\n                func.json_build_object(\n                    \"'id'\", profiles.c.id,\n                    \"'first_name'\", profiles.c.first_name,\n                    \"'last_name'\", profiles.c.last_name,\n                    \"'username'\", profiles.c.username,\n                ).label(\"creator\"),\n            )\n        )\n        .select_from(posts.join(profiles, posts.c.owner_id == profiles.c.id))\n        .where(posts.c.owner_id == creator_id)\n        .limit(limit)\n        .offset(offset)\n        .group_by(\n            posts.c.id,\n            posts.c.type,\n            posts.c.slug,\n            posts.c.title,\n            profiles.c.id,\n            profiles.c.first_name,\n            profiles.c.last_name,\n            profiles.c.username,\n            profiles.c.avatar,\n        )\n        .order_by(\n            desc(coalesce(posts.c.updated_at, posts.c.published_at, posts.c.created_at))\n        )\n    )\n\n    return await database.fetch_all(select_query)\n\n# src.posts.schemas\nfrom typing import Any\nfrom pydantic import BaseModel, UUID4\n\nclass Creator(BaseModel):\n    id: UUID4\n    first_name: str\n    last_name: str\n    username: str\n\nclass Post(BaseModel):\n    id: UUID4\n    slug: str\n    title: str\n    creator: Creator\n\n# src.posts.router\nfrom fastapi import APIRouter, Depends\n\nrouter = APIRouter()\n\n@router.get(\"/creators/{creator_id}/posts\", response_model=list[Post])\nasync def get_creator_posts(creator: dict[str, Any] = Depends(valid_creator_id)):\n    posts = await service.get_posts(creator[\"id\"])\n    return posts\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u4ee3\u7801\u4e2d\u7684 <code>valid_creator_id</code> \u4f9d\u8d56\u9879\u51fd\u6570\u6ca1\u6709\u5728\u793a\u4f8b\u4e2d\u5b9a\u4e49\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u8fd9\u4e2a\u51fd\u6570\u5b58\u5728\u5e76\u6b63\u786e\u5b9e\u73b0\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u9a8c\u8bc1 <code>creator_id</code> \u53c2\u6570\u7684\u6709\u6548\u6027\u3002\u6b64\u5916\uff0c<code>json_build_object</code> \u51fd\u6570\u7684\u4f7f\u7528\u53d6\u51b3\u4e8e\u4f60\u7684\u6570\u636e\u5e93\u662f\u5426\u652f\u6301\u8fd9\u4e2a\u51fd\u6570\uff0c\u5b83\u901a\u5e38\u5728PostgreSQL\u4e2d\u53ef\u7528\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u5e93\uff0c\u53ef\u80fd\u9700\u8981\u8c03\u6574\u8fd9\u90e8\u5206\u4ee3\u7801\u4ee5\u9002\u5e94\u4e0d\u540c\u7684SQL\u65b9\u8a00\u3002</p> <ul> <li>Usually, database handles data processing much faster and cleaner than CPython will ever do. </li> <li>It's preferable to do all the complex joins and simple data manipulations with SQL.</li> <li>It's preferable to aggregate JSONs in DB for responses with nested objects. <pre><code># src.posts.service\nfrom typing import Any\n\nfrom pydantic import UUID4\nfrom sqlalchemy import desc, func, select, text\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom src.database import database, posts, profiles, post_review, products\n\nasync def get_posts(\n    creator_id: UUID4, *, limit: int = 10, offset: int = 0\n) -&gt; list[dict[str, Any]]: \n    select_query = (\n        select(\n            (\n                posts.c.id,\n                posts.c.slug,\n                posts.c.title,\n                func.json_build_object(\n                text(\"'id', profiles.id\"),\n                text(\"'first_name', profiles.first_name\"),\n                text(\"'last_name', profiles.last_name\"),\n                text(\"'username', profiles.username\"),\n                ).label(\"creator\"),\n            )\n        )\n        .select_from(posts.join(profiles, posts.c.owner_id == profiles.c.id))\n        .where(posts.c.owner_id == creator_id)\n        .limit(limit)\n        .offset(offset)\n        .group_by(\n            posts.c.id,\n            posts.c.type,\n            posts.c.slug,\n            posts.c.title,\n            profiles.c.id,\n            profiles.c.first_name,\n            profiles.c.last_name,\n            profiles.c.username,\n            profiles.c.avatar,\n        )\n        .order_by(\n            desc(coalesce(posts.c.updated_at, posts.c.published_at, posts.c.created_at))\n        )\n    )\n\n    return await database.fetch_all(select_query)\n\n# src.posts.schemas\nfrom typing import Any\n\nfrom pydantic import BaseModel, UUID4\n\n\nclass Creator(BaseModel):\n    id: UUID4\n    first_name: str\n    last_name: str\n    username: str\n\n\nclass Post(BaseModel):\n    id: UUID4\n    slug: str\n    title: str\n    creator: Creator\n\n\n# src.posts.router\nfrom fastapi import APIRouter, Depends\n\nrouter = APIRouter()\n\n\n@router.get(\"/creators/{creator_id}/posts\", response_model=list[Post])\nasync def get_creator_posts(creator: dict[str, Any] = Depends(valid_creator_id)):\nposts = await service.get_posts(creator[\"id\"])\n\nreturn posts\n</code></pre></li> </ul>"},{"location":"fastapi/v2/#\u4ece\u7b2c-0-\u5929\u5f00\u59cb\u8bbe\u7f6e\u6d4b\u8bd5\u5ba2\u6237\u7aef\u5f02\u6b65","title":"\u4ece\u7b2c 0 \u5929\u5f00\u59cb\u8bbe\u7f6e\u6d4b\u8bd5\u5ba2\u6237\u7aef\u5f02\u6b65","text":"<p>Set tests client async from day 0</p> \u4e2d\u6587\u82f1\u6587 <p>\u7f16\u5199\u4f7f\u7528\u6570\u636e\u5e93\u7684\u96c6\u6210\u6d4b\u8bd5\u65f6\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u672a\u6765\u51fa\u73b0\u4e8b\u4ef6\u5faa\u73af\u7684\u6df7\u4e71\u9519\u8bef\u3002\u56e0\u6b64\uff0c\u5efa\u8bae\u7acb\u5373\u8bbe\u7f6e\u5f02\u6b65\u6d4b\u8bd5\u5ba2\u6237\u7aef\uff0c\u6bd4\u5982\u4f7f\u7528 httpx\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801\uff1a</p> <pre><code>import pytest\nfrom async_asgi_testclient import TestClient\n\nfrom src.main import app  # \u5df2\u521d\u59cb\u5316\u7684 FastAPI \u5e94\u7528\n\n\n@pytest.fixture\nasync def client() -&gt; AsyncGenerator[TestClient, None]:\n    host, port = \"127.0.0.1\", \"9000\"\n\n    async with AsyncClient(transport=ASGITransport(app=app, client=(host, port)), base_url=\"http://test\") as client:\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_create_post(client: TestClient):\n    resp = await client.post(\"/posts\")\n\n    assert resp.status_code == 201\n</code></pre> <p>\u9664\u975e\u4f60\u6709\u540c\u6b65\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff08\u8fd9\u53ef\u80fd\u4e0d\u592a\u5408\u9002\uff1f\uff09\u6216\u8005\u4e0d\u6253\u7b97\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\uff0c\u5426\u5219\u8fd9\u79cd\u8bbe\u7f6e\u662f\u5fc5\u8981\u7684\uff0c\u4ee5\u907f\u514d\u6f5c\u5728\u7684\u5f02\u6b65\u95ee\u9898\u3002</p> <p>Writing integration tests with DB will most likely lead to messed up event loop errors in the future. Set the async test client immediately, e.g. httpx</p> <p><pre><code>import pytest\nfrom async_asgi_testclient import TestClient\n\nfrom src.main import app  # inited FastAPI app\n\n\n@pytest.fixture\nasync def client() -&gt; AsyncGenerator[TestClient, None]:\n    host, port = \"127.0.0.1\", \"9000\"\n\n    async with AsyncClient(transport=ASGITransport(app=app, client=(host, port)), base_url=\"http://test\") as client:\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_create_post(client: TestClient):\n    resp = await client.post(\"/posts\")\n\n    assert resp.status_code == 201\n</code></pre> Unless you have sync db connections (excuse me?) or aren't planning to write integration tests.</p>"},{"location":"fastapi/v2/#\u4f7f\u7528-ruff","title":"\u4f7f\u7528 ruff","text":"<p>Use ruff</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528\u4ee3\u7801\u68c0\u67e5\u5de5\u5177\uff08linter\uff09\uff0c\u4f60\u53ef\u4ee5\u65e0\u9700\u62c5\u5fc3\u4ee3\u7801\u683c\u5f0f\u5316\u95ee\u9898\uff0c\u800c\u4e13\u6ce8\u4e8e\u4e1a\u52a1\u903b\u8f91\u7684\u7f16\u5199\u3002</p> <p>Ruff \u662f\u4e00\u4e2a\u201c\u6781\u5176\u5feb\u901f\u201d\u7684\u65b0\u578b linter\uff0c\u66ff\u4ee3\u4e86 black\u3001autoflake\u3001isort \u7b49\u5de5\u5177\uff0c\u5e76\u4e14\u652f\u6301\u8d85\u8fc7 600 \u6761 lint \u89c4\u5219\u3002</p> <p>\u867d\u7136\u4f7f\u7528 pre-commit \u94a9\u5b50\u662f\u6d41\u884c\u7684\u597d\u5b9e\u8df5\uff0c\u4f46\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\uff0c\u4ec5\u4f7f\u7528\u811a\u672c\u5df2\u7ecf\u8db3\u591f\uff1a</p> <pre><code>#!/bin/sh -e\nset -x\n\nruff check --fix src\nruff format src\n</code></pre> <p>\u8fd9\u4e2a\u811a\u672c\u4f1a\u8fd0\u884c <code>ruff</code> \u8fdb\u884c\u4ee3\u7801\u68c0\u67e5\u548c\u683c\u5f0f\u5316\uff0c\u4ece\u800c\u786e\u4fdd\u4ee3\u7801\u7b26\u5408\u6807\u51c6\u3002</p> <p>With linters, you can forget about formatting the code and focus on writing the business logic.</p> <p>Ruff is \"blazingly-fast\" new linter that replaces black, autoflake, isort, and supports more than 600 lint rules.</p> <p>It's a popular good practice to use pre-commit hooks, but just using the script was ok for us. <pre><code>#!/bin/sh -e\nset -x\n\nruff check --fix src\nruff format src\n</code></pre></p>"},{"location":"fastapi/v2/#\u5956\u52b1\u90e8\u5206","title":"\u5956\u52b1\u90e8\u5206","text":"<p>Bonus Section</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u4e00\u4e9b\u975e\u5e38\u53cb\u5584\u7684\u4eba\u5206\u4eab\u4e86\u4ed6\u4eec\u7684\u7ecf\u9a8c\u548c\u6700\u4f73\u5b9e\u8df5\uff0c\u7edd\u5bf9\u503c\u5f97\u4e00\u8bfb\u3002\u4f60\u53ef\u4ee5\u5728\u8be5\u9879\u76ee\u7684 issues \u90e8\u5206\u67e5\u770b\u3002</p> <p>\u4f8b\u5982\uff0c\u7528\u6237 lowercase00 \u8be6\u7ec6\u63cf\u8ff0\u4e86\u4ed6\u4eec\u5728\u5904\u7406\u6743\u9650\u4e0e\u8ba4\u8bc1\u3001\u57fa\u4e8e\u7c7b\u7684\u670d\u52a1\u548c\u89c6\u56fe\u3001\u4efb\u52a1\u961f\u5217\u3001\u81ea\u5b9a\u4e49\u54cd\u5e94\u5e8f\u5217\u5316\u5668\u3001\u4f7f\u7528 Dynaconf \u8fdb\u884c\u914d\u7f6e\u7b49\u65b9\u9762\u7684\u6700\u4f73\u5b9e\u8df5\u3002</p> <p>\u5982\u679c\u4f60\u4e5f\u6709\u4efb\u4f55\u5173\u4e8e\u4f7f\u7528 FastAPI \u7684\u7ecf\u9a8c\uff0c\u65e0\u8bba\u662f\u597d\u7684\u8fd8\u662f\u574f\u7684\uff0c\u6b22\u8fce\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 issue\u3002\u6211\u4eec\u975e\u5e38\u4e50\u610f\u9605\u8bfb\u4f60\u7684\u5206\u4eab\u3002</p> <p>Some very kind people shared their own experience and best practices that are definitely worth reading. Check them out at issues section of the project.</p> <p>For instance, lowercase00  has described in details their best practices working with permissions &amp; auth, class-based services &amp; views,  task queues, custom response serializers, configuration with dynaconf, etc.  </p> <p>If you have something to share about your experience working with FastAPI, whether it's good or bad,  you are very welcome to create a new issue. It is our pleasure to read it. </p>"},{"location":"git/git-branch-manage/","title":"Git\u5206\u652f\u7ba1\u7406\u7b56\u7565","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - Git\u5206\u652f\u7ba1\u7406\u7b56\u7565</p> <p>\u5982\u679c\u4f60\u4e25\u8083\u5bf9\u5f85\u7f16\u7a0b\uff0c\u5c31\u5fc5\u5b9a\u4f1a\u4f7f\u7528\"\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\"\uff08Version Control System\uff09\u3002</p> <p>\u773c\u4e0b\u6700\u6d41\u884c\u7684\"\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\"\uff0c\u975eGit\u83ab\u5c5e\u3002</p> <p></p> <p>\u76f8\u6bd4\u540c\u7c7b\u8f6f\u4ef6\uff0cGit\u6709\u5f88\u591a\u4f18\u70b9\u3002\u5176\u4e2d\u5f88\u663e\u8457\u7684\u4e00\u70b9\uff0c\u5c31\u662f\u7248\u672c\u7684\u5206\u652f\uff08branch\uff09\u548c\u5408\u5e76\uff08merge\uff09\u5341\u5206\u65b9\u4fbf\u3002\u6709\u4e9b\u4f20\u7edf\u7684\u7248\u672c\u7ba1\u7406\u8f6f\u4ef6\uff0c\u5206\u652f\u64cd\u4f5c\u5b9e\u9645\u4e0a\u4f1a\u751f\u6210\u4e00\u4efd\u73b0\u6709\u4ee3\u7801\u7684\u7269\u7406\u62f7\u8d1d\uff0c\u800cGit\u53ea\u751f\u6210\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u7248\u672c\uff08\u53c8\u79f0\"\u5feb\u7167\"\uff09\u7684\u6307\u9488\uff0c\u56e0\u6b64\u975e\u5e38\u5feb\u6377\u6613\u7528\u3002</p> <p>\u4f46\u662f\uff0c\u592a\u65b9\u4fbf\u4e86\u4e5f\u4f1a\u4ea7\u751f\u526f\u4f5c\u7528\u3002\u5982\u679c\u4f60\u4e0d\u52a0\u6ce8\u610f\uff0c\u5f88\u53ef\u80fd\u4f1a\u7559\u4e0b\u4e00\u4e2a\u679d\u8282\u8513\u751f\u3001\u56db\u5904\u5f00\u653e\u7684\u7248\u672c\u5e93\uff0c\u5230\u5904\u90fd\u662f\u5206\u652f\uff0c\u5b8c\u5168\u770b\u4e0d\u51fa\u4e3b\u5e72\u53d1\u5c55\u7684\u8109\u7edc\u3002</p> <p></p> <p>Vincent Driessen\u63d0\u51fa\u4e86\u4e00\u4e2a\u5206\u652f\u7ba1\u7406\u7684\u7b56\u7565\uff0c\u6211\u89c9\u5f97\u975e\u5e38\u503c\u5f97\u501f\u9274\u3002\u5b83\u53ef\u4ee5\u4f7f\u5f97\u7248\u672c\u5e93\u7684\u6f14\u8fdb\u4fdd\u6301\u7b80\u6d01\uff0c\u4e3b\u5e72\u6e05\u6670\uff0c\u5404\u4e2a\u5206\u652f\u5404\u53f8\u5176\u804c\u3001\u4e95\u4e95\u6709\u6761\u3002\u7406\u8bba\u4e0a\uff0c\u8fd9\u4e9b\u7b56\u7565\u5bf9\u6240\u6709\u7684\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\u90fd\u9002\u7528\uff0cGit\u53ea\u662f\u7528\u6765\u4e3e\u4f8b\u800c\u5df2\u3002\u5982\u679c\u4f60\u4e0d\u719f\u6089Git\uff0c\u8df3\u8fc7\u4e3e\u4f8b\u90e8\u5206\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"git/git-branch-manage/#\u4e00\u4e3b\u5206\u652fmaster","title":"\u4e00\u3001\u4e3b\u5206\u652fMaster","text":"<p>\u9996\u5148\uff0c\u4ee3\u7801\u5e93\u5e94\u8be5\u6709\u4e00\u4e2a\u3001\u4e14\u4ec5\u6709\u4e00\u4e2a\u4e3b\u5206\u652f\u3002\u6240\u6709\u63d0\u4f9b\u7ed9\u7528\u6237\u4f7f\u7528\u7684\u6b63\u5f0f\u7248\u672c\uff0c\u90fd\u5728\u8fd9\u4e2a\u4e3b\u5206\u652f\u4e0a\u53d1\u5e03\u3002</p> <p></p> <p>Git\u4e3b\u5206\u652f\u7684\u540d\u5b57\uff0c\u9ed8\u8ba4\u53eb\u505aMaster\u3002\u5b83\u662f\u81ea\u52a8\u5efa\u7acb\u7684\uff0c\u7248\u672c\u5e93\u521d\u59cb\u5316\u4ee5\u540e\uff0c\u9ed8\u8ba4\u5c31\u662f\u5728\u4e3b\u5206\u652f\u5728\u8fdb\u884c\u5f00\u53d1\u3002</p>"},{"location":"git/git-branch-manage/#\u4e8c\u5f00\u53d1\u5206\u652fdevelop","title":"\u4e8c\u3001\u5f00\u53d1\u5206\u652fDevelop","text":"<p>\u4e3b\u5206\u652f\u53ea\u7528\u6765\u5206\u5e03\u91cd\u5927\u7248\u672c\uff0c\u65e5\u5e38\u5f00\u53d1\u5e94\u8be5\u5728\u53e6\u4e00\u6761\u5206\u652f\u4e0a\u5b8c\u6210\u3002\u6211\u4eec\u628a\u5f00\u53d1\u7528\u7684\u5206\u652f\uff0c\u53eb\u505aDevelop\u3002</p> <p></p> <p>\u8fd9\u4e2a\u5206\u652f\u53ef\u4ee5\u7528\u6765\u751f\u6210\u4ee3\u7801\u7684\u6700\u65b0\u9694\u591c\u7248\u672c\uff08nightly\uff09\u3002\u5982\u679c\u60f3\u6b63\u5f0f\u5bf9\u5916\u53d1\u5e03\uff0c\u5c31\u5728Master\u5206\u652f\u4e0a\uff0c\u5bf9Develop\u5206\u652f\u8fdb\u884c\"\u5408\u5e76\"\uff08merge\uff09\u3002</p> <p>Git\u521b\u5efaDevelop\u5206\u652f\u7684\u547d\u4ee4\uff1a</p> <pre><code>git checkout -b develop master\n</code></pre> <p>\u5c06Develop\u5206\u652f\u53d1\u5e03\u5230Master\u5206\u652f\u7684\u547d\u4ee4\uff1a</p> <pre><code># \u5207\u6362\u5230Master\u5206\u652f\ngit checkout master\n\n# \u5bf9Develop\u5206\u652f\u8fdb\u884c\u5408\u5e76\ngit merge --no-ff develop\n</code></pre> <p>\u8fd9\u91cc\u7a0d\u5fae\u89e3\u91ca\u4e00\u4e0b\uff0c\u4e0a\u4e00\u6761\u547d\u4ee4\u7684<code>--no-ff</code>\u53c2\u6570\u662f\u4ec0\u4e48\u610f\u601d\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGit\u6267\u884c\"\u5feb\u8fdb\u5f0f\u5408\u5e76\"\uff08fast-farward merge\uff09\uff0c\u4f1a\u76f4\u63a5\u5c06Master\u5206\u652f\u6307\u5411Develop\u5206\u652f\u3002</p> <p></p> <p>\u4f7f\u7528<code>--no-ff</code>\u53c2\u6570\u540e\uff0c\u4f1a\u6267\u884c\u6b63\u5e38\u5408\u5e76\uff0c\u5728Master\u5206\u652f\u4e0a\u751f\u6210\u4e00\u4e2a\u65b0\u8282\u70b9\u3002\u4e3a\u4e86\u4fdd\u8bc1\u7248\u672c\u6f14\u8fdb\u7684\u6e05\u6670\uff0c\u6211\u4eec\u5e0c\u671b\u91c7\u7528\u8fd9\u79cd\u505a\u6cd5\u3002\u5173\u4e8e\u5408\u5e76\u7684\u66f4\u591a\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003Benjamin Sandofsky\u7684\u300aUnderstanding the Git Workflow\u300b\u3002</p> <p></p>"},{"location":"git/git-branch-manage/#\u4e09\u4e34\u65f6\u6027\u5206\u652f","title":"\u4e09\u3001\u4e34\u65f6\u6027\u5206\u652f","text":"<p>\u524d\u9762\u8bb2\u5230\u7248\u672c\u5e93\u7684\u4e24\u6761\u4e3b\u8981\u5206\u652f\uff1aMaster\u548cDevelop\u3002\u524d\u8005\u7528\u4e8e\u6b63\u5f0f\u53d1\u5e03\uff0c\u540e\u8005\u7528\u4e8e\u65e5\u5e38\u5f00\u53d1\u3002\u5176\u5b9e\uff0c\u5e38\u8bbe\u5206\u652f\u53ea\u9700\u8981\u8fd9\u4e24\u6761\u5c31\u591f\u4e86\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u4e86\u3002</p> <p>\u4f46\u662f\uff0c\u9664\u4e86\u5e38\u8bbe\u5206\u652f\u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u4e34\u65f6\u6027\u5206\u652f\uff0c\u7528\u4e8e\u5e94\u5bf9\u4e00\u4e9b\u7279\u5b9a\u76ee\u7684\u7684\u7248\u672c\u5f00\u53d1\u3002\u4e34\u65f6\u6027\u5206\u652f\u4e3b\u8981\u6709\u4e09\u79cd\uff1a</p> <pre><code>* \u529f\u80fd\uff08feature\uff09\u5206\u652f\n\n* \u9884\u53d1\u5e03\uff08release\uff09\u5206\u652f\n\n* \u4fee\u8865bug\uff08fixbug\uff09\u5206\u652f\n</code></pre> <p>\u8fd9\u4e09\u79cd\u5206\u652f\u90fd\u5c5e\u4e8e\u4e34\u65f6\u6027\u9700\u8981\uff0c\u4f7f\u7528\u5b8c\u4ee5\u540e\uff0c\u5e94\u8be5\u5220\u9664\uff0c\u4f7f\u5f97\u4ee3\u7801\u5e93\u7684\u5e38\u8bbe\u5206\u652f\u59cb\u7ec8\u53ea\u6709Master\u548cDevelop\u3002</p>"},{"location":"git/git-branch-manage/#\u56db-\u529f\u80fd\u5206\u652f","title":"\u56db\u3001 \u529f\u80fd\u5206\u652f","text":"<p>\u63a5\u4e0b\u6765\uff0c\u4e00\u4e2a\u4e2a\u6765\u770b\u8fd9\u4e09\u79cd\"\u4e34\u65f6\u6027\u5206\u652f\"\u3002</p> <p>\u7b2c\u4e00\u79cd\u662f\u529f\u80fd\u5206\u652f\uff0c\u5b83\u662f\u4e3a\u4e86\u5f00\u53d1\u67d0\u79cd\u7279\u5b9a\u529f\u80fd\uff0c\u4eceDevelop\u5206\u652f\u4e0a\u9762\u5206\u51fa\u6765\u7684\u3002\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u8981\u518d\u5e76\u5165Develop\u3002</p> <p></p> <p>\u529f\u80fd\u5206\u652f\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u91c7\u7528feature-*\u7684\u5f62\u5f0f\u547d\u540d\u3002</p> <p>\u521b\u5efa\u4e00\u4e2a\u529f\u80fd\u5206\u652f\uff1a</p> <pre><code>git checkout -b feature-x develop\n</code></pre> <p>\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u5c06\u529f\u80fd\u5206\u652f\u5408\u5e76\u5230develop\u5206\u652f\uff1a</p> <pre><code>git checkout develop\n\ngit merge --no-ff feature-x\n</code></pre> <p>\u5220\u9664feature\u5206\u652f\uff1a</p> <pre><code>git branch -d feature-x\n</code></pre>"},{"location":"git/git-branch-manage/#\u4e94\u9884\u53d1\u5e03\u5206\u652f","title":"\u4e94\u3001\u9884\u53d1\u5e03\u5206\u652f","text":"<p>\u7b2c\u4e8c\u79cd\u662f\u9884\u53d1\u5e03\u5206\u652f\uff0c\u5b83\u662f\u6307\u53d1\u5e03\u6b63\u5f0f\u7248\u672c\u4e4b\u524d\uff08\u5373\u5408\u5e76\u5230Master\u5206\u652f\u4e4b\u524d\uff09\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u6709\u4e00\u4e2a\u9884\u53d1\u5e03\u7684\u7248\u672c\u8fdb\u884c\u6d4b\u8bd5\u3002</p> <p>\u9884\u53d1\u5e03\u5206\u652f\u662f\u4eceDevelop\u5206\u652f\u4e0a\u9762\u5206\u51fa\u6765\u7684\uff0c\u9884\u53d1\u5e03\u7ed3\u675f\u4ee5\u540e\uff0c\u5fc5\u987b\u5408\u5e76\u8fdbDevelop\u548cMaster\u5206\u652f\u3002\u5b83\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u91c7\u7528release-*\u7684\u5f62\u5f0f\u3002</p> <p>\u521b\u5efa\u4e00\u4e2a\u9884\u53d1\u5e03\u5206\u652f\uff1a</p> <pre><code>git checkout -b release-1.2 develop\n</code></pre> <p>\u786e\u8ba4\u6ca1\u6709\u95ee\u9898\u540e\uff0c\u5408\u5e76\u5230master\u5206\u652f\uff1a</p> <pre><code>git checkout master\n\ngit merge --no-ff release-1.2\n\n# \u5bf9\u5408\u5e76\u751f\u6210\u7684\u65b0\u8282\u70b9\uff0c\u505a\u4e00\u4e2a\u6807\u7b7e\ngit tag -a 1.2\n</code></pre> <p>\u518d\u5408\u5e76\u5230develop\u5206\u652f\uff1a</p> <pre><code>git checkout develop\n\ngit merge --no-ff release-1.2\n</code></pre> <p>\u6700\u540e\uff0c\u5220\u9664\u9884\u53d1\u5e03\u5206\u652f\uff1a</p> <pre><code>git branch -d release-1.2\n</code></pre>"},{"location":"git/git-branch-manage/#\u516d\u4fee\u8865bug\u5206\u652f","title":"\u516d\u3001\u4fee\u8865bug\u5206\u652f","text":"<p>\u6700\u540e\u4e00\u79cd\u662f\u4fee\u8865bug\u5206\u652f\u3002\u8f6f\u4ef6\u6b63\u5f0f\u53d1\u5e03\u4ee5\u540e\uff0c\u96be\u514d\u4f1a\u51fa\u73b0bug\u3002\u8fd9\u65f6\u5c31\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u8fdb\u884cbug\u4fee\u8865\u3002</p> <p>\u4fee\u8865bug\u5206\u652f\u662f\u4eceMaster\u5206\u652f\u4e0a\u9762\u5206\u51fa\u6765\u7684\u3002\u4fee\u8865\u7ed3\u675f\u4ee5\u540e\uff0c\u518d\u5408\u5e76\u8fdbMaster\u548cDevelop\u5206\u652f\u3002\u5b83\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u91c7\u7528<code>fixbug-*</code>\u7684\u5f62\u5f0f\u3002</p> <p></p> <p>\u521b\u5efa\u4e00\u4e2a\u4fee\u8865bug\u5206\u652f\uff1a</p> <pre><code>git checkout -b fixbug-0.1 master\n</code></pre> <p>\u4fee\u8865\u7ed3\u675f\u540e\uff0c\u5408\u5e76\u5230master\u5206\u652f\uff1a</p> <pre><code>git checkout master\n\ngit merge --no-ff fixbug-0.1\n\ngit tag -a 0.1.1\n</code></pre> <p>\u518d\u5408\u5e76\u5230develop\u5206\u652f\uff1a</p> <pre><code>git checkout develop\n\ngit merge --no-ff fixbug-0.1\n</code></pre> <p>\u6700\u540e\uff0c\u5220\u9664\"\u4fee\u8865bug\u5206\u652f\"\uff1a</p> <pre><code>git branch -d fixbug-0.1\n</code></pre> <p>\uff08\u5b8c\uff09</p>"},{"location":"git/git-cheat-sheet/","title":"\u5e38\u7528 Git \u547d\u4ee4\u6e05\u5355","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - \u5e38\u7528 Git \u547d\u4ee4\u6e05\u5355</p> <p>\u6211\u6bcf\u5929\u4f7f\u7528 Git \uff0c\u4f46\u662f\u5f88\u591a\u547d\u4ee4\u8bb0\u4e0d\u4f4f\u3002</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u65e5\u5e38\u4f7f\u7528\u53ea\u8981\u8bb0\u4f4f\u4e0b\u56fe6\u4e2a\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u719f\u7ec3\u4f7f\u7528\uff0c\u6050\u6015\u8981\u8bb0\u4f4f60\uff5e100\u4e2a\u547d\u4ee4\u3002</p> <p></p> <p>\u4e0b\u9762\u662f\u6211\u6574\u7406\u7684\u5e38\u7528 Git \u547d\u4ee4\u6e05\u5355\u3002\u51e0\u4e2a\u4e13\u7528\u540d\u8bcd\u7684\u8bd1\u540d\u5982\u4e0b\u3002</p> <ul> <li>Workspace\uff1a\u5de5\u4f5c\u533a</li> <li>Index / Stage\uff1a\u6682\u5b58\u533a</li> <li>Repository\uff1a\u4ed3\u5e93\u533a\uff08\u6216\u672c\u5730\u4ed3\u5e93\uff09</li> <li>Remote\uff1a\u8fdc\u7a0b\u4ed3\u5e93</li> </ul>"},{"location":"git/git-cheat-sheet/#\u4e00\u65b0\u5efa\u4ee3\u7801\u5e93","title":"\u4e00\u3001\u65b0\u5efa\u4ee3\u7801\u5e93","text":"<pre><code># \u5728\u5f53\u524d\u76ee\u5f55\u65b0\u5efa\u4e00\u4e2aGit\u4ee3\u7801\u5e93\n$ git init\n\n# \u65b0\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u5c06\u5176\u521d\u59cb\u5316\u4e3aGit\u4ee3\u7801\u5e93\n$ git init [project-name]\n\n# \u4e0b\u8f7d\u4e00\u4e2a\u9879\u76ee\u548c\u5b83\u7684\u6574\u4e2a\u4ee3\u7801\u5386\u53f2\n$ git clone [url]\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e8c\u914d\u7f6e","title":"\u4e8c\u3001\u914d\u7f6e","text":"<p>Git\u7684\u8bbe\u7f6e\u6587\u4ef6\u4e3a<code>.gitconfig</code>\uff0c\u5b83\u53ef\u4ee5\u5728\u7528\u6237\u4e3b\u76ee\u5f55\u4e0b\uff08\u5168\u5c40\u914d\u7f6e\uff09\uff0c\u4e5f\u53ef\u4ee5\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\uff08\u9879\u76ee\u914d\u7f6e\uff09\u3002</p> <pre><code># \u663e\u793a\u5f53\u524d\u7684Git\u914d\u7f6e\n$ git config --list\n\n# \u7f16\u8f91Git\u914d\u7f6e\u6587\u4ef6\n$ git config -e [--global]\n\n# \u8bbe\u7f6e\u63d0\u4ea4\u4ee3\u7801\u65f6\u7684\u7528\u6237\u4fe1\u606f\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e09\u589e\u52a0\u5220\u9664\u6587\u4ef6","title":"\u4e09\u3001\u589e\u52a0/\u5220\u9664\u6587\u4ef6","text":"<pre><code># \u6dfb\u52a0\u6307\u5b9a\u6587\u4ef6\u5230\u6682\u5b58\u533a\n$ git add [file1] [file2] ...\n\n# \u6dfb\u52a0\u6307\u5b9a\u76ee\u5f55\u5230\u6682\u5b58\u533a\uff0c\u5305\u62ec\u5b50\u76ee\u5f55\n$ git add [dir]\n\n# \u6dfb\u52a0\u5f53\u524d\u76ee\u5f55\u7684\u6240\u6709\u6587\u4ef6\u5230\u6682\u5b58\u533a\n$ git add .\n\n# \u6dfb\u52a0\u6bcf\u4e2a\u53d8\u5316\u524d\uff0c\u90fd\u4f1a\u8981\u6c42\u786e\u8ba4\n# \u5bf9\u4e8e\u540c\u4e00\u4e2a\u6587\u4ef6\u7684\u591a\u5904\u53d8\u5316\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5206\u6b21\u63d0\u4ea4\n$ git add -p\n\n# \u5220\u9664\u5de5\u4f5c\u533a\u6587\u4ef6\uff0c\u5e76\u4e14\u5c06\u8fd9\u6b21\u5220\u9664\u653e\u5165\u6682\u5b58\u533a\n$ git rm [file1] [file2] ...\n\n# \u505c\u6b62\u8ffd\u8e2a\u6307\u5b9a\u6587\u4ef6\uff0c\u4f46\u8be5\u6587\u4ef6\u4f1a\u4fdd\u7559\u5728\u5de5\u4f5c\u533a\n$ git rm --cached [file]\n\n# \u6539\u540d\u6587\u4ef6\uff0c\u5e76\u4e14\u5c06\u8fd9\u4e2a\u6539\u540d\u653e\u5165\u6682\u5b58\u533a\n$ git mv [file-original] [file-renamed]\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u56db\u4ee3\u7801\u63d0\u4ea4","title":"\u56db\u3001\u4ee3\u7801\u63d0\u4ea4","text":"<pre><code># \u63d0\u4ea4\u6682\u5b58\u533a\u5230\u4ed3\u5e93\u533a\n$ git commit -m [message]\n\n# \u63d0\u4ea4\u6682\u5b58\u533a\u7684\u6307\u5b9a\u6587\u4ef6\u5230\u4ed3\u5e93\u533a\n$ git commit [file1] [file2] ... -m [message]\n\n# \u63d0\u4ea4\u5de5\u4f5c\u533a\u81ea\u4e0a\u6b21commit\u4e4b\u540e\u7684\u53d8\u5316\uff0c\u76f4\u63a5\u5230\u4ed3\u5e93\u533a\n$ git commit -a\n\n# \u63d0\u4ea4\u65f6\u663e\u793a\u6240\u6709diff\u4fe1\u606f\n$ git commit -v\n\n# \u4f7f\u7528\u4e00\u6b21\u65b0\u7684commit\uff0c\u66ff\u4ee3\u4e0a\u4e00\u6b21\u63d0\u4ea4\n# \u5982\u679c\u4ee3\u7801\u6ca1\u6709\u4efb\u4f55\u65b0\u53d8\u5316\uff0c\u5219\u7528\u6765\u6539\u5199\u4e0a\u4e00\u6b21commit\u7684\u63d0\u4ea4\u4fe1\u606f\n$ git commit --amend -m [message]\n\n# \u91cd\u505a\u4e0a\u4e00\u6b21commit\uff0c\u5e76\u5305\u62ec\u6307\u5b9a\u6587\u4ef6\u7684\u65b0\u53d8\u5316\n$ git commit --amend [file1] [file2] ...\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e94\u5206\u652f","title":"\u4e94\u3001\u5206\u652f","text":"<pre><code># \u5217\u51fa\u6240\u6709\u672c\u5730\u5206\u652f\n$ git branch\n\n# \u5217\u51fa\u6240\u6709\u8fdc\u7a0b\u5206\u652f\n$ git branch -r\n\n# \u5217\u51fa\u6240\u6709\u672c\u5730\u5206\u652f\u548c\u8fdc\u7a0b\u5206\u652f\n$ git branch -a\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u4f46\u4f9d\u7136\u505c\u7559\u5728\u5f53\u524d\u5206\u652f\n$ git branch [branch-name]\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u5e76\u5207\u6362\u5230\u8be5\u5206\u652f\n$ git checkout -b [branch]\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u6307\u5411\u6307\u5b9acommit\n$ git branch [branch] [commit]\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u4e0e\u6307\u5b9a\u7684\u8fdc\u7a0b\u5206\u652f\u5efa\u7acb\u8ffd\u8e2a\u5173\u7cfb\n$ git branch --track [branch] [remote-branch]\n\n# \u5207\u6362\u5230\u6307\u5b9a\u5206\u652f\uff0c\u5e76\u66f4\u65b0\u5de5\u4f5c\u533a\n$ git checkout [branch-name]\n\n# \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u5206\u652f\n$ git checkout -\n\n# \u5efa\u7acb\u8ffd\u8e2a\u5173\u7cfb\uff0c\u5728\u73b0\u6709\u5206\u652f\u4e0e\u6307\u5b9a\u7684\u8fdc\u7a0b\u5206\u652f\u4e4b\u95f4\n$ git branch --set-upstream [branch] [remote-branch]\n\n# \u5408\u5e76\u6307\u5b9a\u5206\u652f\u5230\u5f53\u524d\u5206\u652f\n$ git merge [branch]\n\n# \u9009\u62e9\u4e00\u4e2acommit\uff0c\u5408\u5e76\u8fdb\u5f53\u524d\u5206\u652f\n$ git cherry-pick [commit]\n\n# \u5220\u9664\u5206\u652f\n$ git branch -d [branch-name]\n\n# \u5220\u9664\u8fdc\u7a0b\u5206\u652f\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u516d\u6807\u7b7e","title":"\u516d\u3001\u6807\u7b7e","text":"<pre><code># \u5217\u51fa\u6240\u6709tag\n$ git tag\n\n# \u65b0\u5efa\u4e00\u4e2atag\u5728\u5f53\u524dcommit\n$ git tag [tag]\n\n# \u65b0\u5efa\u4e00\u4e2atag\u5728\u6307\u5b9acommit\n$ git tag [tag] [commit]\n\n# \u5220\u9664\u672c\u5730tag\n$ git tag -d [tag]\n\n# \u5220\u9664\u8fdc\u7a0btag\n$ git push origin :refs/tags/[tagName]\n\n# \u67e5\u770btag\u4fe1\u606f\n$ git show [tag]\n\n# \u63d0\u4ea4\u6307\u5b9atag\n$ git push [remote] [tag]\n\n# \u63d0\u4ea4\u6240\u6709tag\n$ git push [remote] --tags\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u6307\u5411\u67d0\u4e2atag\n$ git checkout -b [branch] [tag]\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e03\u67e5\u770b\u4fe1\u606f","title":"\u4e03\u3001\u67e5\u770b\u4fe1\u606f","text":"<pre><code># \u663e\u793a\u6709\u53d8\u66f4\u7684\u6587\u4ef6\n$ git status\n\n# \u663e\u793a\u5f53\u524d\u5206\u652f\u7684\u7248\u672c\u5386\u53f2\n$ git log\n\n# \u663e\u793acommit\u5386\u53f2\uff0c\u4ee5\u53ca\u6bcf\u6b21commit\u53d1\u751f\u53d8\u66f4\u7684\u6587\u4ef6\n$ git log --stat\n\n# \u641c\u7d22\u63d0\u4ea4\u5386\u53f2\uff0c\u6839\u636e\u5173\u952e\u8bcd\n$ git log -S [keyword]\n\n# \u663e\u793a\u67d0\u4e2acommit\u4e4b\u540e\u7684\u6240\u6709\u53d8\u52a8\uff0c\u6bcf\u4e2acommit\u5360\u636e\u4e00\u884c\n$ git log [tag] HEAD --pretty=format:%s\n\n# \u663e\u793a\u67d0\u4e2acommit\u4e4b\u540e\u7684\u6240\u6709\u53d8\u52a8\uff0c\u5176\"\u63d0\u4ea4\u8bf4\u660e\"\u5fc5\u987b\u7b26\u5408\u641c\u7d22\u6761\u4ef6\n$ git log [tag] HEAD --grep feature\n\n# \u663e\u793a\u67d0\u4e2a\u6587\u4ef6\u7684\u7248\u672c\u5386\u53f2\uff0c\u5305\u62ec\u6587\u4ef6\u6539\u540d\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# \u663e\u793a\u6307\u5b9a\u6587\u4ef6\u76f8\u5173\u7684\u6bcf\u4e00\u6b21diff\n$ git log -p [file]\n\n# \u663e\u793a\u8fc7\u53bb5\u6b21\u63d0\u4ea4\n$ git log -5 --pretty --oneline\n\n# \u663e\u793a\u6240\u6709\u63d0\u4ea4\u8fc7\u7684\u7528\u6237\uff0c\u6309\u63d0\u4ea4\u6b21\u6570\u6392\u5e8f\n$ git shortlog -sn\n\n# \u663e\u793a\u6307\u5b9a\u6587\u4ef6\u662f\u4ec0\u4e48\u4eba\u5728\u4ec0\u4e48\u65f6\u95f4\u4fee\u6539\u8fc7\n$ git blame [file]\n\n# \u663e\u793a\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u7684\u5dee\u5f02\n$ git diff\n\n# \u663e\u793a\u6682\u5b58\u533a\u548c\u4e0a\u4e00\u4e2acommit\u7684\u5dee\u5f02\n$ git diff --cached [file]\n\n# \u663e\u793a\u5de5\u4f5c\u533a\u4e0e\u5f53\u524d\u5206\u652f\u6700\u65b0commit\u4e4b\u95f4\u7684\u5dee\u5f02\n$ git diff HEAD\n\n# \u663e\u793a\u4e24\u6b21\u63d0\u4ea4\u4e4b\u95f4\u7684\u5dee\u5f02\n$ git diff [first-branch]...[second-branch]\n\n# \u663e\u793a\u4eca\u5929\u4f60\u5199\u4e86\u591a\u5c11\u884c\u4ee3\u7801\n$ git diff --shortstat \"@{0 day ago}\"\n\n# \u663e\u793a\u67d0\u6b21\u63d0\u4ea4\u7684\u5143\u6570\u636e\u548c\u5185\u5bb9\u53d8\u5316\n$ git show [commit]\n\n# \u663e\u793a\u67d0\u6b21\u63d0\u4ea4\u53d1\u751f\u53d8\u5316\u7684\u6587\u4ef6\n$ git show --name-only [commit]\n\n# \u663e\u793a\u67d0\u6b21\u63d0\u4ea4\u65f6\uff0c\u67d0\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\n$ git show [commit]:[filename]\n\n# \u663e\u793a\u5f53\u524d\u5206\u652f\u7684\u6700\u8fd1\u51e0\u6b21\u63d0\u4ea4\n$ git reflog\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u516b\u8fdc\u7a0b\u540c\u6b65","title":"\u516b\u3001\u8fdc\u7a0b\u540c\u6b65","text":"<pre><code># \u4e0b\u8f7d\u8fdc\u7a0b\u4ed3\u5e93\u7684\u6240\u6709\u53d8\u52a8\n$ git fetch [remote]\n\n# \u663e\u793a\u6240\u6709\u8fdc\u7a0b\u4ed3\u5e93\n$ git remote -v\n\n# \u663e\u793a\u67d0\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u4fe1\u606f\n$ git remote show [remote]\n\n# \u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u5e76\u547d\u540d\n$ git remote add [shortname] [url]\n\n# \u53d6\u56de\u8fdc\u7a0b\u4ed3\u5e93\u7684\u53d8\u5316\uff0c\u5e76\u4e0e\u672c\u5730\u5206\u652f\u5408\u5e76\n$ git pull [remote] [branch]\n\n# \u4e0a\u4f20\u672c\u5730\u6307\u5b9a\u5206\u652f\u5230\u8fdc\u7a0b\u4ed3\u5e93\n$ git push [remote] [branch]\n\n# \u5f3a\u884c\u63a8\u9001\u5f53\u524d\u5206\u652f\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u5373\u4f7f\u6709\u51b2\u7a81\n$ git push [remote] --force\n\n# \u63a8\u9001\u6240\u6709\u5206\u652f\u5230\u8fdc\u7a0b\u4ed3\u5e93\n$ git push [remote] --all\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e5d\u64a4\u9500","title":"\u4e5d\u3001\u64a4\u9500","text":"<pre><code># \u6062\u590d\u6682\u5b58\u533a\u7684\u6307\u5b9a\u6587\u4ef6\u5230\u5de5\u4f5c\u533a\n$ git checkout [file]\n\n# \u6062\u590d\u67d0\u4e2acommit\u7684\u6307\u5b9a\u6587\u4ef6\u5230\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\n$ git checkout [commit] [file]\n\n# \u6062\u590d\u6682\u5b58\u533a\u7684\u6240\u6709\u6587\u4ef6\u5230\u5de5\u4f5c\u533a\n$ git checkout .\n\n# \u91cd\u7f6e\u6682\u5b58\u533a\u7684\u6307\u5b9a\u6587\u4ef6\uff0c\u4e0e\u4e0a\u4e00\u6b21commit\u4fdd\u6301\u4e00\u81f4\uff0c\u4f46\u5de5\u4f5c\u533a\u4e0d\u53d8\n$ git reset [file]\n\n# \u91cd\u7f6e\u6682\u5b58\u533a\u4e0e\u5de5\u4f5c\u533a\uff0c\u4e0e\u4e0a\u4e00\u6b21commit\u4fdd\u6301\u4e00\u81f4\n$ git reset --hard\n\n# \u91cd\u7f6e\u5f53\u524d\u5206\u652f\u7684\u6307\u9488\u4e3a\u6307\u5b9acommit\uff0c\u540c\u65f6\u91cd\u7f6e\u6682\u5b58\u533a\uff0c\u4f46\u5de5\u4f5c\u533a\u4e0d\u53d8\n$ git reset [commit]\n\n# \u91cd\u7f6e\u5f53\u524d\u5206\u652f\u7684HEAD\u4e3a\u6307\u5b9acommit\uff0c\u540c\u65f6\u91cd\u7f6e\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\uff0c\u4e0e\u6307\u5b9acommit\u4e00\u81f4\n$ git reset --hard [commit]\n\n# \u91cd\u7f6e\u5f53\u524dHEAD\u4e3a\u6307\u5b9acommit\uff0c\u4f46\u4fdd\u6301\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u4e0d\u53d8\n$ git reset --keep [commit]\n\n# \u65b0\u5efa\u4e00\u4e2acommit\uff0c\u7528\u6765\u64a4\u9500\u6307\u5b9acommit\n# \u540e\u8005\u7684\u6240\u6709\u53d8\u5316\u90fd\u5c06\u88ab\u524d\u8005\u62b5\u6d88\uff0c\u5e76\u4e14\u5e94\u7528\u5230\u5f53\u524d\u5206\u652f\n$ git revert [commit]\n\n# \u6682\u65f6\u5c06\u672a\u63d0\u4ea4\u7684\u53d8\u5316\u79fb\u9664\uff0c\u7a0d\u540e\u518d\u79fb\u5165\n$ git stash\n$ git stash pop\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u5341\u5176\u4ed6","title":"\u5341\u3001\u5176\u4ed6","text":"<pre><code># \u751f\u6210\u4e00\u4e2a\u53ef\u4f9b\u53d1\u5e03\u7684\u538b\u7f29\u5305\n$ git archive\n</code></pre> <p>\uff08\u5b8c\uff09</p>"},{"location":"git/git-remote/","title":"Git\u8fdc\u7a0b\u64cd\u4f5c\u8be6\u89e3","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - Git\u8fdc\u7a0b\u64cd\u4f5c\u8be6\u89e3</p> <p>Git\u662f\u76ee\u524d\u6700\u6d41\u884c\u7684\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\uff0c\u5b66\u4f1aGit\u51e0\u4e4e\u6210\u4e86\u5f00\u53d1\u8005\u7684\u5fc5\u5907\u6280\u80fd\u3002</p> <p>Git\u6709\u5f88\u591a\u4f18\u52bf\uff0c\u5176\u4e2d\u4e4b\u4e00\u5c31\u662f\u8fdc\u7a0b\u64cd\u4f5c\u975e\u5e38\u7b80\u4fbf\u3002\u672c\u6587\u8be6\u7ec6\u4ecb\u7ecd5\u4e2aGit\u547d\u4ee4\uff0c\u5b83\u4eec\u7684\u6982\u5ff5\u548c\u7528\u6cd5\uff0c\u7406\u89e3\u4e86\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4f60\u5c31\u4f1a\u53d1\u73b0Git\u8fdc\u7a0b\u64cd\u4f5c\u5176\u5b9e\u975e\u5e38\u5bb9\u6613\u3002</p> <ul> <li>git clone</li> <li>git remote</li> <li>git fetch</li> <li>git pull</li> <li>git push</li> </ul> <p>\u672c\u6587\u9488\u5bf9Git\u7684\u521d\u7ea7\u7528\u6237\uff0c\u4ece\u6700\u7b80\u5355\u7684\u8bb2\u8d77\uff0c\u4f46\u662f\u9700\u8981\u8bfb\u8005\u5bf9Git\u7684\u57fa\u672c\u7528\u6cd5\u6709\u6240\u4e86\u89e3\u3002\u540c\u65f6\uff0c\u672c\u6587\u6db5\u76d6\u4e0a\u97625\u4e2a\u547d\u4ee4\u7684\u4e3b\u8981\u7528\u6cd5\uff0c\u6240\u4ee5\u5bf9\u4e8e\u719f\u7ec3\u7528\u6237\u4e5f\u6709\u53c2\u8003\u4ef7\u503c\u3002</p> <p></p>"},{"location":"git/git-remote/#\u4e00git-clone","title":"\u4e00\u3001git clone","text":"<p>\u8fdc\u7a0b\u64cd\u4f5c\u7684\u7b2c\u4e00\u6b65\uff0c\u901a\u5e38\u662f\u4ece\u8fdc\u7a0b\u4e3b\u673a\u514b\u9686\u4e00\u4e2a\u4ee3\u7801\u5e93\uff0c\u8fd9\u65f6\u5c31\u8981\u7528\u5230git clone\u547d\u4ee4\u3002</p> <pre><code>git clone &lt;\u4ee3\u7801\u5e93\u7684\u7f51\u5740&gt;\n</code></pre> <p>\u6bd4\u5982\uff0c\u514b\u9686jQuery\u7684\u4ee3\u7801\u5e93\u3002</p> <pre><code>git clone https://github.com/jquery/jquery.git\n</code></pre> <p>\u8be5\u547d\u4ee4\u4f1a\u5728\u672c\u5730\u4e3b\u673a\u751f\u6210\u4e00\u4e2a\u76ee\u5f55\uff0c\u4e0e\u8fdc\u7a0b\u4e3b\u673a\u7684\u4ee3\u7801\u5e93\u540c\u540d\u3002\u5982\u679c\u8981\u6307\u5b9a\u4e0d\u540c\u7684\u76ee\u5f55\u540d\uff0c\u53ef\u4ee5\u5c06\u76ee\u5f55\u540d\u4f5c\u4e3agit clone\u547d\u4ee4\u7684\u7b2c\u4e8c\u4e2a\u9009\u9879\u3002</p> <pre><code>git clone &lt;\u4ee3\u7801\u5e93\u7684\u7f51\u5740&gt; &lt;\u672c\u5730\u76ee\u5f55\u540d&gt;\n</code></pre> <p>git clone\u652f\u6301\u591a\u79cd\u534f\u8bae\uff0c\u9664\u4e86HTTP(s)\u4ee5\u5916\uff0c\u8fd8\u652f\u6301SSH\u3001Git\u3001\u672c\u5730\u6587\u4ef6\u534f\u8bae\u7b49\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50\u3002</p> <pre><code>git clone http[s]://example.com/path/to/repo.git/\ngit clone ssh://example.com/path/to/repo.git/\ngit clone git://example.com/path/to/repo.git/\ngit clone /opt/git/project.git \ngit clone file:///opt/git/project.git\ngit clone ftp[s]://example.com/path/to/repo.git/\ngit clone rsync://example.com/path/to/repo.git/\n</code></pre> <p>SSH\u534f\u8bae\u8fd8\u6709\u53e6\u4e00\u79cd\u5199\u6cd5\u3002</p> <pre><code>git clone [user@]example.com:path/to/repo.git/\n</code></pre> <p>\u901a\u5e38\u6765\u8bf4\uff0cGit\u534f\u8bae\u4e0b\u8f7d\u901f\u5ea6\u6700\u5feb\uff0cSSH\u534f\u8bae\u7528\u4e8e\u9700\u8981\u7528\u6237\u8ba4\u8bc1\u7684\u573a\u5408\u3002\u5404\u79cd\u534f\u8bae\u4f18\u52a3\u7684\u8be6\u7ec6\u8ba8\u8bba\u8bf7\u53c2\u8003\u5b98\u65b9\u6587\u6863\u3002</p>"},{"location":"git/git-remote/#\u4e8cgit-remote","title":"\u4e8c\u3001git remote","text":"<p>\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0cGit\u8981\u6c42\u6bcf\u4e2a\u8fdc\u7a0b\u4e3b\u673a\u90fd\u5fc5\u987b\u6307\u5b9a\u4e00\u4e2a\u4e3b\u673a\u540d\u3002git remote\u547d\u4ee4\u5c31\u7528\u4e8e\u7ba1\u7406\u4e3b\u673a\u540d\u3002</p> <p>\u4e0d\u5e26\u9009\u9879\u7684\u65f6\u5019\uff0cgit remote\u547d\u4ee4\u5217\u51fa\u6240\u6709\u8fdc\u7a0b\u4e3b\u673a\u3002</p> <pre><code>$ git remote\norigin\n</code></pre> <p>\u4f7f\u7528-v\u9009\u9879\uff0c\u53ef\u4ee5\u53c2\u770b\u8fdc\u7a0b\u4e3b\u673a\u7684\u7f51\u5740\u3002</p> <pre><code>$ git remote -v\norigin git@github.com:jquery/jquery.git (fetch)\norigin git@github.com:jquery/jquery.git (push)\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5f53\u524d\u53ea\u6709\u4e00\u53f0\u8fdc\u7a0b\u4e3b\u673a\uff0c\u53eb\u505aorigin\uff0c\u4ee5\u53ca\u5b83\u7684\u7f51\u5740\u3002</p> <p>Git\u89c4\u5b9a\uff0c\u514b\u9686\u4ee3\u7801\u5e93\u7684\u65f6\u5019\uff0c\u6240\u4f7f\u7528\u7684\u8fdc\u7a0b\u4e3b\u673a\u81ea\u52a8\u88ab\u547d\u540d\u4e3aorigin\u3002\u5982\u679c\u60f3\u7528\u5176\u4ed6\u7684\u4e3b\u673a\u540d\uff0c\u9700\u8981\u7528git clone\u547d\u4ee4\u7684-o\u9009\u9879\u6307\u5b9a\u3002</p> <pre><code>$ git clone -o jQuery https://github.com/jquery/jquery.git\n$ git remote\njQuery\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u514b\u9686\u7684\u65f6\u5019\uff0c\u6307\u5b9a\u8fdc\u7a0b\u4e3b\u673a\u53eb\u505ajQuery\u3002</p> <p>git remote show\u547d\u4ee4\u52a0\u4e0a\u4e3b\u673a\u540d\uff0c\u53ef\u4ee5\u67e5\u770b\u8be5\u4e3b\u673a\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</p> <pre><code>git remote show &lt;\u4e3b\u673a\u540d&gt;\n</code></pre> <p>git remote add\u547d\u4ee4\u7528\u4e8e\u6dfb\u52a0\u8fdc\u7a0b\u4e3b\u673a\u3002</p> <pre><code>git remote add &lt;\u4e3b\u673a\u540d&gt; &lt;\u7f51\u5740&gt;\n</code></pre> <p>git remote rm\u547d\u4ee4\u7528\u4e8e\u5220\u9664\u8fdc\u7a0b\u4e3b\u673a\u3002</p> <pre><code>git remote rm &lt;\u4e3b\u673a\u540d&gt;\n</code></pre> <p>git remote rename\u547d\u4ee4\u7528\u4e8e\u8fdc\u7a0b\u4e3b\u673a\u7684\u6539\u540d\u3002</p> <pre><code>git remote rename &lt;\u539f\u4e3b\u673a\u540d&gt; &lt;\u65b0\u4e3b\u673a\u540d&gt;\n</code></pre>"},{"location":"git/git-remote/#\u4e09git-fetch","title":"\u4e09\u3001git fetch","text":"<p>\u4e00\u65e6\u8fdc\u7a0b\u4e3b\u673a\u6709\u4e86\u66f4\u65b0\uff08git\u672f\u8bed\u53eb\u505acommit\uff09\uff0c\u5c31\u9700\u8981\u5c06\u8fd9\u4e9b\u66f4\u65b0\u53d6\u56de\u672c\u5730\uff0c\u8fd9\u65f6\u5c31\u8981\u7528\u5230git fetch\u547d\u4ee4\u3002</p> <pre><code>git fetch &lt;\u8fdc\u7a0b\u4e3b\u673a&gt;\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u5c06\u67d0\u4e2a\u8fdc\u7a0b\u4e3b\u673a\u7684\u66f4\u65b0\uff0c\u5168\u90e8\u53d6\u56de\u672c\u5730\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgit fetch\u53d6\u56de\u6240\u6709\u5206\u652f\uff08branch\uff09\u7684\u66f4\u65b0\u3002\u5982\u679c\u53ea\u60f3\u53d6\u56de\u7279\u5b9a\u5206\u652f\u7684\u66f4\u65b0\uff0c\u53ef\u4ee5\u6307\u5b9a\u5206\u652f\u540d\u3002</p> <pre><code>git fetch &lt;\u8fdc\u7a0b\u4e3b\u673a&gt; &lt;\u5206\u652f\u540d&gt;\n</code></pre> <p>\u6bd4\u5982\uff0c\u53d6\u56deorigin\u4e3b\u673a\u7684master\u5206\u652f\u3002</p> <pre><code>git fetch origin master\n</code></pre> <p>\u6240\u53d6\u56de\u7684\u66f4\u65b0\uff0c\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u8981\u7528\u201c\u8fdc\u7a0b\u4e3b\u673a\u540d/\u5206\u652f\u540d\u201d\u7684\u5f62\u5f0f\u8bfb\u53d6\u3002\u6bd4\u5982origin\u4e3b\u673a\u7684master\uff0c\u5c31\u8981\u7528origin/master\u8bfb\u53d6\u3002</p> <p>git branch\u547d\u4ee4\u7684-r\u9009\u9879\uff0c\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u8fdc\u7a0b\u5206\u652f\uff0c-a\u9009\u9879\u67e5\u770b\u6240\u6709\u5206\u652f\u3002</p> <pre><code>$ git branch -r\norigin/master\n\n$ git branch -a\n* master\n  remotes/origin/master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u672c\u5730\u4e3b\u673a\u7684\u5f53\u524d\u5206\u652f\u662fmaster\uff0c\u8fdc\u7a0b\u5206\u652f\u662forigin/master\u3002</p> <p>\u53d6\u56de\u8fdc\u7a0b\u4e3b\u673a\u7684\u66f4\u65b0\u4ee5\u540e\uff0c\u53ef\u4ee5\u5728\u5b83\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528git checkout\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5206\u652f\u3002</p> <pre><code>git checkout -b newBrach origin/master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5728origin/master\u7684\u57fa\u7840\u4e0a\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\u3002</p> <p>\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528git merge\u547d\u4ee4\u6216\u8005git rebase\u547d\u4ee4\uff0c\u5728\u672c\u5730\u5206\u652f\u4e0a\u5408\u5e76\u8fdc\u7a0b\u5206\u652f\u3002</p> <pre><code>$ git merge origin/master\n# \u6216\u8005\n$ git rebase origin/master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\u5728\u5f53\u524d\u5206\u652f\u4e0a\uff0c\u5408\u5e76origin/master\u3002</p>"},{"location":"git/git-remote/#\u56dbgit-pull","title":"\u56db\u3001git pull","text":"<p>git pull\u547d\u4ee4\u7684\u4f5c\u7528\u662f\uff0c\u53d6\u56de\u8fdc\u7a0b\u4e3b\u673a\u67d0\u4e2a\u5206\u652f\u7684\u66f4\u65b0\uff0c\u518d\u4e0e\u672c\u5730\u7684\u6307\u5b9a\u5206\u652f\u5408\u5e76\u3002\u5b83\u7684\u5b8c\u6574\u683c\u5f0f\u7a0d\u7a0d\u6709\u70b9\u590d\u6742\u3002</p> <pre><code>git pull &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt; &lt;\u8fdc\u7a0b\u5206\u652f\u540d&gt;:&lt;\u672c\u5730\u5206\u652f\u540d&gt;\n</code></pre> <p>\u6bd4\u5982\uff0c\u53d6\u56deorigin\u4e3b\u673a\u7684next\u5206\u652f\uff0c\u4e0e\u672c\u5730\u7684master\u5206\u652f\u5408\u5e76\uff0c\u9700\u8981\u5199\u6210\u4e0b\u9762\u8fd9\u6837\u3002</p> <pre><code>git pull origin next:master\n</code></pre> <p>\u5982\u679c\u8fdc\u7a0b\u5206\u652f\u662f\u4e0e\u5f53\u524d\u5206\u652f\u5408\u5e76\uff0c\u5219\u5192\u53f7\u540e\u9762\u7684\u90e8\u5206\u53ef\u4ee5\u7701\u7565\u3002</p> <pre><code>git pull origin next\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u53d6\u56deorigin/next\u5206\u652f\uff0c\u518d\u4e0e\u5f53\u524d\u5206\u652f\u5408\u5e76\u3002\u5b9e\u8d28\u4e0a\uff0c\u8fd9\u7b49\u540c\u4e8e\u5148\u505agit fetch\uff0c\u518d\u505agit merge\u3002</p> <pre><code>git fetch origin\ngit merge origin/next\n</code></pre> <p>\u5728\u67d0\u4e9b\u573a\u5408\uff0cGit\u4f1a\u81ea\u52a8\u5728\u672c\u5730\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u4e4b\u95f4\uff0c\u5efa\u7acb\u4e00\u79cd\u8ffd\u8e2a\u5173\u7cfb\uff08tracking\uff09\u3002\u6bd4\u5982\uff0c\u5728git clone\u7684\u65f6\u5019\uff0c\u6240\u6709\u672c\u5730\u5206\u652f\u9ed8\u8ba4\u4e0e\u8fdc\u7a0b\u4e3b\u673a\u7684\u540c\u540d\u5206\u652f\uff0c\u5efa\u7acb\u8ffd\u8e2a\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u672c\u5730\u7684master\u5206\u652f\u81ea\u52a8\u201c\u8ffd\u8e2a\u201dorigin/master\u5206\u652f\u3002</p> <p>Git\u4e5f\u5141\u8bb8\u624b\u52a8\u5efa\u7acb\u8ffd\u8e2a\u5173\u7cfb\u3002</p> <pre><code>git branch --set-upstream master origin/next\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u6307\u5b9amaster\u5206\u652f\u8ffd\u8e2aorigin/next\u5206\u652f\u3002</p> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u5b58\u5728\u8ffd\u8e2a\u5173\u7cfb\uff0c\u5c31\u53ef\u4ee5\u7701\u7565\u8fdc\u7a0b\u5206\u652f\u540d\u3002</p> <pre><code>git pull origin\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u672c\u5730\u7684\u5f53\u524d\u5206\u652f\u81ea\u52a8\u4e0eorigin\u4e3b\u673a\u7684\u201c\u8ffd\u8e2a\u5206\u652f\u201d\uff08remote-tracking branch\uff09\u8fdb\u884c\u5408\u5e76\u3002</p> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u53ea\u6709\u4e00\u4e2a\u8ffd\u8e2a\u5206\u652f\uff0c\u8fde\u8fdc\u7a0b\u4e3b\u673a\u540d\u90fd\u53ef\u4ee5\u7701\u7565\u3002</p> <pre><code>git pull\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5f53\u524d\u5206\u652f\u81ea\u52a8\u4e0e\u552f\u4e00\u4e00\u4e2a\u8ffd\u8e2a\u5206\u652f\u8fdb\u884c\u5408\u5e76\u3002</p> <p>\u5982\u679c\u5408\u5e76\u9700\u8981\u91c7\u7528rebase\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528--rebase\u9009\u9879\u3002</p> <pre><code>git pull --rebase &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt; &lt;\u8fdc\u7a0b\u5206\u652f\u540d&gt;:&lt;\u672c\u5730\u5206\u652f\u540d&gt;\n</code></pre>"},{"location":"git/git-remote/#\u4e94git-push","title":"\u4e94\u3001git push","text":"<p>git push\u547d\u4ee4\u7528\u4e8e\u5c06\u672c\u5730\u5206\u652f\u7684\u66f4\u65b0\uff0c\u63a8\u9001\u5230\u8fdc\u7a0b\u4e3b\u673a\u3002\u5b83\u7684\u683c\u5f0f\u4e0egit pull\u547d\u4ee4\u76f8\u4eff\u3002</p> <pre><code>git push &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt; &lt;\u672c\u5730\u5206\u652f\u540d&gt;:&lt;\u8fdc\u7a0b\u5206\u652f\u540d&gt;\n</code></pre> <p>\u6ce8\u610f\uff0c\u5206\u652f\u63a8\u9001\u987a\u5e8f\u7684\u5199\u6cd5\u662f&lt;\u6765\u6e90\u5730&gt;:&lt;\u76ee\u7684\u5730&gt;\uff0c\u6240\u4ee5git pull\u662f&lt;\u8fdc\u7a0b\u5206\u652f&gt;:&lt;\u672c\u5730\u5206\u652f&gt;\uff0c\u800cgit push\u662f&lt;\u672c\u5730\u5206\u652f&gt;:&lt;\u8fdc\u7a0b\u5206\u652f&gt;\u3002</p> <p>\u5982\u679c\u7701\u7565\u8fdc\u7a0b\u5206\u652f\u540d\uff0c\u5219\u8868\u793a\u5c06\u672c\u5730\u5206\u652f\u63a8\u9001\u4e0e\u4e4b\u5b58\u5728\u201c\u8ffd\u8e2a\u5173\u7cfb\u201d\u7684\u8fdc\u7a0b\u5206\u652f\uff08\u901a\u5e38\u4e24\u8005\u540c\u540d\uff09\uff0c\u5982\u679c\u8be5\u8fdc\u7a0b\u5206\u652f\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u88ab\u65b0\u5efa\u3002</p> <pre><code>git push origin master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5c06\u672c\u5730\u7684master\u5206\u652f\u63a8\u9001\u5230origin\u4e3b\u673a\u7684master\u5206\u652f\u3002\u5982\u679c\u540e\u8005\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u88ab\u65b0\u5efa\u3002</p> <p>\u5982\u679c\u7701\u7565\u672c\u5730\u5206\u652f\u540d\uff0c\u5219\u8868\u793a\u5220\u9664\u6307\u5b9a\u7684\u8fdc\u7a0b\u5206\u652f\uff0c\u56e0\u4e3a\u8fd9\u7b49\u540c\u4e8e\u63a8\u9001\u4e00\u4e2a\u7a7a\u7684\u672c\u5730\u5206\u652f\u5230\u8fdc\u7a0b\u5206\u652f\u3002</p> <pre><code>$ git push origin :master\n# \u7b49\u540c\u4e8e\n$ git push origin --delete master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\u5220\u9664origin\u4e3b\u673a\u7684master\u5206\u652f\u3002</p> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u4e4b\u95f4\u5b58\u5728\u8ffd\u8e2a\u5173\u7cfb\uff0c\u5219\u672c\u5730\u5206\u652f\u548c\u8fdc\u7a0b\u5206\u652f\u90fd\u53ef\u4ee5\u7701\u7565\u3002</p> <pre><code>git push origin\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5c06\u5f53\u524d\u5206\u652f\u63a8\u9001\u5230origin\u4e3b\u673a\u7684\u5bf9\u5e94\u5206\u652f\u3002</p> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u53ea\u6709\u4e00\u4e2a\u8ffd\u8e2a\u5206\u652f\uff0c\u90a3\u4e48\u4e3b\u673a\u540d\u90fd\u53ef\u4ee5\u7701\u7565\u3002</p> <pre><code>git push\n</code></pre> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u4e0e\u591a\u4e2a\u4e3b\u673a\u5b58\u5728\u8ffd\u8e2a\u5173\u7cfb\uff0c\u5219\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u9ed8\u8ba4\u4e3b\u673a\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u4efb\u4f55\u9009\u9879\u4f7f\u7528git push\u3002</p> <pre><code>git push -u origin master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u5c06\u672c\u5730\u7684master\u5206\u652f\u63a8\u9001\u5230origin\u4e3b\u673a\uff0c\u540c\u65f6\u6307\u5b9aorigin\u4e3a\u9ed8\u8ba4\u4e3b\u673a\u3002</p> <p>\u4e0d\u5e26\u4efb\u4f55\u9009\u9879\u7684git push\u9ed8\u8ba4\u53ea\u63a8\u9001\u5f53\u524d\u5206\u652f\uff0c\u8fd9\u53eb\u505asimple\u65b9\u5f0f\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cdmatching\u65b9\u5f0f\uff0c\u4f1a\u63a8\u9001\u6240\u6709\u6709\u5bf9\u5e94\u7684\u8fdc\u7a0b\u5206\u652f\u7684\u672c\u5730\u5206\u652f\u3002Git 2.0\u7248\u672c\u4e4b\u524d\uff0c\u9ed8\u8ba4\u91c7\u7528matching\u65b9\u6cd5\uff0c\u73b0\u5728\u6539\u4e3a\u9ed8\u8ba4\u91c7\u7528simple\u65b9\u5f0f\u3002\u5982\u679c\u8981\u4fee\u6539\u8fd9\u4e2a\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u91c7\u7528git config\u547d\u4ee4\u3002</p> <pre><code>$ git config --global push.default matching\n# \u6216\u8005\n$ git config --global push.default simple\n</code></pre> <p>\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u4e0d\u7ba1\u662f\u5426\u5b58\u5728\u5bf9\u5e94\u7684\u8fdc\u7a0b\u5206\u652f\uff0c\u5c06\u672c\u5730\u7684\u6240\u6709\u5206\u652f\u90fd\u63a8\u9001\u5230\u8fdc\u7a0b\u4e3b\u673a\uff0c\u8fd9\u65f6\u9700\u8981\u4f7f\u7528--all\u9009\u9879\u3002</p> <pre><code>git push --all origin\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5c06\u6240\u6709\u672c\u5730\u5206\u652f\u90fd\u63a8\u9001\u5230origin\u4e3b\u673a\u3002</p> <p>\u5982\u679c\u8fdc\u7a0b\u4e3b\u673a\u7684\u7248\u672c\u6bd4\u672c\u5730\u7248\u672c\u66f4\u65b0\uff0c\u63a8\u9001\u65f6Git\u4f1a\u62a5\u9519\uff0c\u8981\u6c42\u5148\u5728\u672c\u5730\u505agit pull\u5408\u5e76\u5dee\u5f02\uff0c\u7136\u540e\u518d\u63a8\u9001\u5230\u8fdc\u7a0b\u4e3b\u673a\u3002\u8fd9\u65f6\uff0c\u5982\u679c\u4f60\u4e00\u5b9a\u8981\u63a8\u9001\uff0c\u53ef\u4ee5\u4f7f\u7528--force\u9009\u9879\u3002</p> <pre><code>git push --force origin \n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u4f7f\u7528--force\u9009\u9879\uff0c\u7ed3\u679c\u5bfc\u81f4\u5728\u8fdc\u7a0b\u4e3b\u673a\u4ea7\u751f\u4e00\u4e2a\u201c\u975e\u76f4\u8fdb\u5f0f\u201d\u7684\u5408\u5e76\uff08non-fast-forward merge\uff09\u3002\u9664\u975e\u4f60\u5f88\u786e\u5b9a\u8981\u8fd9\u6837\u505a\uff0c\u5426\u5219\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u4f7f\u7528--force\u9009\u9879\u3002</p> <p>\u6700\u540e\uff0cgit push\u4e0d\u4f1a\u63a8\u9001\u6807\u7b7e\uff08tag\uff09\uff0c\u9664\u975e\u4f7f\u7528--tags\u9009\u9879\u3002</p> <pre><code>git push origin --tags\n</code></pre> <p>\uff08\u5b8c\uff09</p>"},{"location":"git/git-use-process/","title":"Git \u4f7f\u7528\u89c4\u8303\u6d41\u7a0b","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - Git \u4f7f\u7528\u89c4\u8303\u6d41\u7a0b</p> <p>\u56e2\u961f\u5f00\u53d1\u4e2d\uff0c\u9075\u5faa\u4e00\u4e2a\u5408\u7406\u3001\u6e05\u6670\u7684Git\u4f7f\u7528\u6d41\u7a0b\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002</p> <p>\u5426\u5219\uff0c\u6bcf\u4e2a\u4eba\u90fd\u63d0\u4ea4\u4e00\u5806\u6742\u4e71\u65e0\u7ae0\u7684<code>commit</code>\uff0c\u9879\u76ee\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u96be\u4ee5\u534f\u8c03\u548c\u7ef4\u62a4\u3002</p> <p>\u4e0b\u9762\u662fThoughtBot \u7684Git\u4f7f\u7528\u89c4\u8303\u6d41\u7a0b\u3002\u6211\u4ece\u4e2d\u5b66\u5230\u4e86\u5f88\u591a\uff0c\u63a8\u8350\u4f60\u4e5f\u8fd9\u6837\u4f7f\u7528Git\u3002</p> <p></p>"},{"location":"git/git-use-process/#\u7b2c\u4e00\u6b65\u65b0\u5efa\u5206\u652f","title":"\u7b2c\u4e00\u6b65\uff1a\u65b0\u5efa\u5206\u652f","text":"<p>\u9996\u5148\uff0c\u6bcf\u6b21\u5f00\u53d1\u65b0\u529f\u80fd\uff0c\u90fd\u5e94\u8be5\u65b0\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u5206\u652f\uff08\u8fd9\u65b9\u9762\u53ef\u4ee5\u53c2\u8003\u300aGit\u5206\u652f\u7ba1\u7406\u7b56\u7565\u300b\uff09\u3002</p> <pre><code># \u83b7\u53d6\u4e3b\u5e72\u6700\u65b0\u4ee3\u7801\n$ git checkout master\n$ git pull\n\n# \u65b0\u5efa\u4e00\u4e2a\u5f00\u53d1\u5206\u652fmyfeature\n$ git checkout -b myfeature\n</code></pre>"},{"location":"git/git-use-process/#\u7b2c\u4e8c\u6b65\u63d0\u4ea4\u5206\u652fcommit","title":"\u7b2c\u4e8c\u6b65\uff1a\u63d0\u4ea4\u5206\u652fcommit","text":"<p>\u5206\u652f\u4fee\u6539\u540e\uff0c\u5c31\u53ef\u4ee5\u63d0\u4ea4commit\u4e86\u3002</p> <pre><code>git add --all\ngit status\ngit commit --verbose\n</code></pre> <p><code>git add</code> \u547d\u4ee4\u7684<code>all</code>\u53c2\u6570\uff0c\u8868\u793a\u4fdd\u5b58\u6240\u6709\u53d8\u5316\uff08\u5305\u62ec\u65b0\u5efa\u3001\u4fee\u6539\u548c\u5220\u9664\uff09\u3002\u4eceGit 2.0\u5f00\u59cb\uff0c<code>all</code>\u662f <code>git add</code> \u7684\u9ed8\u8ba4\u53c2\u6570\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528 <code>git add .</code> \u4ee3\u66ff\u3002</p> <p><code>git status</code> \u547d\u4ee4\uff0c\u7528\u6765\u67e5\u770b\u53d1\u751f\u53d8\u52a8\u7684\u6587\u4ef6\u3002</p> <p><code>git commit</code> \u547d\u4ee4\u7684<code>verbose</code>\u53c2\u6570\uff0c\u4f1a\u5217\u51fa diff \u7684\u7ed3\u679c\u3002</p>"},{"location":"git/git-use-process/#\u7b2c\u4e09\u6b65\u64b0\u5199\u63d0\u4ea4\u4fe1\u606f","title":"\u7b2c\u4e09\u6b65\uff1a\u64b0\u5199\u63d0\u4ea4\u4fe1\u606f","text":"<p>\u63d0\u4ea4<code>commit</code>\u65f6\uff0c\u5fc5\u987b\u7ed9\u51fa\u5b8c\u6574\u627c\u8981\u7684\u63d0\u4ea4\u4fe1\u606f\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u8303\u672c\u3002</p> <pre><code>Present-tense summary under 50 characters\n\n* More information about commit (under 72 characters).\n* More information about commit (under 72 characters).\n\nhttp://project.management-system.com/ticket/123\n</code></pre> <p>\u7b2c\u4e00\u884c\u662f\u4e0d\u8d85\u8fc750\u4e2a\u5b57\u7684\u63d0\u8981\uff0c\u7136\u540e\u7a7a\u4e00\u884c\uff0c\u7f57\u5217\u51fa\u6539\u52a8\u539f\u56e0\u3001\u4e3b\u8981\u53d8\u52a8\u3001\u4ee5\u53ca\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u3002\u6700\u540e\uff0c\u63d0\u4f9b\u5bf9\u5e94\u7684\u7f51\u5740\uff08\u6bd4\u5982Bug ticket\uff09\u3002</p>"},{"location":"git/git-use-process/#\u7b2c\u56db\u6b65\u4e0e\u4e3b\u5e72\u540c\u6b65","title":"\u7b2c\u56db\u6b65\uff1a\u4e0e\u4e3b\u5e72\u540c\u6b65","text":"<p>\u5206\u652f\u7684\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u8981\u7ecf\u5e38\u4e0e\u4e3b\u5e72\u4fdd\u6301\u540c\u6b65\u3002</p> <pre><code>git fetch origin\ngit rebase origin/master\n</code></pre>"},{"location":"git/git-use-process/#\u7b2c\u4e94\u6b65\u5408\u5e76commit","title":"\u7b2c\u4e94\u6b65\uff1a\u5408\u5e76commit","text":"<p>\u5206\u652f\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u5f88\u53ef\u80fd\u6709\u4e00\u5806<code>commit</code>\uff0c\u4f46\u662f\u5408\u5e76\u5230\u4e3b\u5e72\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u5e0c\u671b\u53ea\u6709\u4e00\u4e2a\uff08\u6216\u6700\u591a\u4e24\u4e09\u4e2a\uff09<code>commit</code>\uff0c\u8fd9\u6837\u4e0d\u4ec5\u6e05\u6670\uff0c\u4e5f\u5bb9\u6613\u7ba1\u7406\u3002</p> <p>\u90a3\u4e48\uff0c\u600e\u6837\u624d\u80fd\u5c06\u591a\u4e2a<code>commit</code>\u5408\u5e76\u5462\uff1f\u8fd9\u5c31\u8981\u7528\u5230 <code>git rebase</code> \u547d\u4ee4\u3002</p> <pre><code>git rebase -i origin/master\n</code></pre> <p><code>git rebase</code>\u547d\u4ee4\u7684i\u53c2\u6570\u8868\u793a\u4e92\u52a8\uff08interactive\uff09\uff0c\u8fd9\u65f6<code>git</code>\u4f1a\u6253\u5f00\u4e00\u4e2a\u4e92\u52a8\u754c\u9762\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002</p> <p>\u4e0b\u9762\u91c7\u7528Tute Costa\u7684\u4f8b\u5b50\uff0c\u6765\u89e3\u91ca\u600e\u4e48\u5408\u5e76<code>commit</code>\u3002</p> <pre><code>pick 07c5abd Introduce OpenPGP and teach basic usage\npick de9b1eb Fix PostChecker::Post#urls\npick 3e7ee36 Hey kids, stop all the highlighting\npick fa20af3 git interactive rebase, squash, amend\n\n# Rebase 8db7e8b..fa20af3 onto 8db7e8b\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n</code></pre> <p>\u4e0a\u9762\u7684\u4e92\u52a8\u754c\u9762\uff0c\u5148\u5217\u51fa\u5f53\u524d\u5206\u652f\u6700\u65b0\u76844\u4e2a<code>commit</code>\uff08\u8d8a\u4e0b\u9762\u8d8a\u65b0\uff09\u3002\u6bcf\u4e2a<code>commit</code>\u524d\u9762\u6709\u4e00\u4e2a\u64cd\u4f5c\u547d\u4ee4\uff0c\u9ed8\u8ba4\u662f<code>pick</code>\uff0c\u8868\u793a\u8be5\u884c<code>commit</code>\u88ab\u9009\u4e2d\uff0c\u8981\u8fdb\u884c<code>rebase</code>\u64cd\u4f5c\u3002</p> <p>4\u4e2acommit\u7684\u4e0b\u9762\u662f\u4e00\u5927\u5806\u6ce8\u91ca\uff0c\u5217\u51fa\u53ef\u4ee5\u4f7f\u7528\u7684\u547d\u4ee4\u3002</p> <ul> <li>pick\uff1a\u6b63\u5e38\u9009\u4e2d</li> <li>reword\uff1a\u9009\u4e2d\uff0c\u5e76\u4e14\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f\uff1b</li> <li>edit\uff1a\u9009\u4e2d\uff0crebase\u65f6\u4f1a\u6682\u505c\uff0c\u5141\u8bb8\u4f60\u4fee\u6539\u8fd9\u4e2acommit\uff08\u53c2\u8003\u8fd9\u91cc\uff09</li> <li>squash\uff1a\u9009\u4e2d\uff0c\u4f1a\u5c06\u5f53\u524dcommit\u4e0e\u4e0a\u4e00\u4e2acommit\u5408\u5e76</li> <li>fixup\uff1a\u4e0esquash\u76f8\u540c\uff0c\u4f46\u4e0d\u4f1a\u4fdd\u5b58\u5f53\u524dcommit\u7684\u63d0\u4ea4\u4fe1\u606f</li> <li>exec\uff1a\u6267\u884c\u5176\u4ed6shell\u547d\u4ee4</li> </ul> <p>\u4e0a\u9762\u8fd96\u4e2a\u547d\u4ee4\u5f53\u4e2d\uff0c<code>squash</code>\u548c<code>fixup</code>\u53ef\u4ee5\u7528\u6765\u5408\u5e76<code>commit</code>\u3002\u5148\u628a\u9700\u8981\u5408\u5e76\u7684<code>commit</code>\u524d\u9762\u7684\u52a8\u8bcd\uff0c\u6539\u6210<code>squash</code>\uff08\u6216\u8005s\uff09\u3002</p> <pre><code>pick 07c5abd Introduce OpenPGP and teach basic usage\ns de9b1eb Fix PostChecker::Post#urls\ns 3e7ee36 Hey kids, stop all the highlighting\npick fa20af3 git interactive rebase, squash, amend\n</code></pre> <p>\u8fd9\u6837\u4e00\u6539\uff0c\u6267\u884c\u540e\uff0c\u5f53\u524d\u5206\u652f\u53ea\u4f1a\u5269\u4e0b\u4e24\u4e2a<code>commit</code>\u3002\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u7684<code>commit</code>\uff0c\u90fd\u4f1a\u5408\u5e76\u5230\u7b2c\u4e00\u884c\u7684<code>commit</code>\u3002\u63d0\u4ea4\u4fe1\u606f\u4f1a\u540c\u65f6\u5305\u542b\uff0c\u8fd9\u4e09\u4e2a<code>commit</code>\u7684\u63d0\u4ea4\u4fe1\u606f\u3002</p> <pre><code># This is a combination of 3 commits.\n# The first commit's message is:\nIntroduce OpenPGP and teach basic usage\n\n# This is the 2nd commit message:\nFix PostChecker::Post#urls\n\n# This is the 3rd commit message:\nHey kids, stop all the highlighting\n</code></pre> <p>\u5982\u679c\u5c06\u7b2c\u4e09\u884c\u7684<code>squash</code>\u547d\u4ee4\u6539\u6210<code>fixup</code>\u547d\u4ee4\u3002</p> <pre><code>pick 07c5abd Introduce OpenPGP and teach basic usage\ns de9b1eb Fix PostChecker::Post#urls\nf 3e7ee36 Hey kids, stop all the highlighting\npick fa20af3 git interactive rebase, squash, amend\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\u76f8\u540c\uff0c\u8fd8\u662f\u4f1a\u751f\u6210\u4e24\u4e2acommit\uff0c\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u7684commit\uff0c\u90fd\u5408\u5e76\u5230\u7b2c\u4e00\u884c\u7684commit\u3002\u4f46\u662f\uff0c\u65b0\u7684\u63d0\u4ea4\u4fe1\u606f\u91cc\u9762\uff0c\u7b2c\u4e09\u884ccommit\u7684\u63d0\u4ea4\u4fe1\u606f\uff0c\u4f1a\u88ab\u6ce8\u91ca\u6389\u3002</p> <pre><code># This is a combination of 3 commits.\n# The first commit's message is:\nIntroduce OpenPGP and teach basic usage\n\n# This is the 2nd commit message:\nFix PostChecker::Post#urls\n\n# This is the 3rd commit message:\n# Hey kids, stop all the highlighting\n</code></pre> <p><code>squash</code>\u548c<code>fixup</code>\u547d\u4ee4\uff0c\u8fd8\u53ef\u4ee5\u5f53\u4f5c\u547d\u4ee4\u884c\u53c2\u6570\u4f7f\u7528\uff0c\u81ea\u52a8\u5408\u5e76<code>commit</code>\u3002</p> <pre><code>git commit --fixup &lt;commit&gt; \ngit rebase -i --autosquash \n</code></pre> <p>\u8fd9\u4e2a\u7528\u6cd5\u8bf7\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff0c\u8fd9\u91cc\u5c31\u4e0d\u89e3\u91ca\u4e86\u3002</p>"},{"location":"git/git-use-process/#\u7b2c\u516d\u6b65\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93","title":"\u7b2c\u516d\u6b65\uff1a\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93","text":"<p>\u5408\u5e76commit\u540e\uff0c\u5c31\u53ef\u4ee5\u63a8\u9001\u5f53\u524d\u5206\u652f\u5230\u8fdc\u7a0b\u4ed3\u5e93\u4e86\u3002</p> <pre><code>git push --force origin myfeature\n</code></pre> <p><code>git push</code>\u547d\u4ee4\u8981\u52a0\u4e0a<code>force</code>\u53c2\u6570\uff0c\u56e0\u4e3a<code>rebase</code>\u4ee5\u540e\uff0c\u5206\u652f\u5386\u53f2\u6539\u53d8\u4e86\uff0c\u8ddf\u8fdc\u7a0b\u5206\u652f\u4e0d\u4e00\u5b9a\u517c\u5bb9\uff0c\u6709\u53ef\u80fd\u8981\u5f3a\u884c\u63a8\u9001\uff08\u53c2\u89c1\u8fd9\u91cc\uff09\u3002</p>"},{"location":"git/git-use-process/#\u7b2c\u4e03\u6b65\u53d1\u51fapull-request","title":"\u7b2c\u4e03\u6b65\uff1a\u53d1\u51faPull Request","text":"<p>\u63d0\u4ea4\u5230\u8fdc\u7a0b\u4ed3\u5e93\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u53d1\u51fa <code>Pull Request</code> \u5230master\u5206\u652f\uff0c\u7136\u540e\u8bf7\u6c42\u522b\u4eba\u8fdb\u884c\u4ee3\u7801<code>review</code>\uff0c\u786e\u8ba4\u53ef\u4ee5\u5408\u5e76\u5230<code>master</code>\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"git/git-work-flow/","title":"Git \u534f\u4f5c\u6d41\u7a0b","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - Git \u5de5\u4f5c\u6d41\u7a0b</p> <p>Git \u4f5c\u4e3a\u4e00\u4e2a\u6e90\u7801\u7ba1\u7406\u7cfb\u7edf\uff0c\u4e0d\u53ef\u907f\u514d\u6d89\u53ca\u5230\u591a\u4eba\u534f\u4f5c\u3002</p> <p>\u534f\u4f5c\u5fc5\u987b\u6709\u4e00\u4e2a\u89c4\u8303\u7684\u6d41\u7a0b\uff0c\u8ba9\u5927\u5bb6\u6709\u6548\u5730\u5408\u4f5c\uff0c\u4f7f\u5f97\u9879\u76ee\u4e95\u4e95\u6709\u6761\u5730\u53d1\u5c55\u4e0b\u53bb\u3002\"\u534f\u4f5c\u6d41\u7a0b\"\u5728\u82f1\u8bed\u91cc\uff0c\u53eb\u505a\"workflow\"\u6216\u8005\"flow\"\uff0c\u539f\u610f\u662f\u6c34\u6d41\uff0c\u6bd4\u55bb\u9879\u76ee\u50cf\u6c34\u6d41\u90a3\u6837\uff0c\u987a\u7545\u3001\u81ea\u7136\u5730\u5411\u524d\u6d41\u52a8\uff0c\u4e0d\u4f1a\u53d1\u751f\u51b2\u51fb\u3001\u5bf9\u649e\u3001\u751a\u81f3\u6f29\u6da1\u3002</p> <p></p> <p>\u672c\u6587\u4ecb\u7ecd\u4e09\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u534f\u4f5c\u6d41\u7a0b\uff1a</p> <ul> <li>Git flow</li> <li>Github flow</li> <li>Gitlab flow</li> </ul> <p>\u5982\u679c\u4f60\u5bf9Git\u8fd8\u4e0d\u662f\u5f88\u719f\u6089\uff0c\u53ef\u4ee5\u5148\u9605\u8bfb\u4e0b\u9762\u7684\u6587\u7ae0\u3002</p> <ul> <li>\u300aGit \u4f7f\u7528\u89c4\u8303\u6d41\u7a0b\u300b</li> <li>\u300a\u5e38\u7528 Git \u547d\u4ee4\u6e05\u5355\u300b</li> <li>\u300aGit \u8fdc\u7a0b\u64cd\u4f5c\u8be6\u89e3\u300b</li> </ul>"},{"location":"git/git-work-flow/#\u4e00\u529f\u80fd\u9a71\u52a8","title":"\u4e00\u3001\u529f\u80fd\u9a71\u52a8","text":"<p>\u672c\u6587\u7684\u4e09\u79cd\u534f\u4f5c\u6d41\u7a0b\uff0c\u6709\u4e00\u4e2a\u5171\u540c\u70b9\uff1a\u90fd\u91c7\u7528\"\u529f\u80fd\u9a71\u52a8\u5f0f\u5f00\u53d1\"\uff08Feature-driven development\uff0c\u7b80\u79f0FDD\uff09\u3002</p> <p>\u5b83\u6307\u7684\u662f\uff0c\u9700\u6c42\u662f\u5f00\u53d1\u7684\u8d77\u70b9\uff0c\u5148\u6709\u9700\u6c42\u518d\u6709\u529f\u80fd\u5206\u652f\uff08feature branch\uff09\u6216\u8005\u8865\u4e01\u5206\u652f\uff08hotfix branch\uff09\u3002\u5b8c\u6210\u5f00\u53d1\u540e\uff0c\u8be5\u5206\u652f\u5c31\u5408\u5e76\u5230\u4e3b\u5206\u652f\uff0c\u7136\u540e\u88ab\u5220\u9664\u3002</p>"},{"location":"git/git-work-flow/#\u4e8cgit-flow","title":"\u4e8c\u3001Git flow","text":"<p>\u6700\u65e9\u8bde\u751f\u3001\u5e76\u5f97\u5230\u5e7f\u6cdb\u91c7\u7528\u7684\u4e00\u79cd\u534f\u4f5c\u6d41\u7a0b\uff0c\u5c31\u662fGit flow \u3002</p>"},{"location":"git/git-work-flow/#21-\u7279\u70b9","title":"2.1 \u7279\u70b9","text":"<p>\u5b83\u6700\u4e3b\u8981\u7684\u7279\u70b9\u6709\u4e24\u4e2a\u3002</p> <p></p> <p>\u9996\u5148\uff0c\u9879\u76ee\u5b58\u5728\u4e24\u4e2a\u957f\u671f\u5206\u652f\u3002</p> <ul> <li>\u4e3b\u5206\u652f<code>master</code></li> <li>\u5f00\u53d1\u5206\u652f<code>develop</code></li> </ul> <p>\u524d\u8005\u7528\u4e8e\u5b58\u653e\u5bf9\u5916\u53d1\u5e03\u7684\u7248\u672c\uff0c\u4efb\u4f55\u65f6\u5019\u5728\u8fd9\u4e2a\u5206\u652f\u62ff\u5230\u7684\uff0c\u90fd\u662f\u7a33\u5b9a\u7684\u5206\u5e03\u7248\uff1b\u540e\u8005\u7528\u4e8e\u65e5\u5e38\u5f00\u53d1\uff0c\u5b58\u653e\u6700\u65b0\u7684\u5f00\u53d1\u7248\u3002</p> <p>\u5176\u6b21\uff0c\u9879\u76ee\u5b58\u5728\u4e09\u79cd\u77ed\u671f\u5206\u652f\u3002</p> <ul> <li>\u529f\u80fd\u5206\u652f\uff08feature branch\uff09</li> <li>\u8865\u4e01\u5206\u652f\uff08hotfix branch\uff09</li> <li>\u9884\u53d1\u5206\u652f\uff08release branch\uff09</li> </ul> <p>\u4e00\u65e6\u5b8c\u6210\u5f00\u53d1\uff0c\u5b83\u4eec\u5c31\u4f1a\u88ab\u5408\u5e76\u8fdb<code>develop</code>\u6216<code>master</code>\uff0c\u7136\u540e\u88ab\u5220\u9664\u3002</p> <p>Git flow \u7684\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u8bf7\u9605\u8bfb\u6211\u7ffb\u8bd1\u7684\u4e2d\u6587\u7248\u300aGit \u5206\u652f\u7ba1\u7406\u7b56\u7565\u300b\u3002</p>"},{"location":"git/git-work-flow/#22-\u8bc4\u4ef7","title":"2.2 \u8bc4\u4ef7","text":"<p>Git flow\u7684\u4f18\u70b9\u662f\u6e05\u6670\u53ef\u63a7\uff0c\u7f3a\u70b9\u662f\u76f8\u5bf9\u590d\u6742\uff0c\u9700\u8981\u540c\u65f6\u7ef4\u62a4\u4e24\u4e2a\u957f\u671f\u5206\u652f\u3002\u5927\u591a\u6570\u5de5\u5177\u90fd\u5c06<code>master</code>\u5f53\u4f5c\u9ed8\u8ba4\u5206\u652f\uff0c\u53ef\u662f\u5f00\u53d1\u662f\u5728<code>develop</code>\u5206\u652f\u8fdb\u884c\u7684\uff0c\u8fd9\u5bfc\u81f4\u7ecf\u5e38\u8981\u5207\u6362\u5206\u652f\uff0c\u975e\u5e38\u70e6\u4eba\u3002</p> <p>\u66f4\u5927\u95ee\u9898\u5728\u4e8e\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u662f\u57fa\u4e8e\"\u7248\u672c\u53d1\u5e03\"\u7684\uff0c\u76ee\u6807\u662f\u4e00\u6bb5\u65f6\u95f4\u4ee5\u540e\u4ea7\u51fa\u4e00\u4e2a\u65b0\u7248\u672c\u3002\u4f46\u662f\uff0c\u5f88\u591a\u7f51\u7ad9\u9879\u76ee\u662f\"\u6301\u7eed\u53d1\u5e03\"\uff0c\u4ee3\u7801\u4e00\u6709\u53d8\u52a8\uff0c\u5c31\u90e8\u7f72\u4e00\u6b21\u3002\u8fd9\u65f6\uff0c<code>master</code>\u5206\u652f\u548c<code>develop</code>\u5206\u652f\u7684\u5dee\u522b\u4e0d\u5927\uff0c\u6ca1\u5fc5\u8981\u7ef4\u62a4\u4e24\u4e2a\u957f\u671f\u5206\u652f\u3002</p>"},{"location":"git/git-work-flow/#\u4e09github-flow","title":"\u4e09\u3001Github flow","text":"<p>Github flow \u662fGit flow\u7684\u7b80\u5316\u7248\uff0c\u4e13\u95e8\u914d\u5408\"\u6301\u7eed\u53d1\u5e03\"\u3002\u5b83\u662f Github.com \u4f7f\u7528\u7684\u534f\u4f5c\u6d41\u7a0b\u3002</p>"},{"location":"git/git-work-flow/#31-\u6d41\u7a0b","title":"3.1 \u6d41\u7a0b","text":"<p>\u5b83\u53ea\u6709\u4e00\u4e2a\u957f\u671f\u5206\u652f\uff0c\u5c31\u662f<code>master</code>\uff0c\u56e0\u6b64\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\u3002</p> <p>\u5b98\u65b9\u63a8\u8350\u7684\u6d41\u7a0b\u5982\u4e0b\u3002</p> <p></p> \u7b2c\u4e00\u6b65 \u6839\u636e\u9700\u6c42\uff0c\u4ece<code>master</code>\u62c9\u51fa\u65b0\u5206\u652f\uff0c\u4e0d\u533a\u5206\u529f\u80fd\u5206\u652f\u6216\u8865\u4e01\u5206\u652f\u3002 \u7b2c\u4e8c\u6b65 \u65b0\u5206\u652f\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u6216\u8005\u9700\u8981\u8ba8\u8bba\u7684\u65f6\u5019\uff0c\u5c31\u5411<code>master</code>\u53d1\u8d77\u4e00\u4e2apull reqest\uff08\u7b80\u79f0PR\uff09\u3002 \u7b2c\u4e09\u6b65 Pull Request\u65e2\u662f\u4e00\u4e2a\u901a\u77e5\uff0c\u8ba9\u522b\u4eba\u6ce8\u610f\u5230\u4f60\u7684\u8bf7\u6c42\uff0c\u53c8\u662f\u4e00\u79cd\u5bf9\u8bdd\u673a\u5236\uff0c\u5927\u5bb6\u4e00\u8d77\u8bc4\u5ba1\u548c\u8ba8\u8bba\u4f60\u7684\u4ee3\u7801\u3002\u5bf9\u8bdd\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4e0d\u65ad\u63d0\u4ea4\u4ee3\u7801\u3002 \u7b2c\u56db\u6b65 \u4f60\u7684Pull Request\u88ab\u63a5\u53d7\uff0c\u5408\u5e76\u8fdb<code>master</code>\uff0c\u91cd\u65b0\u90e8\u7f72\u540e\uff0c\u539f\u6765\u4f60\u62c9\u51fa\u6765\u7684\u90a3\u4e2a\u5206\u652f\u5c31\u88ab\u5220\u9664\u3002\uff08\u5148\u90e8\u7f72\u518d\u5408\u5e76\u4e5f\u53ef\u3002\uff09"},{"location":"git/git-work-flow/#32-\u8bc4\u4ef7","title":"3.2 \u8bc4\u4ef7","text":"<p>Github flow \u7684\u6700\u5927\u4f18\u70b9\u5c31\u662f\u7b80\u5355\uff0c\u5bf9\u4e8e\"\u6301\u7eed\u53d1\u5e03\"\u7684\u4ea7\u54c1\uff0c\u53ef\u4ee5\u8bf4\u662f\u6700\u5408\u9002\u7684\u6d41\u7a0b\u3002</p> <p>\u95ee\u9898\u5728\u4e8e\u5b83\u7684\u5047\u8bbe\uff1a<code>master</code>\u5206\u652f\u7684\u66f4\u65b0\u4e0e\u4ea7\u54c1\u7684\u53d1\u5e03\u662f\u4e00\u81f4\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>master</code>\u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801\uff0c\u9ed8\u8ba4\u5c31\u662f\u5f53\u524d\u7684\u7ebf\u4e0a\u4ee3\u7801\u3002</p> <p>\u53ef\u662f\uff0c\u6709\u4e9b\u65f6\u5019\u5e76\u975e\u5982\u6b64\uff0c\u4ee3\u7801\u5408\u5e76\u8fdb\u5165<code>master</code>\u5206\u652f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b83\u5c31\u80fd\u7acb\u523b\u53d1\u5e03\u3002\u6bd4\u5982\uff0c\u82f9\u679c\u5546\u5e97\u7684APP\u63d0\u4ea4\u5ba1\u6838\u4ee5\u540e\uff0c\u7b49\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u4e0a\u67b6\u3002\u8fd9\u65f6\uff0c\u5982\u679c\u8fd8\u6709\u65b0\u7684\u4ee3\u7801\u63d0\u4ea4\uff0c<code>master</code>\u5206\u652f\u5c31\u4f1a\u4e0e\u521a\u53d1\u5e03\u7684\u7248\u672c\u4e0d\u4e00\u81f4\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\uff0c\u6709\u4e9b\u516c\u53f8\u6709\u53d1\u5e03\u7a97\u53e3\uff0c\u53ea\u6709\u6307\u5b9a\u65f6\u95f4\u624d\u80fd\u53d1\u5e03\uff0c\u8fd9\u4e5f\u4f1a\u5bfc\u81f4\u7ebf\u4e0a\u7248\u672c\u843d\u540e\u4e8e<code>master</code>\u5206\u652f\u3002</p> <p>\u4e0a\u9762\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ea\u6709<code>master</code>\u4e00\u4e2a\u4e3b\u5206\u652f\u5c31\u4e0d\u591f\u7528\u4e86\u3002\u901a\u5e38\uff0c\u4f60\u4e0d\u5f97\u4e0d\u5728<code>master</code>\u5206\u652f\u4ee5\u5916\uff0c\u53e6\u5916\u65b0\u5efa\u4e00\u4e2a<code>production</code>\u5206\u652f\u8ddf\u8e2a\u7ebf\u4e0a\u7248\u672c\u3002</p>"},{"location":"git/git-work-flow/#\u56dbgitlab-flow","title":"\u56db\u3001Gitlab flow","text":"<p>Gitlab flow \u662f Git flow \u4e0e Github flow \u7684\u7efc\u5408\u3002\u5b83\u5438\u53d6\u4e86\u4e24\u8005\u7684\u4f18\u70b9\uff0c\u65e2\u6709\u9002\u5e94\u4e0d\u540c\u5f00\u53d1\u73af\u5883\u7684\u5f39\u6027\uff0c\u53c8\u6709\u5355\u4e00\u4e3b\u5206\u652f\u7684\u7b80\u5355\u548c\u4fbf\u5229\u3002\u5b83\u662f Gitlab.com \u63a8\u8350\u7684\u505a\u6cd5\u3002</p>"},{"location":"git/git-work-flow/#41-\u4e0a\u6e38\u4f18\u5148","title":"4.1 \u4e0a\u6e38\u4f18\u5148","text":"<p>Gitlab flow \u7684\u6700\u5927\u539f\u5219\u53eb\u505a\"\u4e0a\u6e38\u4f18\u5148\"\uff08upsteam first\uff09\uff0c\u5373\u53ea\u5b58\u5728\u4e00\u4e2a\u4e3b\u5206\u652f<code>master</code>\uff0c\u5b83\u662f\u6240\u6709\u5176\u4ed6\u5206\u652f\u7684\"\u4e0a\u6e38\"\u3002\u53ea\u6709\u4e0a\u6e38\u5206\u652f\u91c7\u7eb3\u7684\u4ee3\u7801\u53d8\u5316\uff0c\u624d\u80fd\u5e94\u7528\u5230\u5176\u4ed6\u5206\u652f\u3002</p> <p>Chromium\u9879\u76ee\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u660e\u786e\u89c4\u5b9a\uff0c\u4e0a\u6e38\u5206\u652f\u4f9d\u6b21\u4e3a\uff1a</p> <ol> <li>Linus Torvalds\u7684\u5206\u652f</li> <li>\u5b50\u7cfb\u7edf\uff08\u6bd4\u5982netdev\uff09\u7684\u5206\u652f</li> <li>\u8bbe\u5907\u5382\u5546\uff08\u6bd4\u5982\u4e09\u661f\uff09\u7684\u5206\u652f</li> </ol>"},{"location":"git/git-work-flow/#42-\u6301\u7eed\u53d1\u5e03","title":"4.2 \u6301\u7eed\u53d1\u5e03","text":"<p>Gitlab flow \u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff0c\u9002\u5e94\u4e0d\u540c\u7684\u5f00\u53d1\u6d41\u7a0b\u3002</p> <p></p> <p>\u5bf9\u4e8e\"\u6301\u7eed\u53d1\u5e03\"\u7684\u9879\u76ee\uff0c\u5b83\u5efa\u8bae\u5728<code>master</code>\u5206\u652f\u4ee5\u5916\uff0c\u518d\u5efa\u7acb\u4e0d\u540c\u7684\u73af\u5883\u5206\u652f\u3002\u6bd4\u5982\uff0c\"\u5f00\u53d1\u73af\u5883\"\u7684\u5206\u652f\u662f<code>master</code>\uff0c\"\u9884\u53d1\u73af\u5883\"\u7684\u5206\u652f\u662f<code>pre-production</code>\uff0c\"\u751f\u4ea7\u73af\u5883\"\u7684\u5206\u652f\u662f<code>production</code>\u3002</p> <p>\u5f00\u53d1\u5206\u652f\u662f\u9884\u53d1\u5206\u652f\u7684\"\u4e0a\u6e38\"\uff0c\u9884\u53d1\u5206\u652f\u53c8\u662f\u751f\u4ea7\u5206\u652f\u7684\"\u4e0a\u6e38\"\u3002\u4ee3\u7801\u7684\u53d8\u5316\uff0c\u5fc5\u987b\u7531\"\u4e0a\u6e38\"\u5411\"\u4e0b\u6e38\"\u53d1\u5c55\u3002\u6bd4\u5982\uff0c\u751f\u4ea7\u73af\u5883\u51fa\u73b0\u4e86bug\uff0c\u8fd9\u65f6\u5c31\u8981\u65b0\u5efa\u4e00\u4e2a\u529f\u80fd\u5206\u652f\uff0c\u5148\u628a\u5b83\u5408\u5e76\u5230<code>master</code>\uff0c\u786e\u8ba4\u6ca1\u6709\u95ee\u9898\uff0c\u518d<code>cherry-pick</code>\u5230<code>pre-production</code>\uff0c\u8fd9\u4e00\u6b65\u4e5f\u6ca1\u6709\u95ee\u9898\uff0c\u624d\u8fdb\u5165<code>production</code>\u3002</p> <p>\u53ea\u6709\u7d27\u6025\u60c5\u51b5\uff0c\u624d\u5141\u8bb8\u8df3\u8fc7\u4e0a\u6e38\uff0c\u76f4\u63a5\u5408\u5e76\u5230\u4e0b\u6e38\u5206\u652f\u3002</p>"},{"location":"git/git-work-flow/#43-\u7248\u672c\u53d1\u5e03","title":"4.3 \u7248\u672c\u53d1\u5e03","text":"<p>\u5bf9\u4e8e\"\u7248\u672c\u53d1\u5e03\"\u7684\u9879\u76ee\uff0c\u5efa\u8bae\u7684\u505a\u6cd5\u662f\u6bcf\u4e00\u4e2a\u7a33\u5b9a\u7248\u672c\uff0c\u90fd\u8981\u4ece<code>master</code>\u5206\u652f\u62c9\u51fa\u4e00\u4e2a\u5206\u652f\uff0c\u6bd4\u5982<code>2-3-stable</code>\u3001<code>2-4-stable</code>\u7b49\u7b49\u3002</p> <p>\u4ee5\u540e\uff0c\u53ea\u6709\u4fee\u8865bug\uff0c\u624d\u5141\u8bb8\u5c06\u4ee3\u7801\u5408\u5e76\u5230\u8fd9\u4e9b\u5206\u652f\uff0c\u5e76\u4e14\u6b64\u65f6\u8981\u66f4\u65b0\u5c0f\u7248\u672c\u53f7\u3002</p>"},{"location":"git/git-work-flow/#\u4e94\u4e00\u4e9b\u5c0f\u6280\u5de7","title":"\u4e94\u3001\u4e00\u4e9b\u5c0f\u6280\u5de7","text":""},{"location":"git/git-work-flow/#51-pull-request","title":"5.1 Pull Request","text":"<p>\u529f\u80fd\u5206\u652f\u5408\u5e76\u8fdb<code>master</code>\u5206\u652f\uff0c\u5fc5\u987b\u901a\u8fc7Pull Request\uff08Gitlab\u91cc\u9762\u53eb\u505a Merge Request\uff09\u3002</p> <p></p> <p>\u524d\u9762\u8bf4\u8fc7\uff0cPull Request\u672c\u8d28\u662f\u4e00\u79cd\u5bf9\u8bdd\u673a\u5236\uff0c\u4f60\u53ef\u4ee5\u5728\u63d0\u4ea4\u7684\u65f6\u5019\uff0c<code>@</code>\u76f8\u5173\u4eba\u5458\u6216\u56e2\u961f\uff0c\u5f15\u8d77\u4ed6\u4eec\u7684\u6ce8\u610f\u3002</p>"},{"location":"git/git-work-flow/#52-protected-branch","title":"5.2 Protected branch","text":"<p><code>master</code>\u5206\u652f\u5e94\u8be5\u53d7\u5230\u4fdd\u62a4\uff0c\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u5206\u652f\uff0c\u4ee5\u53ca\u62e5\u6709\u5ba1\u6279 Pull Request \u7684\u6743\u529b\u3002</p> <p>Github \u548c Gitlab \u90fd\u63d0\u4f9b\"\u4fdd\u62a4\u5206\u652f\"\uff08Protected branch\uff09\u8fd9\u4e2a\u529f\u80fd\u3002</p>"},{"location":"git/git-work-flow/#53-issue","title":"5.3 Issue","text":"<p>Issue \u7528\u4e8e Bug\u8ffd\u8e2a\u548c\u9700\u6c42\u7ba1\u7406\u3002\u5efa\u8bae\u5148\u65b0\u5efa Issue\uff0c\u518d\u65b0\u5efa\u5bf9\u5e94\u7684\u529f\u80fd\u5206\u652f\u3002\u529f\u80fd\u5206\u652f\u603b\u662f\u4e3a\u4e86\u89e3\u51b3\u4e00\u4e2a\u6216\u591a\u4e2a Issue\u3002</p> <p>\u529f\u80fd\u5206\u652f\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u4e0eissue\u7684\u540d\u5b57\u4fdd\u6301\u4e00\u81f4\uff0c\u5e76\u4e14\u4ee5issue\u7684\u7f16\u53f7\u8d77\u9996\uff0c\u6bd4\u5982\"15-require-a-password-to-change-it\"\u3002</p> <p></p> <p>\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u5728\u63d0\u4ea4\u8bf4\u660e\u91cc\u9762\uff0c\u53ef\u4ee5\u5199\u4e0a\"fixes #14\"\u6216\u8005\"closes #67\"\u3002Github\u89c4\u5b9a\uff0c\u53ea\u8981commit message\u91cc\u9762\u6709\u4e0b\u9762\u8fd9\u4e9b\u52a8\u8bcd + \u7f16\u53f7\uff0c\u5c31\u4f1a\u5173\u95ed\u5bf9\u5e94\u7684issue\u3002</p> <ul> <li>close</li> <li>closes</li> <li>closed</li> <li>fix</li> <li>fixes</li> <li>fixed</li> <li>resolve</li> <li>resolves</li> <li>resolved</li> </ul> <p>\u8fd9\u79cd\u65b9\u5f0f\u8fd8\u53ef\u4ee5\u4e00\u6b21\u5173\u95ed\u591a\u4e2aissue\uff0c\u6216\u8005\u5173\u95ed\u5176\u4ed6\u4ee3\u7801\u5e93\u7684issue\uff0c\u683c\u5f0f\u662f<code>username/repository#issue_number</code>\u3002</p> <p>Pull Request\u88ab\u63a5\u53d7\u4ee5\u540e\uff0cissue\u5173\u95ed\uff0c\u539f\u59cb\u5206\u652f\u5c31\u5e94\u8be5\u5220\u9664\u3002\u5982\u679c\u4ee5\u540e\u8be5issue\u91cd\u65b0\u6253\u5f00\uff0c\u65b0\u5206\u652f\u53ef\u4ee5\u590d\u7528\u539f\u6765\u7684\u540d\u5b57\u3002</p>"},{"location":"git/git-work-flow/#54-merge\u8282\u70b9","title":"5.4 Merge\u8282\u70b9","text":"<p>Git\u6709\u4e24\u79cd\u5408\u5e76\uff1a\u4e00\u79cd\u662f\"\u76f4\u8fdb\u5f0f\u5408\u5e76\"\uff08fast forward\uff09\uff0c\u4e0d\u751f\u6210\u5355\u72ec\u7684\u5408\u5e76\u8282\u70b9\uff1b\u53e6\u4e00\u79cd\u662f\"\u975e\u76f4\u8fdb\u5f0f\u5408\u5e76\"\uff08none fast-forword\uff09\uff0c\u4f1a\u751f\u6210\u5355\u72ec\u8282\u70b9\u3002</p> <p>\u524d\u8005\u4e0d\u5229\u4e8e\u4fdd\u6301commit\u4fe1\u606f\u7684\u6e05\u6670\uff0c\u4e5f\u4e0d\u5229\u4e8e\u4ee5\u540e\u7684\u56de\u6eda\uff0c\u5efa\u8bae\u603b\u662f\u91c7\u7528\u540e\u8005\uff08\u5373\u4f7f\u7528<code>--no-ff</code>\u53c2\u6570\uff09\u3002\u53ea\u8981\u53d1\u751f\u5408\u5e76\uff0c\u5c31\u8981\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u5408\u5e76\u8282\u70b9\u3002</p>"},{"location":"git/git-work-flow/#55-squash-\u591a\u4e2acommit","title":"5.5 Squash \u591a\u4e2acommit","text":"<p>\u4e3a\u4e86\u4fbf\u4e8e\u4ed6\u4eba\u9605\u8bfb\u4f60\u7684\u63d0\u4ea4\uff0c\u4e5f\u4fbf\u4e8e<code>cherry-pick</code>\u6216\u64a4\u9500\u4ee3\u7801\u53d8\u5316\uff0c\u5728\u53d1\u8d77Pull Request\u4e4b\u524d\uff0c\u5e94\u8be5\u628a\u591a\u4e2acommit\u5408\u5e76\u6210\u4e00\u4e2a\u3002\uff08\u524d\u63d0\u662f\uff0c\u8be5\u5206\u652f\u53ea\u6709\u4f60\u4e00\u4e2a\u4eba\u5f00\u53d1\uff0c\u4e14\u6ca1\u6709\u8ddf<code>master</code>\u5408\u5e76\u8fc7\u3002\uff09</p> <p></p> <p>\u8fd9\u53ef\u4ee5\u91c7\u7528<code>rebase</code>\u547d\u4ee4\u9644\u5e26\u7684<code>squash</code>\u64cd\u4f5c\uff0c\u5177\u4f53\u65b9\u6cd5\u8bf7\u53c2\u8003\u6211\u5199\u7684\u300aGit \u4f7f\u7528\u89c4\u8303\u6d41\u7a0b\u300b\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/","title":"HTTP \u534f\u8bae\u5165\u95e8","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTP \u534f\u8bae\u5165\u95e8</p> <p>HTTP\u534f\u8bae\u662f\u4e92\u8054\u7f51\u7684\u57fa\u7840\u534f\u8bae\uff0c\u4e5f\u662f\u7f51\u9875\u5f00\u53d1\u7684\u5fc5\u5907\u77e5\u8bc6\uff0c\u6700\u65b0\u7248\u672c HTTP/2 \u66f4\u662f\u8ba9\u5b83\u6210\u4e3a\u6280\u672f\u70ed\u70b9\u3002</p> <p>\u672c\u6587\u4ecb\u7ecdHTTP\u534f\u8bae\u7684\u5386\u53f2\u6f14\u53d8\u548c\u8bbe\u8ba1\u601d\u8def\u3002</p> <p></p>"},{"location":"http/#\u4e00http09","title":"\u4e00\u3001HTTP/0.9","text":"<p>HTTP\u662f\u57fa\u4e8e TCP/IP \u534f\u8bae\u7684\u5e94\u7528\u5c42\u534f\u8bae\u3002\u5b83\u4e0d\u6d89\u53ca\u6570\u636e\u5305\uff08packet\uff09\u4f20\u8f93\uff0c\u4e3b\u8981\u89c4\u5b9a\u4e86\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u683c\u5f0f\uff0c\u9ed8\u8ba4\u4f7f\u752880\u7aef\u53e3\u3002</p> <p>\u6700\u65e9\u7248\u672c\u662f1991\u5e74\u53d1\u5e03\u76840.9\u7248\u3002\u8be5\u7248\u672c\u6781\u5176\u7b80\u5355\uff0c\u53ea\u6709\u4e00\u4e2a\u547d\u4ee4<code>GET</code>\u3002</p> <pre><code>GET /index.html\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0cTCP\u8fde\u63a5\uff08connection\uff09\u5efa\u7acb\u540e\uff0c\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u8bf7\u6c42\uff08request\uff09\u7f51\u9875<code>index.html</code>\u3002</p> <p>\u534f\u8bae\u89c4\u5b9a\uff0c\u670d\u52a1\u5668\u53ea\u80fd\u56de\u5e94HTML\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u80fd\u56de\u5e94\u522b\u7684\u683c\u5f0f\u3002</p> <pre><code>&lt;html&gt;\n  &lt;body&gt;Hello World&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u670d\u52a1\u5668\u53d1\u9001\u5b8c\u6bd5\uff0c\u5c31\u5173\u95edTCP\u8fde\u63a5\u3002</p>"},{"location":"http/#\u4e8chttp10","title":"\u4e8c\u3001HTTP/1.0","text":""},{"location":"http/#21-\u7b80\u4ecb","title":"2.1 \u7b80\u4ecb","text":"<p>1996\u5e745\u6708\uff0cHTTP/1.0 \u7248\u672c\u53d1\u5e03\uff0c\u5185\u5bb9\u5927\u5927\u589e\u52a0\u3002</p> <p>\u9996\u5148\uff0c\u4efb\u4f55\u683c\u5f0f\u7684\u5185\u5bb9\u90fd\u53ef\u4ee5\u53d1\u9001\u3002\u8fd9\u4f7f\u5f97\u4e92\u8054\u7f51\u4e0d\u4ec5\u53ef\u4ee5\u4f20\u8f93\u6587\u5b57\uff0c\u8fd8\u80fd\u4f20\u8f93\u56fe\u50cf\u3001\u89c6\u9891\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8fd9\u4e3a\u4e92\u8054\u7f51\u7684\u5927\u53d1\u5c55\u5960\u5b9a\u4e86\u57fa\u7840\u3002</p> <p>\u5176\u6b21\uff0c\u9664\u4e86<code>GET</code>\u547d\u4ee4\uff0c\u8fd8\u5f15\u5165\u4e86<code>POST</code>\u547d\u4ee4\u548c<code>HEAD</code>\u547d\u4ee4\uff0c\u4e30\u5bcc\u4e86\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u7684\u4e92\u52a8\u624b\u6bb5\u3002</p> <p>\u518d\u6b21\uff0cHTTP\u8bf7\u6c42\u548c\u56de\u5e94\u7684\u683c\u5f0f\u4e5f\u53d8\u4e86\u3002\u9664\u4e86\u6570\u636e\u90e8\u5206\uff0c\u6bcf\u6b21\u901a\u4fe1\u90fd\u5fc5\u987b\u5305\u62ec\u5934\u4fe1\u606f\uff08HTTP header\uff09\uff0c\u7528\u6765\u63cf\u8ff0\u4e00\u4e9b\u5143\u6570\u636e\u3002</p> <p>\u5176\u4ed6\u7684\u65b0\u589e\u529f\u80fd\u8fd8\u5305\u62ec\u72b6\u6001\u7801\uff08status code\uff09\u3001\u591a\u5b57\u7b26\u96c6\u652f\u6301\u3001\u591a\u90e8\u5206\u53d1\u9001\uff08multi-part type\uff09\u3001\u6743\u9650\uff08authorization\uff09\u3001\u7f13\u5b58\uff08cache\uff09\u3001\u5185\u5bb9\u7f16\u7801\uff08content encoding\uff09\u7b49\u3002</p>"},{"location":"http/#22-\u8bf7\u6c42\u683c\u5f0f","title":"2.2 \u8bf7\u6c42\u683c\u5f0f","text":"<p>\u4e0b\u9762\u662f\u4e00\u4e2a1.0\u7248\u7684HTTP\u8bf7\u6c42\u7684\u4f8b\u5b50\u3002</p> <pre><code>GET / HTTP/1.0\nHost: kamranahmed.info\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)\nAccept: */*\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u683c\u5f0f\u4e0e0.9\u7248\u6709\u5f88\u5927\u53d8\u5316\u3002</p> <p>\u7b2c\u4e00\u884c\u662f\u8bf7\u6c42\u547d\u4ee4\uff0c\u5fc5\u987b\u5728\u5c3e\u90e8\u6dfb\u52a0\u534f\u8bae\u7248\u672c\uff08<code>HTTP/1.0</code>\uff09\u3002\u540e\u9762\u5c31\u662f\u591a\u884c\u5934\u4fe1\u606f\uff0c\u63cf\u8ff0\u5ba2\u6237\u7aef\u7684\u60c5\u51b5\u3002</p>"},{"location":"http/#23-\u56de\u5e94\u683c\u5f0f","title":"2.3 \u56de\u5e94\u683c\u5f0f","text":"<p>\u670d\u52a1\u5668\u7684\u56de\u5e94\u5982\u4e0b\u3002</p> <pre><code>HTTP/1.0 200 OK \nContent-Type: text/plain\nContent-Length: 137582\nExpires: Thu, 05 Dec 1997 16:00:00 GMT\nLast-Modified: Wed, 5 August 1996 15:55:28 GMT\nServer: Apache 0.84\n\n&lt;html&gt;\n  &lt;body&gt;Hello World&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u56de\u5e94\u7684\u683c\u5f0f\u662f<code>\u5934\u4fe1\u606f + \u4e00\u4e2a\u7a7a\u884c\uff08</code>\\r\\n<code>\uff09 + \u6570\u636e</code>\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u884c\u662f<code>\u534f\u8bae\u7248\u672c + \u72b6\u6001\u7801\uff08status code\uff09 + \u72b6\u6001\u63cf\u8ff0</code>\u3002</p>"},{"location":"http/#24-content-type-\u5b57\u6bb5","title":"2.4 Content-Type \u5b57\u6bb5","text":"<p>\u5173\u4e8e\u5b57\u7b26\u7684\u7f16\u7801\uff0c1.0\u7248\u89c4\u5b9a\uff0c\u5934\u4fe1\u606f\u5fc5\u987b\u662f ASCII \u7801\uff0c\u540e\u9762\u7684\u6570\u636e\u53ef\u4ee5\u662f\u4efb\u4f55\u683c\u5f0f\u3002\u56e0\u6b64\uff0c\u670d\u52a1\u5668\u56de\u5e94\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u544a\u8bc9\u5ba2\u6237\u7aef\uff0c\u6570\u636e\u662f\u4ec0\u4e48\u683c\u5f0f\uff0c\u8fd9\u5c31\u662f<code>Content-Type</code>\u5b57\u6bb5\u7684\u4f5c\u7528\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684<code>Content-Type</code>\u5b57\u6bb5\u7684\u503c\u3002</p> <ul> <li> <p>text/plain</p> </li> <li> <p>text/html</p> </li> <li>text/css</li> <li>image/jpeg</li> <li>image/png</li> <li>image/svg+xml</li> <li>audio/mp4</li> <li>video/mp4</li> <li>application/javascript</li> <li>application/pdf</li> <li>application/zip</li> <li>application/atom+xml</li> </ul> <p>\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u603b\u79f0\u4e3a<code>MIME type</code>\uff0c\u5305\u542b\u4e00\u7ea7\u7c7b\u578b\u548c\u4e8c\u7ea7\u7c7b\u578b\uff0c\u4e4b\u95f4\u7528\u659c\u6760\u5206\u9694\u3002</p> <p>\u9664\u4e86\u9884\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5382\u5546\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002</p> <pre><code>application/vnd.debian.binary-package\n</code></pre> <p>\u4e0a\u9762\u7684\u7c7b\u578b\u8868\u660e\uff0c\u53d1\u9001\u7684\u662fDebian\u7cfb\u7edf\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u5305\u3002</p> <p><code>MIME type</code>\u8fd8\u53ef\u4ee5\u5728\u5c3e\u90e8\u4f7f\u7528\u5206\u53f7\uff0c\u6dfb\u52a0\u53c2\u6570\u3002</p> <pre><code>Content-Type: text/html; charset=utf-8\n</code></pre> <p>\u4e0a\u9762\u7684\u7c7b\u578b\u8868\u660e\uff0c\u53d1\u9001\u7684\u662f\u7f51\u9875\uff0c\u800c\u4e14\u7f16\u7801\u662fUTF-8\u3002</p> <p><code>MIME type</code>\u4e0d\u4ec5\u7528\u5728HTTP\u534f\u8bae\uff0c\u8fd8\u53ef\u4ee5\u7528\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u6bd4\u5982HTML\u7f51\u9875\u3002</p> <pre><code>&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n&lt;!-- \u7b49\u540c\u4e8e --&gt;\n&lt;meta charset=\"utf-8\" /&gt; \n</code></pre>"},{"location":"http/#25-content-encoding-\u5b57\u6bb5","title":"2.5 Content-Encoding \u5b57\u6bb5","text":"<p>\u7531\u4e8e\u53d1\u9001\u7684\u6570\u636e\u53ef\u4ee5\u662f\u4efb\u4f55\u683c\u5f0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u6570\u636e\u538b\u7f29\u540e\u518d\u53d1\u9001\u3002<code>Content-Encoding</code>\u5b57\u6bb5\u8bf4\u660e\u6570\u636e\u7684\u538b\u7f29\u65b9\u6cd5\u3002</p> <pre><code>Content-Encoding: gzip\nContent-Encoding: compress\nContent-Encoding: deflate\n</code></pre> <p>\u5ba2\u6237\u7aef\u5728\u8bf7\u6c42\u65f6\uff0c\u7528<code>Accept-Encoding</code>\u5b57\u6bb5\u8bf4\u660e\u81ea\u5df1\u53ef\u4ee5\u63a5\u53d7\u54ea\u4e9b\u538b\u7f29\u65b9\u6cd5\u3002</p> <pre><code>Accept-Encoding: gzip, deflate\n</code></pre>"},{"location":"http/#26-\u7f3a\u70b9","title":"2.6 \u7f3a\u70b9","text":"<p>HTTP/1.0 \u7248\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\uff0c\u6bcf\u4e2aTCP\u8fde\u63a5\u53ea\u80fd\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u3002\u53d1\u9001\u6570\u636e\u5b8c\u6bd5\uff0c\u8fde\u63a5\u5c31\u5173\u95ed\uff0c\u5982\u679c\u8fd8\u8981\u8bf7\u6c42\u5176\u4ed6\u8d44\u6e90\uff0c\u5c31\u5fc5\u987b\u518d\u65b0\u5efa\u4e00\u4e2a\u8fde\u63a5\u3002</p> <p>TCP\u8fde\u63a5\u7684\u65b0\u5efa\u6210\u672c\u5f88\u9ad8\uff0c\u56e0\u4e3a\u9700\u8981\u5ba2\u6237\u7aef\u548c\u6d4f\u89c8\u5668\u4e09\u6b21\u63e1\u624b\uff0c\u5e76\u4e14\u5f00\u59cb\u65f6\u53d1\u9001\u901f\u7387\u8f83\u6162\uff08slow start\uff09\u3002\u6240\u4ee5\uff0cHTTP 1.0\u7248\u672c\u7684\u6027\u80fd\u6bd4\u8f83\u5dee\u3002\u968f\u7740\u7f51\u9875\u52a0\u8f7d\u7684\u5916\u90e8\u8d44\u6e90\u8d8a\u6765\u8d8a\u591a\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u6108\u53d1\u7a81\u51fa\u4e86\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6709\u4e9b\u6d4f\u89c8\u5668\u5728\u8bf7\u6c42\u65f6\uff0c\u7528\u4e86\u4e00\u4e2a\u975e\u6807\u51c6\u7684<code>Connection</code>\u5b57\u6bb5\u3002</p> <pre><code>Connection: keep-alive\n</code></pre> <p>\u8fd9\u4e2a\u5b57\u6bb5\u8981\u6c42\u670d\u52a1\u5668\u4e0d\u8981\u5173\u95edTCP\u8fde\u63a5\uff0c\u4ee5\u4fbf\u5176\u4ed6\u8bf7\u6c42\u590d\u7528\u3002\u670d\u52a1\u5668\u540c\u6837\u56de\u5e94\u8fd9\u4e2a\u5b57\u6bb5\u3002</p> <pre><code>Connection: keep-alive\n</code></pre> <p>\u4e00\u4e2a\u53ef\u4ee5\u590d\u7528\u7684TCP\u8fde\u63a5\u5c31\u5efa\u7acb\u4e86\uff0c\u76f4\u5230\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u5668\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u6807\u51c6\u5b57\u6bb5\uff0c\u4e0d\u540c\u5b9e\u73b0\u7684\u884c\u4e3a\u53ef\u80fd\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64\u4e0d\u662f\u6839\u672c\u7684\u89e3\u51b3\u529e\u6cd5\u3002</p>"},{"location":"http/#\u4e09http11","title":"\u4e09\u3001HTTP/1.1","text":"<p>1997\u5e741\u6708\uff0cHTTP/1.1 \u7248\u672c\u53d1\u5e03\uff0c\u53ea\u6bd4 1.0 \u7248\u672c\u665a\u4e86\u534a\u5e74\u3002\u5b83\u8fdb\u4e00\u6b65\u5b8c\u5584\u4e86 HTTP \u534f\u8bae\uff0c\u4e00\u76f4\u7528\u5230\u4e8620\u5e74\u540e\u7684\u4eca\u5929\uff0c\u76f4\u5230\u73b0\u5728\u8fd8\u662f\u6700\u6d41\u884c\u7684\u7248\u672c\u3002</p>"},{"location":"http/#31-\u6301\u4e45\u8fde\u63a5","title":"3.1 \u6301\u4e45\u8fde\u63a5","text":"<p>1.1 \u7248\u7684\u6700\u5927\u53d8\u5316\uff0c\u5c31\u662f\u5f15\u5165\u4e86\u6301\u4e45\u8fde\u63a5\uff08persistent connection\uff09\uff0c\u5373TCP\u8fde\u63a5\u9ed8\u8ba4\u4e0d\u5173\u95ed\uff0c\u53ef\u4ee5\u88ab\u591a\u4e2a\u8bf7\u6c42\u590d\u7528\uff0c\u4e0d\u7528\u58f0\u660e<code>Connection: keep-alive</code>\u3002</p> <p>\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u53d1\u73b0\u5bf9\u65b9\u4e00\u6bb5\u65f6\u95f4\u6ca1\u6709\u6d3b\u52a8\uff0c\u5c31\u53ef\u4ee5\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u3002\u4e0d\u8fc7\uff0c\u89c4\u8303\u7684\u505a\u6cd5\u662f\uff0c\u5ba2\u6237\u7aef\u5728\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u53d1\u9001<code>Connection: close</code>\uff0c\u660e\u786e\u8981\u6c42\u670d\u52a1\u5668\u5173\u95edTCP\u8fde\u63a5\u3002</p> <pre><code>Connection: close\n</code></pre> <p>\u76ee\u524d\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u57df\u540d\uff0c\u5927\u591a\u6570\u6d4f\u89c8\u5668\u5141\u8bb8\u540c\u65f6\u5efa\u7acb6\u4e2a\u6301\u4e45\u8fde\u63a5\u3002</p>"},{"location":"http/#32-\u7ba1\u9053\u673a\u5236","title":"3.2 \u7ba1\u9053\u673a\u5236","text":"<p>1.1 \u7248\u8fd8\u5f15\u5165\u4e86\u7ba1\u9053\u673a\u5236\uff08pipelining\uff09\uff0c\u5373\u5728\u540c\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u591a\u4e2a\u8bf7\u6c42\u3002\u8fd9\u6837\u5c31\u8fdb\u4e00\u6b65\u6539\u8fdb\u4e86HTTP\u534f\u8bae\u7684\u6548\u7387\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5ba2\u6237\u7aef\u9700\u8981\u8bf7\u6c42\u4e24\u4e2a\u8d44\u6e90\u3002\u4ee5\u524d\u7684\u505a\u6cd5\u662f\uff0c\u5728\u540c\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u5148\u53d1\u9001A\u8bf7\u6c42\uff0c\u7136\u540e\u7b49\u5f85\u670d\u52a1\u5668\u505a\u51fa\u56de\u5e94\uff0c\u6536\u5230\u540e\u518d\u53d1\u51faB\u8bf7\u6c42\u3002\u7ba1\u9053\u673a\u5236\u5219\u662f\u5141\u8bb8\u6d4f\u89c8\u5668\u540c\u65f6\u53d1\u51faA\u8bf7\u6c42\u548cB\u8bf7\u6c42\uff0c\u4f46\u662f\u670d\u52a1\u5668\u8fd8\u662f\u6309\u7167\u987a\u5e8f\uff0c\u5148\u56de\u5e94A\u8bf7\u6c42\uff0c\u5b8c\u6210\u540e\u518d\u56de\u5e94B\u8bf7\u6c42\u3002</p>"},{"location":"http/#33-content-length-\u5b57\u6bb5","title":"3.3 Content-Length \u5b57\u6bb5","text":"<p>\u4e00\u4e2aTCP\u8fde\u63a5\u73b0\u5728\u53ef\u4ee5\u4f20\u9001\u591a\u4e2a\u56de\u5e94\uff0c\u52bf\u5fc5\u5c31\u8981\u6709\u4e00\u79cd\u673a\u5236\uff0c\u533a\u5206\u6570\u636e\u5305\u662f\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u56de\u5e94\u7684\u3002\u8fd9\u5c31\u662f<code>Content-length</code>\u5b57\u6bb5\u7684\u4f5c\u7528\uff0c\u58f0\u660e\u672c\u6b21\u56de\u5e94\u7684\u6570\u636e\u957f\u5ea6\u3002</p> <pre><code>Content-Length: 3495\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u544a\u8bc9\u6d4f\u89c8\u5668\uff0c\u672c\u6b21\u56de\u5e94\u7684\u957f\u5ea6\u662f3495\u4e2a\u5b57\u8282\uff0c\u540e\u9762\u7684\u5b57\u8282\u5c31\u5c5e\u4e8e\u4e0b\u4e00\u4e2a\u56de\u5e94\u4e86\u3002</p> <p>\u57281.0\u7248\u4e2d\uff0c<code>Content-Length</code>\u5b57\u6bb5\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u6d4f\u89c8\u5668\u53d1\u73b0\u670d\u52a1\u5668\u5173\u95ed\u4e86TCP\u8fde\u63a5\uff0c\u5c31\u8868\u660e\u6536\u5230\u7684\u6570\u636e\u5305\u5df2\u7ecf\u5168\u4e86\u3002</p>"},{"location":"http/#34-\u5206\u5757\u4f20\u8f93\u7f16\u7801","title":"3.4 \u5206\u5757\u4f20\u8f93\u7f16\u7801","text":"<p>\u4f7f\u7528<code>Content-Length</code>\u5b57\u6bb5\u7684\u524d\u63d0\u6761\u4ef6\u662f\uff0c\u670d\u52a1\u5668\u53d1\u9001\u56de\u5e94\u4e4b\u524d\uff0c\u5fc5\u987b\u77e5\u9053\u56de\u5e94\u7684\u6570\u636e\u957f\u5ea6\u3002</p> <p>\u5bf9\u4e8e\u4e00\u4e9b\u5f88\u8017\u65f6\u7684\u52a8\u6001\u64cd\u4f5c\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u670d\u52a1\u5668\u8981\u7b49\u5230\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\uff0c\u624d\u80fd\u53d1\u9001\u6570\u636e\uff0c\u663e\u7136\u8fd9\u6837\u7684\u6548\u7387\u4e0d\u9ad8\u3002\u66f4\u597d\u7684\u5904\u7406\u65b9\u6cd5\u662f\uff0c\u4ea7\u751f\u4e00\u5757\u6570\u636e\uff0c\u5c31\u53d1\u9001\u4e00\u5757\uff0c\u91c7\u7528\u201c\u6d41\u6a21\u5f0f\u201d\uff08stream\uff09\u53d6\u4ee3\u201c\u7f13\u5b58\u6a21\u5f0f\u201d\uff08buffer\uff09\u3002</p> <p>\u56e0\u6b64\uff0c1.1\u7248\u89c4\u5b9a\u53ef\u4ee5\u4e0d\u4f7f\u7528<code>Content-Length</code>\u5b57\u6bb5\uff0c\u800c\u4f7f\u7528\u201c\u5206\u5757\u4f20\u8f93\u7f16\u7801\u201d\uff08chunked transfer encoding\uff09\u3002\u53ea\u8981\u8bf7\u6c42\u6216\u56de\u5e94\u7684\u5934\u4fe1\u606f\u6709<code>Transfer-Encoding</code>\u5b57\u6bb5\uff0c\u5c31\u8868\u660e\u56de\u5e94\u5c06\u7531\u6570\u91cf\u672a\u5b9a\u7684\u6570\u636e\u5757\u7ec4\u6210\u3002</p> <pre><code>Transfer-Encoding: chunked\n</code></pre> <p>\u6bcf\u4e2a\u975e\u7a7a\u7684\u6570\u636e\u5757\u4e4b\u524d\uff0c\u4f1a\u6709\u4e00\u4e2a16\u8fdb\u5236\u7684\u6570\u503c\uff0c\u8868\u793a\u8fd9\u4e2a\u5757\u7684\u957f\u5ea6\u3002\u6700\u540e\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a0\u7684\u5757\uff0c\u5c31\u8868\u793a\u672c\u6b21\u56de\u5e94\u7684\u6570\u636e\u53d1\u9001\u5b8c\u4e86\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/plain\nTransfer-Encoding: chunked\n\n25\nThis is the data in the first chunk\n\n1C\nand this is the second one\n\n3\ncon\n\n8\nsequence\n\n0\n</code></pre>"},{"location":"http/#35-\u5176\u4ed6\u529f\u80fd","title":"3.5 \u5176\u4ed6\u529f\u80fd","text":"<p>1.1\u7248\u8fd8\u65b0\u589e\u4e86\u8bb8\u591a\u52a8\u8bcd\u65b9\u6cd5\uff1a<code>PUT</code>\u3001<code>PATCH</code>\u3001<code>HEAD</code>\u3001 <code>OPTIONS</code>\u3001<code>DELETE</code>\u3002</p> <p>\u53e6\u5916\uff0c\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u65b0\u589e\u4e86<code>Host</code>\u5b57\u6bb5\uff0c\u7528\u6765\u6307\u5b9a\u670d\u52a1\u5668\u7684\u57df\u540d\u3002</p> <pre><code>Host: www.example.com\n</code></pre> <p>\u6709\u4e86<code>Host</code>\u5b57\u6bb5\uff0c\u5c31\u53ef\u4ee5\u5c06\u8bf7\u6c42\u53d1\u5f80\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u7684\u4e0d\u540c\u7f51\u7ad9\uff0c\u4e3a\u865a\u62df\u4e3b\u673a\u7684\u5174\u8d77\u6253\u4e0b\u4e86\u57fa\u7840\u3002</p>"},{"location":"http/#36-\u7f3a\u70b9","title":"3.6 \u7f3a\u70b9","text":"<p>\u867d\u71361.1\u7248\u5141\u8bb8\u590d\u7528TCP\u8fde\u63a5\uff0c\u4f46\u662f\u540c\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u6240\u6709\u7684\u6570\u636e\u901a\u4fe1\u662f\u6309\u6b21\u5e8f\u8fdb\u884c\u7684\u3002\u670d\u52a1\u5668\u53ea\u6709\u5904\u7406\u5b8c\u4e00\u4e2a\u56de\u5e94\uff0c\u624d\u4f1a\u8fdb\u884c\u4e0b\u4e00\u4e2a\u56de\u5e94\u3002\u8981\u662f\u524d\u9762\u7684\u56de\u5e94\u7279\u522b\u6162\uff0c\u540e\u9762\u5c31\u4f1a\u6709\u8bb8\u591a\u8bf7\u6c42\u6392\u961f\u7b49\u7740\u3002\u8fd9\u79f0\u4e3a\u201c\u961f\u5934\u5835\u585e\u201d\uff08Head-of-line blocking\uff09\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u4e00\u662f\u51cf\u5c11\u8bf7\u6c42\u6570\uff0c\u4e8c\u662f\u540c\u65f6\u591a\u5f00\u6301\u4e45\u8fde\u63a5\u3002\u8fd9\u5bfc\u81f4\u4e86\u5f88\u591a\u7684\u7f51\u9875\u4f18\u5316\u6280\u5de7\uff0c\u6bd4\u5982\u5408\u5e76\u811a\u672c\u548c\u6837\u5f0f\u8868\u3001\u5c06\u56fe\u7247\u5d4c\u5165CSS\u4ee3\u7801\u3001\u57df\u540d\u5206\u7247\uff08domain sharding\uff09\u7b49\u7b49\u3002\u5982\u679cHTTP\u534f\u8bae\u8bbe\u8ba1\u5f97\u66f4\u597d\u4e00\u4e9b\uff0c\u8fd9\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\u662f\u53ef\u4ee5\u907f\u514d\u7684\u3002</p>"},{"location":"http/#\u56dbspdy-\u534f\u8bae","title":"\u56db\u3001SPDY \u534f\u8bae","text":"<p>2009\u5e74\uff0c\u8c37\u6b4c\u516c\u5f00\u4e86\u81ea\u884c\u7814\u53d1\u7684 SPDY \u534f\u8bae\uff0c\u4e3b\u8981\u89e3\u51b3 HTTP/1.1 \u6548\u7387\u4e0d\u9ad8\u7684\u95ee\u9898\u3002</p> <p>\u8fd9\u4e2a\u534f\u8bae\u5728Chrome\u6d4f\u89c8\u5668\u4e0a\u8bc1\u660e\u53ef\u884c\u4ee5\u540e\uff0c\u5c31\u88ab\u5f53\u4f5c HTTP/2 \u7684\u57fa\u7840\uff0c\u4e3b\u8981\u7279\u6027\u90fd\u5728 HTTP/2 \u4e4b\u4e2d\u5f97\u5230\u7ee7\u627f\u3002</p>"},{"location":"http/#\u4e94http2","title":"\u4e94\u3001HTTP/2","text":"<p>2015\u5e74\uff0cHTTP/2 \u53d1\u5e03\u3002\u5b83\u4e0d\u53eb HTTP/2.0\uff0c\u662f\u56e0\u4e3a\u6807\u51c6\u59d4\u5458\u4f1a\u4e0d\u6253\u7b97\u518d\u53d1\u5e03\u5b50\u7248\u672c\u4e86\uff0c\u4e0b\u4e00\u4e2a\u65b0\u7248\u672c\u5c06\u662f HTTP/3\u3002</p>"},{"location":"http/#51-\u4e8c\u8fdb\u5236\u534f\u8bae","title":"5.1 \u4e8c\u8fdb\u5236\u534f\u8bae","text":"<p>HTTP/1.1 \u7248\u7684\u5934\u4fe1\u606f\u80af\u5b9a\u662f\u6587\u672c\uff08ASCII\u7f16\u7801\uff09\uff0c\u6570\u636e\u4f53\u53ef\u4ee5\u662f\u6587\u672c\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u3002HTTP/2 \u5219\u662f\u4e00\u4e2a\u5f7b\u5e95\u7684\u4e8c\u8fdb\u5236\u534f\u8bae\uff0c\u5934\u4fe1\u606f\u548c\u6570\u636e\u4f53\u90fd\u662f\u4e8c\u8fdb\u5236\uff0c\u5e76\u4e14\u7edf\u79f0\u4e3a\u201c\u5e27\u201d\uff08frame\uff09\uff1a\u5934\u4fe1\u606f\u5e27\u548c\u6570\u636e\u5e27\u3002</p> <p>\u4e8c\u8fdb\u5236\u534f\u8bae\u7684\u4e00\u4e2a\u597d\u5904\u662f\uff0c\u53ef\u4ee5\u5b9a\u4e49\u989d\u5916\u7684\u5e27\u3002HTTP/2 \u5b9a\u4e49\u4e86\u8fd1\u5341\u79cd\u5e27\uff0c\u4e3a\u5c06\u6765\u7684\u9ad8\u7ea7\u5e94\u7528\u6253\u597d\u4e86\u57fa\u7840\u3002\u5982\u679c\u4f7f\u7528\u6587\u672c\u5b9e\u73b0\u8fd9\u79cd\u529f\u80fd\uff0c\u89e3\u6790\u6570\u636e\u5c06\u4f1a\u53d8\u5f97\u975e\u5e38\u9ebb\u70e6\uff0c\u4e8c\u8fdb\u5236\u89e3\u6790\u5219\u65b9\u4fbf\u5f97\u591a\u3002</p>"},{"location":"http/#52-\u591a\u5de5","title":"5.2 \u591a\u5de5","text":"<p>HTTP/2 \u590d\u7528TCP\u8fde\u63a5\uff0c\u5728\u4e00\u4e2a\u8fde\u63a5\u91cc\uff0c\u5ba2\u6237\u7aef\u548c\u6d4f\u89c8\u5668\u90fd\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u591a\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\uff0c\u800c\u4e14\u4e0d\u7528\u6309\u7167\u987a\u5e8f\u4e00\u4e00\u5bf9\u5e94\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u201c\u961f\u5934\u5835\u585e\u201d\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5728\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u670d\u52a1\u5668\u540c\u65f6\u6536\u5230\u4e86A\u8bf7\u6c42\u548cB\u8bf7\u6c42\uff0c\u4e8e\u662f\u5148\u56de\u5e94A\u8bf7\u6c42\uff0c\u7ed3\u679c\u53d1\u73b0\u5904\u7406\u8fc7\u7a0b\u975e\u5e38\u8017\u65f6\uff0c\u4e8e\u662f\u5c31\u53d1\u9001A\u8bf7\u6c42\u5df2\u7ecf\u5904\u7406\u597d\u7684\u90e8\u5206\uff0c \u63a5\u7740\u56de\u5e94B\u8bf7\u6c42\uff0c\u5b8c\u6210\u540e\uff0c\u518d\u53d1\u9001A\u8bf7\u6c42\u5269\u4e0b\u7684\u90e8\u5206\u3002</p> <p>\u8fd9\u6837\u53cc\u5411\u7684\u3001\u5b9e\u65f6\u7684\u901a\u4fe1\uff0c\u5c31\u53eb\u505a\u591a\u5de5\uff08Multiplexing\uff09\u3002</p>"},{"location":"http/#53-\u6570\u636e\u6d41","title":"5.3 \u6570\u636e\u6d41","text":"<p>\u56e0\u4e3a HTTP/2 \u7684\u6570\u636e\u5305\u662f\u4e0d\u6309\u987a\u5e8f\u53d1\u9001\u7684\uff0c\u540c\u4e00\u4e2a\u8fde\u63a5\u91cc\u9762\u8fde\u7eed\u7684\u6570\u636e\u5305\uff0c\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u56de\u5e94\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u8981\u5bf9\u6570\u636e\u5305\u505a\u6807\u8bb0\uff0c\u6307\u51fa\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u56de\u5e94\u3002</p> <p>HTTP/2 \u5c06\u6bcf\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\u7684\u6240\u6709\u6570\u636e\u5305\uff0c\u79f0\u4e3a\u4e00\u4e2a\u6570\u636e\u6d41\uff08stream\uff09\u3002\u6bcf\u4e2a\u6570\u636e\u6d41\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u7f16\u53f7\u3002\u6570\u636e\u5305\u53d1\u9001\u7684\u65f6\u5019\uff0c\u90fd\u5fc5\u987b\u6807\u8bb0\u6570\u636e\u6d41ID\uff0c\u7528\u6765\u533a\u5206\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u6570\u636e\u6d41\u3002\u53e6\u5916\u8fd8\u89c4\u5b9a\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6570\u636e\u6d41\uff0cID\u4e00\u5f8b\u4e3a\u5947\u6570\uff0c\u670d\u52a1\u5668\u53d1\u51fa\u7684\uff0cID\u4e3a\u5076\u6570\u3002</p> <p>\u6570\u636e\u6d41\u53d1\u9001\u5230\u4e00\u534a\u7684\u65f6\u5019\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u90fd\u53ef\u4ee5\u53d1\u9001\u4fe1\u53f7\uff08<code>RST_STREAM</code>\u5e27\uff09\uff0c\u53d6\u6d88\u8fd9\u4e2a\u6570\u636e\u6d41\u30021.1\u7248\u53d6\u6d88\u6570\u636e\u6d41\u7684\u552f\u4e00\u65b9\u6cd5\uff0c\u5c31\u662f\u5173\u95edTCP\u8fde\u63a5\u3002\u8fd9\u5c31\u662f\u8bf4\uff0cHTTP/2 \u53ef\u4ee5\u53d6\u6d88\u67d0\u4e00\u6b21\u8bf7\u6c42\uff0c\u540c\u65f6\u4fdd\u8bc1TCP\u8fde\u63a5\u8fd8\u6253\u5f00\u7740\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6\u8bf7\u6c42\u4f7f\u7528\u3002</p> <p>\u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u6d41\u7684\u4f18\u5148\u7ea7\u3002\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u670d\u52a1\u5668\u5c31\u4f1a\u8d8a\u65e9\u56de\u5e94\u3002</p>"},{"location":"http/#54-\u5934\u4fe1\u606f\u538b\u7f29","title":"5.4 \u5934\u4fe1\u606f\u538b\u7f29","text":"<p>HTTP \u534f\u8bae\u4e0d\u5e26\u6709\u72b6\u6001\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u5fc5\u987b\u9644\u4e0a\u6240\u6709\u4fe1\u606f\u3002\u6240\u4ee5\uff0c\u8bf7\u6c42\u7684\u5f88\u591a\u5b57\u6bb5\u90fd\u662f\u91cd\u590d\u7684\uff0c\u6bd4\u5982<code>Cookie</code>\u548c<code>User Agent</code>\uff0c\u4e00\u6a21\u4e00\u6837\u7684\u5185\u5bb9\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u5fc5\u987b\u9644\u5e26\uff0c\u8fd9\u4f1a\u6d6a\u8d39\u5f88\u591a\u5e26\u5bbd\uff0c\u4e5f\u5f71\u54cd\u901f\u5ea6\u3002</p> <p>HTTP/2 \u5bf9\u8fd9\u4e00\u70b9\u505a\u4e86\u4f18\u5316\uff0c\u5f15\u5165\u4e86\u5934\u4fe1\u606f\u538b\u7f29\u673a\u5236\uff08header compression\uff09\u3002\u4e00\u65b9\u9762\uff0c\u5934\u4fe1\u606f\u4f7f\u7528<code>gzip</code>\u6216<code>compress</code>\u538b\u7f29\u540e\u518d\u53d1\u9001\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u540c\u65f6\u7ef4\u62a4\u4e00\u5f20\u5934\u4fe1\u606f\u8868\uff0c\u6240\u6709\u5b57\u6bb5\u90fd\u4f1a\u5b58\u5165\u8fd9\u4e2a\u8868\uff0c\u751f\u6210\u4e00\u4e2a\u7d22\u5f15\u53f7\uff0c\u4ee5\u540e\u5c31\u4e0d\u53d1\u9001\u540c\u6837\u5b57\u6bb5\u4e86\uff0c\u53ea\u53d1\u9001\u7d22\u5f15\u53f7\uff0c\u8fd9\u6837\u5c31\u63d0\u9ad8\u901f\u5ea6\u4e86\u3002</p>"},{"location":"http/#55-\u670d\u52a1\u5668\u63a8\u9001","title":"5.5 \u670d\u52a1\u5668\u63a8\u9001","text":"<p>HTTP/2 \u5141\u8bb8\u670d\u52a1\u5668\u672a\u7ecf\u8bf7\u6c42\uff0c\u4e3b\u52a8\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u8d44\u6e90\uff0c\u8fd9\u53eb\u505a\u670d\u52a1\u5668\u63a8\u9001\uff08server push\uff09\u3002</p> <p>\u5e38\u89c1\u573a\u666f\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e00\u4e2a\u7f51\u9875\uff0c\u8fd9\u4e2a\u7f51\u9875\u91cc\u9762\u5305\u542b\u5f88\u591a\u9759\u6001\u8d44\u6e90\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u6536\u5230\u7f51\u9875\u540e\uff0c\u89e3\u6790HTML\u6e90\u7801\uff0c\u53d1\u73b0\u6709\u9759\u6001\u8d44\u6e90\uff0c\u518d\u53d1\u51fa\u9759\u6001\u8d44\u6e90\u8bf7\u6c42\u3002\u5176\u5b9e\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u9884\u671f\u5230\u5ba2\u6237\u7aef\u8bf7\u6c42\u7f51\u9875\u540e\uff0c\u5f88\u53ef\u80fd\u4f1a\u518d\u8bf7\u6c42\u9759\u6001\u8d44\u6e90\uff0c\u6240\u4ee5\u5c31\u4e3b\u52a8\u628a\u8fd9\u4e9b\u9759\u6001\u8d44\u6e90\u968f\u7740\u7f51\u9875\u4e00\u8d77\u53d1\u7ed9\u5ba2\u6237\u7aef\u4e86\u3002</p>"},{"location":"http/#\u516d\u53c2\u8003\u94fe\u63a5","title":"\u516d\u3001\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>Journey to HTTP/2, by Kamran Ahmed</li> <li>HTTP, by Wikipedia</li> <li>HTTP/2 Specification</li> </ul> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/http-referer/","title":"HTTP Referer \u6559\u7a0b","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTP Referer \u6559\u7a0b</p> <p>HTTP \u8bf7\u6c42\u7684\u5934\u4fe1\u606f\u91cc\u9762\uff0c<code>Referer</code> \u662f\u4e00\u4e2a\u5e38\u89c1\u5b57\u6bb5\uff0c\u63d0\u4f9b\u8bbf\u95ee\u6765\u6e90\u7684\u4fe1\u606f\u3002</p> <p>\u5f88\u591a\u5f00\u53d1\u8005\u77e5\u9053\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u4f46\u662f\u8bf4\u4e0d\u6e05\u5b83\u7684\u5177\u4f53\u7ec6\u8282\u3002\u672c\u6587\u8be6\u7ec6\u4ecb\u7ecd\u8be5\u5b57\u6bb5\u3002</p>"},{"location":"http/http-referer/#\u4e00referer-\u7684\u542b\u4e49","title":"\u4e00\u3001Referer \u7684\u542b\u4e49","text":"<p>\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u8d2d\u4e70\u670d\u52a1\u6216\u52a0\u5165\u4f1a\u5458\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u8981\u6c42\u63d0\u4f9b\u4fe1\u606f\uff1a\u201c\u4f60\u4ece\u54ea\u91cc\u77e5\u9053\u4e86\u6211\u4eec\uff1f\u201d</p> <p></p> <p>\u8fd9\u53eb\u505a\u5f15\u8350\u4eba\uff08referrer\uff09\uff0c\u8c01\u5f15\u8350\u4e86\u4f60\uff1f\u5bf9\u4e8e\u516c\u53f8\u6765\u8bf4\uff0c\u8fd9\u662f\u5f88\u6709\u7528\u7684\u4fe1\u606f\u3002</p> <p>\u4e92\u8054\u7f51\u4e5f\u662f\u4e00\u6837\uff0c\u4f60\u4e0d\u4f1a\u65e0\u7f18\u65e0\u6545\u8bbf\u95ee\u4e00\u4e2a\u7f51\u9875\uff0c\u603b\u662f\u6709\u4eba\u544a\u8bc9\u4f60\uff0c\u53ef\u4ee5\u53bb\u90a3\u91cc\u770b\u770b\u3002\u670d\u52a1\u5668\u4e5f\u60f3\u77e5\u9053\uff0c\u4f60\u7684\u201c\u5f15\u8350\u4eba\u201d\u662f\u8c01\uff1f</p> <p>HTTP \u534f\u8bae\u5728\u8bf7\u6c42\uff08request\uff09\u7684\u5934\u4fe1\u606f\u91cc\u9762\uff0c\u8bbe\u8ba1\u4e86\u4e00\u4e2a<code>Referer</code>\u5b57\u6bb5\uff0c\u7ed9\u51fa\u201c\u5f15\u8350\u7f51\u9875\u201d\u7684 URL\u3002</p> <p></p> <p>\u8fd9\u4e2a\u5b57\u6bb5\u662f\u53ef\u9009\u7684\u3002\u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u81ea\u4e3b\u51b3\u5b9a\u662f\u5426\u52a0\u4e0a\u8be5\u5b57\u6bb5\u3002</p> <p>\u5f88\u6709\u8da3\u7684\u662f\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u7684\u62fc\u5199\u662f\u9519\u7684\u3002<code>Referer</code>\u7684\u6b63\u786e\u62fc\u5199\u662f<code>Referrer</code>\uff0c\u4f46\u662f\u5199\u5165\u6807\u51c6\u7684\u65f6\u5019\uff0c\u4e0d\u77e5\u4e3a\u4f55\uff0c\u6ca1\u4eba\u53d1\u73b0\u5c11\u4e86\u4e00\u4e2a\u5b57\u6bcd<code>r</code>\u3002\u6807\u51c6\u5b9a\u6848\u4ee5\u540e\uff0c\u53ea\u80fd\u5c06\u9519\u5c31\u9519\uff0c\u6240\u6709\u5934\u4fe1\u606f\u7684\u8be5\u5b57\u6bb5\u90fd\u4e00\u5f8b\u9519\u8bef\u62fc\u5199\u6210<code>Referer</code>\u3002</p>"},{"location":"http/http-referer/#\u4e8creferer-\u7684\u53d1\u751f\u573a\u666f","title":"\u4e8c\u3001Referer \u7684\u53d1\u751f\u573a\u666f","text":"<p>\u6d4f\u89c8\u5668\u5411\u670d\u52a1\u5668\u8bf7\u6c42\u8d44\u6e90\u7684\u65f6\u5019\uff0c<code>Referer</code>\u5b57\u6bb5\u7684\u903b\u8f91\u662f\u8fd9\u6837\u7684\uff0c\u7528\u6237\u5728\u5730\u5740\u680f\u8f93\u5165\u7f51\u5740\uff0c\u6216\u8005\u9009\u4e2d\u6d4f\u89c8\u5668\u4e66\u7b7e\uff0c\u5c31\u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002</p> <p>\u4e3b\u8981\u662f\u4ee5\u4e0b\u4e09\u79cd\u573a\u666f\uff0c\u4f1a\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002</p> <p>\uff081\uff09\u7528\u6237\u70b9\u51fb\u7f51\u9875\u4e0a\u7684\u94fe\u63a5\u3002</p> <p>\uff082\uff09\u7528\u6237\u53d1\u9001\u8868\u5355\u3002</p> <p>\uff083\uff09\u7f51\u9875\u52a0\u8f7d\u9759\u6001\u8d44\u6e90\uff0c\u6bd4\u5982\u52a0\u8f7d\u56fe\u7247\u3001\u811a\u672c\u3001\u6837\u5f0f\u3002</p> <pre><code>&lt;!-- \u52a0\u8f7d\u56fe\u7247 --&gt;\n&lt;img src=\"foo.jpg\"&gt;\n&lt;!-- \u52a0\u8f7d\u811a\u672c --&gt;\n&lt;script src=\"foo.js\"&gt;&lt;/script&gt;\n&lt;!-- \u52a0\u8f7d\u6837\u5f0f --&gt;\n&lt;link href=\"foo.css\" rel=\"stylesheet\"&gt;\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e9b\u573a\u666f\uff0c\u6d4f\u89c8\u5668\u90fd\u4f1a\u5c06\u5f53\u524d\u7f51\u5740\u4f5c\u4e3a<code>Referer</code>\u5b57\u6bb5\uff0c\u653e\u5728 HTTP \u8bf7\u6c42\u7684\u5934\u4fe1\u606f\u53d1\u9001\u3002</p> <p>\u6d4f\u89c8\u5668\u7684 JavaScript \u5f15\u64ce\u63d0\u4f9b<code>document.referrer</code>\u5c5e\u6027\uff0c\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u9875\u9762\u7684\u5f15\u8350\u6765\u6e90\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u91c7\u7528\u7684\u662f\u6b63\u786e\u62fc\u5199\u3002</p>"},{"location":"http/http-referer/#\u4e09referer-\u7684\u4f5c\u7528","title":"\u4e09\u3001Referer \u7684\u4f5c\u7528","text":"<p><code>Referer</code>\u5b57\u6bb5\u5b9e\u9645\u4e0a\u544a\u8bc9\u4e86\u670d\u52a1\u5668\uff0c\u7528\u6237\u5728\u8bbf\u95ee\u5f53\u524d\u8d44\u6e90\u4e4b\u524d\u7684\u4f4d\u7f6e\u3002\u8fd9\u5f80\u5f80\u53ef\u4ee5\u7528\u6765\u7528\u6237\u8ddf\u8e2a\u3002</p> <p>\u4e00\u4e2a\u5178\u578b\u7684\u5e94\u7528\u662f\uff0c\u6709\u4e9b\u7f51\u7ad9\u4e0d\u5141\u8bb8\u56fe\u7247\u5916\u94fe\uff0c\u53ea\u6709\u81ea\u5bb6\u7684\u7f51\u7ad9\u624d\u80fd\u663e\u793a\u56fe\u7247\uff0c\u5916\u90e8\u7f51\u7ad9\u52a0\u8f7d\u56fe\u7247\u5c31\u4f1a\u62a5\u9519\u3002\u5b83\u7684\u5b9e\u73b0\u5c31\u662f\u57fa\u4e8e<code>Referer</code>\u5b57\u6bb5\uff0c\u5982\u679c\u8be5\u5b57\u6bb5\u7684\u7f51\u5740\u662f\u81ea\u5bb6\u7f51\u5740\uff0c\u5c31\u653e\u884c\u3002</p> <p>\u7531\u4e8e\u6d89\u53ca\u9690\u79c1\uff0c\u5f88\u591a\u65f6\u5019\u4e0d\u9002\u5408\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002</p> <p>\u8fd9\u91cc\u4e3e\u4e24\u4e2a\u4f8b\u5b50\uff0c\u90fd\u4e0d\u9002\u5408\u66b4\u9732 URL\u3002</p> \u4e00\u4e2a\u662f \u529f\u80fd URL\uff0c\u5373\u6709\u7684 URL \u4e0d\u8981\u767b\u5f55\uff0c\u53ef\u4ee5\u8bbf\u95ee\uff0c\u5c31\u80fd\u76f4\u63a5\u5b8c\u6210\u5bc6\u7801\u91cd\u7f6e\u3001\u90ae\u4ef6\u9000\u8ba2\u7b49\u529f\u80fd\u3002 \u53e6\u4e00\u4e2a\u662f \u5185\u7f51 URL\uff0c\u4e0d\u5e0c\u671b\u5916\u90e8\u7528\u6237\u77e5\u9053\u5185\u7f51\u6709\u8fd9\u6837\u7684\u5730\u5740\u3002<code>Referer</code>\u5b57\u6bb5\u5f88\u53ef\u80fd\u628a\u8fd9\u4e9b URL \u66b4\u9732\u51fa\u53bb\u3002 <p>\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u9700\u8981\u5b9a\u5236<code>Referer</code>\u5b57\u6bb5\u3002\u6bd4\u5982\u793e\u4ea4\u7f51\u7ad9\u4e0a\uff0c\u7528\u6237\u5728\u5bf9\u8bdd\u4e2d\u63d0\u5230\u67d0\u4e2a\u7f51\u5740\u3002\u8fd9\u65f6\uff0c\u4e0d\u5e0c\u671b\u66b4\u9732\u7528\u6237\u6240\u5728\u7684\u539f\u59cb\u7f51\u5740\uff0c\u4f46\u662f\u53ef\u4ee5\u66b4\u9732\u793e\u4ea4\u7f51\u7ad9\u7684\u57df\u540d\uff0c\u8ba9\u5bf9\u65b9\u77e5\u9053\uff0c\u662f\u6211\u8d21\u732e\u4e86\u4f60\u7684\u6d41\u91cf\u3002</p>"},{"location":"http/http-referer/#\u56dbrel\u5c5e\u6027","title":"\u56db\u3001<code>rel</code>\u5c5e\u6027","text":"<p>\u7531\u4e8e\u4e0a\u4e00\u8282\u7684\u539f\u56e0\uff0c\u6d4f\u89c8\u5668\u63d0\u4f9b\u4e00\u7cfb\u5217\u624b\u6bb5\uff0c\u5141\u8bb8\u6539\u53d8\u9ed8\u8ba4\u7684<code>Referer</code>\u884c\u4e3a\u3002</p> <p>\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u53ef\u4ee5\u6539\u53d8\u6d4f\u89c8\u5668\u672c\u8eab\u7684\u5168\u5c40\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u5b89\u88c5\u6d4f\u89c8\u5668\u6269\u5c55\u3002\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u3002</p> <p>\u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\uff0c<code>rel=\"noreferrer\"</code>\u5c5e\u6027\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u65b9\u6cd5\u3002<code>&lt;a&gt;</code>\u3001<code>&lt;area&gt;</code>\u548c<code>&lt;form&gt;</code>\u4e09\u4e2a\u6807\u7b7e\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5c5e\u6027\uff0c\u4e00\u65e6\u4f7f\u7528\uff0c\u8be5\u5143\u7d20\u5c31\u4e0d\u4f1a\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002</p> <pre><code>&lt;a href=\"...\" rel=\"noreferrer\" target=\"_blank\"&gt;xxx&lt;/a&gt;\n</code></pre> <p>\u4e0a\u9762\u94fe\u63a5\u70b9\u51fb\u4ea7\u751f\u7684 HTTP \u8bf7\u6c42\uff0c\u4e0d\u4f1a\u5e26\u6709<code>Referer</code>\u5b57\u6bb5\u3002</p> <p>\u6ce8\u610f\uff0c<code>rel=\"noreferrer\"</code>\u91c7\u7528\u7684\u662f\u6b63\u786e\u7684\u62fc\u5199\u3002</p>"},{"location":"http/http-referer/#\u4e94referrer-policy-\u7684\u503c","title":"\u4e94\u3001Referrer Policy \u7684\u503c","text":"<p><code>rel</code>\u5c5e\u6027\u53ea\u80fd\u5b9a\u5236\u5355\u4e2a\u5143\u7d20\u7684<code>Referer</code>\u884c\u4e3a\uff0c\u800c\u4e14\u9009\u62e9\u6bd4\u8f83\u5c11\uff0c\u53ea\u80fd\u53d1\u9001\u6216\u4e0d\u53d1\u9001\u3002W3C \u4e3a\u6b64\u5236\u5b9a\u4e86\u66f4\u5f3a\u5927\u7684 Referrer Policy\u3002</p> <p>Referrer Policy \u53ef\u4ee5\u8bbe\u5b9a8\u4e2a\u503c\u3002</p> \uff081\uff09no-referrer \u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002 \uff082\uff09no-referrer-when-downgrade \u5982\u679c\u4ece HTTPS \u7f51\u5740\u94fe\u63a5\u5230 HTTP \u7f51\u5740\uff0c\u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\uff0c\u5176\u4ed6\u60c5\u51b5\u53d1\u9001\uff08\u5305\u62ec HTTP \u7f51\u5740\u94fe\u63a5\u5230 HTTP \u7f51\u5740\uff09\u3002\u8fd9\u662f\u6d4f\u89c8\u5668\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \uff083\uff09same-origin \u94fe\u63a5\u5230\u540c\u6e90\u7f51\u5740\uff08\u534f\u8bae+\u57df\u540d+\u7aef\u53e3 \u90fd\u76f8\u540c\uff09\u65f6\u53d1\u9001\uff0c\u5426\u5219\u4e0d\u53d1\u9001\u3002\u6ce8\u610f\uff0c<code>https://foo.com</code>\u94fe\u63a5\u5230<code>http://foo.com</code>\u4e5f\u5c5e\u4e8e\u8de8\u57df\u3002 \uff084\uff09origin <code>Referer</code>\u5b57\u6bb5\u4e00\u5f8b\u53ea\u53d1\u9001\u6e90\u4fe1\u606f\uff08\u534f\u8bae+\u57df\u540d+\u7aef\u53e3\uff09\uff0c\u4e0d\u7ba1\u662f\u5426\u8de8\u57df\u3002 \uff085\uff09strict-origin \u5982\u679c\u4ece HTTPS \u7f51\u5740\u94fe\u63a5\u5230 HTTP \u7f51\u5740\uff0c\u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\uff0c\u5176\u4ed6\u60c5\u51b5\u53ea\u53d1\u9001\u6e90\u4fe1\u606f\u3002 \uff086\uff09origin-when-cross-origin \u540c\u6e90\u65f6\uff0c\u53d1\u9001\u5b8c\u6574\u7684<code>Referer</code>\u5b57\u6bb5\uff0c\u8de8\u57df\u65f6\u53d1\u9001\u6e90\u4fe1\u606f\u3002 \uff087\uff09strict-origin-when-cross-origin \u540c\u6e90\u65f6\uff0c\u53d1\u9001\u5b8c\u6574\u7684<code>Referer</code>\u5b57\u6bb5\uff1b\u8de8\u57df\u65f6\uff0c\u5982\u679c HTTPS \u7f51\u5740\u94fe\u63a5\u5230 HTTP \u7f51\u5740\uff0c\u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\uff0c\u5426\u5219\u53d1\u9001\u6e90\u4fe1\u606f\u3002 \uff088\uff09unsafe-url <code>Referer</code>\u5b57\u6bb5\u5305\u542b\u6e90\u4fe1\u606f\u3001\u8def\u5f84\u548c\u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u4e0d\u5305\u542b\u951a\u70b9\u3001\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002"},{"location":"http/http-referer/#\u516dreferrer-policy-\u7684\u7528\u6cd5","title":"\u516d\u3001Referrer Policy \u7684\u7528\u6cd5","text":"<p>Referrer Policy \u6709\u591a\u79cd\u4f7f\u7528\u65b9\u6cd5\u3002</p> \uff081\uff09HTTP \u5934\u4fe1\u606f <p>\u670d\u52a1\u5668\u53d1\u9001\u7f51\u9875\u7684\u65f6\u5019\uff0c\u901a\u8fc7 HTTP \u5934\u4fe1\u606f\u7684<code>Referrer-Policy</code>\u544a\u8bc9\u6d4f\u89c8\u5668\u3002</p> <pre><code>Referrer-Policy: origin\n</code></pre> \uff082\uff09<code>&lt;meta&gt;</code>\u6807\u7b7e <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>&lt;meta&gt;</code>\u6807\u7b7e\uff0c\u5728\u7f51\u9875\u5934\u90e8\u8bbe\u7f6e\u3002</p> <pre><code>&lt;meta name=\"referrer\" content=\"origin\"&gt;\n</code></pre> \uff083\uff09<code>referrerpolicy</code>\u5c5e\u6027 <p><code>&lt;a&gt;</code>\u3001<code>&lt;area&gt;</code>\u3001<code>&lt;img&gt;</code>\u3001<code>&lt;iframe&gt;</code>\u548c<code>&lt;link&gt;</code>\u6807\u7b7e\uff0c\u53ef\u4ee5\u8bbe\u7f6e<code>referrerpolicy</code> \u5c5e\u6027\u3002</p> <pre><code>&lt;a href=\"...\" referrerpolicy=\"origin\" target=\"_blank\"&gt;xxx&lt;/a&gt;\n</code></pre>"},{"location":"http/http-referer/#\u4e03\u9000\u51fa\u9875\u9762\u91cd\u5b9a\u5411","title":"\u4e03\u3001\u9000\u51fa\u9875\u9762\u91cd\u5b9a\u5411","text":"<p>\u8fd8\u6709\u4e00\u79cd\u6bd4\u8f83\u8001\u5f0f\u7684\u6280\u5de7\uff0c\u4f46\u662f\u975e\u5e38\u6709\u6548\uff0c\u53ef\u4ee5\u9690\u85cf\u6389\u539f\u59cb\u7f51\u5740\uff0c\u8c37\u6b4c\u548c Facebook \u90fd\u5728\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002</p> <p>\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u76f4\u63a5\u8df3\u8f6c\uff0c\u800c\u662f\u901a\u8fc7\u4e00\u4e2a\u91cd\u5b9a\u5411\u7f51\u5740\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002</p> <pre><code>&lt;a  href=\"/exit.php?url=http%3A%2F%2Fexample.com\"&gt;Example.com&lt;/a&gt;\n</code></pre> <p>\u4e0a\u9762\u7f51\u5740\u4e2d\uff0c\u5148\u8df3\u8f6c\u5230<code>/exit.php</code>\uff0c\u7136\u540e\u518d\u8df3\u8f6c\u5230\u76ee\u6807\u7f51\u5740\u3002\u8fd9\u65f6\uff0c<code>Referer</code>\u5b57\u6bb5\u5c31\u4e0d\u4f1a\u5305\u542b\u539f\u59cb\u7f51\u5740\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/https/","title":"HTTPS \u5347\u7ea7\u6307\u5357","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTPS \u5347\u7ea7\u6307\u5357</p> <p>\u4e0a\u4e00\u7bc7\u6587\u7ae0\u6211\u4ecb\u7ecd\u4e86 HTTP/2 \u534f\u8bae \uff0c\u5b83\u53ea\u6709\u5728 HTTPS \u73af\u5883\u624d\u4f1a\u751f\u6548\u3002</p> <p>\u4e3a\u4e86\u5347\u7ea7\u5230 HTTP/2 \u534f\u8bae\uff0c\u5fc5\u987b\u5148\u542f\u7528 HTTPS\u3002\u5982\u679c\u4f60\u4e0d\u4e86\u89e3 HTTPS \u534f\u8bae\uff08\u5b66\u540d TLS \u534f\u8bae\uff09\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u4ee5\u524d\u7684\u6587\u7ae0\u3002</p> <ul> <li>\u300aHTTPS \u534f\u8bae\u6982\u8ff0\u300b</li> <li>\u300a\u56fe\u89e3 HTTPS \u534f\u8bae\u300b</li> <li>\u300aHTTPS \u534f\u8bae\u7684\u4e03\u4e2a\u8bef\u89e3\u300b</li> <li>\u300aHTTPS \u534f\u8bae\u7684\u5ef6\u8fdf\u6709\u591a\u5927\uff1f\u300b</li> </ul> <p>\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u5c06\u4e00\u4e2a HTTP \u7f51\u7ad9\u5347\u7ea7\u5230 HTTPS \u3002</p> <p></p>"},{"location":"http/https/#\u4e00\u83b7\u53d6\u8bc1\u4e66","title":"\u4e00\u3001\u83b7\u53d6\u8bc1\u4e66","text":"<p>\u5347\u7ea7\u5230HTTPS\u534f\u8bae\u7684\u7b2c\u4e00\u6b65\uff0c\u5c31\u662f\u8981\u83b7\u5f97\u4e00\u5f20\u8bc1\u4e66\u3002</p> <p>\u8bc1\u4e66\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u91cc\u9762\u5305\u542b\u7ecf\u8fc7\u8ba4\u8bc1\u7684\u7f51\u7ad9\u516c\u94a5\u548c\u4e00\u4e9b\u5143\u6570\u636e\uff0c\u8981\u4ece\u7ecf\u9500\u5546\u8d2d\u4e70\u3002</p> <ul> <li>GoGetSSL</li> <li>SSLs.com</li> <li>SSLmate.com</li> </ul> <p>\u8bc1\u4e66\u6709\u5f88\u591a\u7c7b\u578b\uff0c\u9996\u5148\u5206\u4e3a\u4e09\u79cd\u8ba4\u8bc1\u7ea7\u522b\u3002</p> <p></p> <ul> <li>\u57df\u540d\u8ba4\u8bc1\uff08Domain Validation\uff09\uff1a\u6700\u4f4e\u7ea7\u522b\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u786e\u8ba4\u7533\u8bf7\u4eba\u62e5\u6709\u8fd9\u4e2a\u57df\u540d\u3002\u5bf9\u4e8e\u8fd9\u79cd\u8bc1\u4e66\uff0c\u6d4f\u89c8\u5668\u4f1a\u5728\u5730\u5740\u680f\u663e\u793a\u4e00\u628a\u9501\u3002</li> <li>\u516c\u53f8\u8ba4\u8bc1\uff08Company Validation\uff09\uff1a\u786e\u8ba4\u57df\u540d\u6240\u6709\u4eba\u662f\u54ea\u4e00\u5bb6\u516c\u53f8\uff0c\u8bc1\u4e66\u91cc\u9762\u4f1a\u5305\u542b\u516c\u53f8\u4fe1\u606f\u3002</li> <li>\u6269\u5c55\u8ba4\u8bc1\uff08Extended Validation\uff09\uff1a\u6700\u9ad8\u7ea7\u522b\u7684\u8ba4\u8bc1\uff0c\u6d4f\u89c8\u5668\u5730\u5740\u680f\u4f1a\u663e\u793a\u516c\u53f8\u540d\u3002</li> </ul> <p>\u8fd8\u5206\u4e3a\u4e09\u79cd\u8986\u76d6\u8303\u56f4\u3002</p> <ul> <li>\u5355\u57df\u540d\u8bc1\u4e66\uff1a\u53ea\u80fd\u7528\u4e8e\u5355\u4e00\u57df\u540d\uff0c<code>foo.com</code>\u7684\u8bc1\u4e66\u4e0d\u80fd\u7528\u4e8e<code>www.foo.com</code></li> <li>\u901a\u914d\u7b26\u8bc1\u4e66\uff1a\u53ef\u4ee5\u7528\u4e8e\u67d0\u4e2a\u57df\u540d\u53ca\u5176\u6240\u6709\u4e00\u7ea7\u5b50\u57df\u540d\uff0c\u6bd4\u5982<code>*.foo.com</code>\u7684\u8bc1\u4e66\u53ef\u4ee5\u7528\u4e8e<code>foo.com</code>\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e<code>www.foo.com</code></li> <li>\u591a\u57df\u540d\u8bc1\u4e66\uff1a\u53ef\u4ee5\u7528\u4e8e\u591a\u4e2a\u57df\u540d\uff0c\u6bd4\u5982<code>foo.com</code>\u548c<code>bar.com</code></li> </ul> <p>\u8ba4\u8bc1\u7ea7\u522b\u8d8a\u9ad8\u3001\u8986\u76d6\u8303\u56f4\u8d8a\u5e7f\u7684\u8bc1\u4e66\uff0c\u4ef7\u683c\u8d8a\u8d35\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u514d\u8d39\u8bc1\u4e66\u7684\u9009\u62e9\u3002\u4e3a\u4e86\u63a8\u5e7fHTTPS\u534f\u8bae\uff0c\u7535\u5b50\u524d\u54e8\u57fa\u91d1\u4f1aEFF\u6210\u7acb\u4e86 Let\u2019s Encrypt\uff0c\u63d0\u4f9b\u514d\u8d39\u8bc1\u4e66\uff08\u6559\u7a0b\u548c\u5de5\u5177\uff09\u3002</p> <p>\u62ff\u5230\u8bc1\u4e66\u4ee5\u540e\uff0c\u53ef\u4ee5\u7528SSL Certificate Check\u68c0\u67e5\u4e00\u4e0b\uff0c\u4fe1\u606f\u662f\u5426\u6b63\u786e\u3002</p>"},{"location":"http/https/#\u4e8c\u5b89\u88c5\u8bc1\u4e66","title":"\u4e8c\u3001\u5b89\u88c5\u8bc1\u4e66","text":"<p>\u8bc1\u4e66\u53ef\u4ee5\u653e\u5728<code>/etc/ssl</code>\u76ee\u5f55\uff08Linux \u7cfb\u7edf\uff09\uff0c\u7136\u540e\u6839\u636e\u4f60\u4f7f\u7528\u7684Web\u670d\u52a1\u5668\u8fdb\u884c\u914d\u7f6e\u3002</p> <ul> <li>\u8bc1\u4e66\u914d\u7f6e\u6587\u4ef6\u751f\u6210\u5668\uff0cby Mozilla</li> <li>\u914d\u7f6e\u6587\u4ef6\u6a21\u677f\uff0cby SSLMate</li> </ul> <p>\u5982\u679c\u4f7f\u7528 Let\u2019s Encrypt \u8bc1\u4e66\uff0c\u8bf7\u4f7f\u7528\u81ea\u52a8\u5b89\u88c5\u5de5\u5177Certbot\u3002</p> <p>\u5b89\u88c5\u6210\u529f\u540e\uff0c\u4f7f\u7528 SSL Labs Server Test \u68c0\u67e5\u4e00\u4e0b\u8bc1\u4e66\u662f\u5426\u751f\u6548\u3002</p>"},{"location":"http/https/#\u4e09\u4fee\u6539\u94fe\u63a5","title":"\u4e09\u3001\u4fee\u6539\u94fe\u63a5","text":"<p>\u4e0b\u4e00\u6b65\uff0c\u7f51\u9875\u52a0\u8f7d\u7684 HTTP \u8d44\u6e90\uff0c\u5168\u90e8\u6539\u6210 HTTPS \u94fe\u63a5\u3002\u56e0\u4e3a\u52a0\u5bc6\u7f51\u9875\u5185\u6709\u975e\u52a0\u5bc6\u7684\u8d44\u6e90\uff0c\u6d4f\u89c8\u5668\u662f\u4e0d\u4f1a\u52a0\u8f7d\u7684\u3002</p> <pre><code>&lt;script src=\"http://foo.com/jquery.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\u4e0a\u9762\u8fd9\u884c\u52a0\u8f7d\u547d\u4ee4\uff0c\u6709\u4e24\u79cd\u6539\u6cd5\u3002</p> <pre><code>&lt;!-- \u6539\u6cd5\u4e00 --&gt;\n&lt;script src=\"https://foo.com/jquery.js\"&gt;&lt;/script&gt;\n\n&lt;!-- \u6539\u6cd5\u4e8c --&gt;\n&lt;script src=\"//foo.com/jquery.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\u5176\u4e2d\uff0c\u6539\u6cd5\u4e8c\u4f1a\u6839\u636e\u5f53\u524d\u7f51\u9875\u7684\u534f\u8bae\uff0c\u52a0\u8f7d\u76f8\u540c\u534f\u8bae\u7684\u5916\u90e8\u8d44\u6e90\uff0c\u66f4\u7075\u6d3b\u4e00\u4e9b\u3002</p> <p>\u53e6\u5916\uff0c\u5982\u679c\u9875\u9762\u5934\u90e8\u7528\u5230\u4e86<code>rel=\"canonical\"</code>\uff0c\u4e5f\u8981\u6539\u6210HTTPS\u7f51\u5740\u3002</p> <pre><code>&lt;link rel=\"canonical\" href=\"https://foo.com/bar.html\" /&gt;\n</code></pre>"},{"location":"http/https/#\u56db301\u91cd\u5b9a\u5411","title":"\u56db\u3001301\u91cd\u5b9a\u5411","text":"<p>\u4e0b\u4e00\u6b65\uff0c\u4fee\u6539 Web \u670d\u52a1\u5668\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528 301 \u91cd\u5b9a\u5411\uff0c\u5c06 HTTP \u534f\u8bae\u7684\u8bbf\u95ee\u5bfc\u5411 HTTPS \u534f\u8bae\u3002</p> <p>Nginx \u7684\u5199\u6cd5\u3002</p> <pre><code>server {\n  listen 80;\n  server_name domain.com www.domain.com;\n  return 301 https://domain.com$request_uri;\n}\n</code></pre> <p>Apache \u7684\u5199\u6cd5\uff08<code>.htaccess</code>\u6587\u4ef6\uff09\u3002</p> <pre><code>RewriteEngine On\nRewriteCond %{HTTPS} off\nRewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]\n</code></pre>"},{"location":"http/https/#\u4e94\u5b89\u5168\u63aa\u65bd","title":"\u4e94\u3001\u5b89\u5168\u63aa\u65bd","text":"<p>\u4ee5\u4e0b\u63aa\u65bd\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4fdd\u8bc1\u901a\u4fe1\u5b89\u5168\u3002</p>"},{"location":"http/https/#51-http-strict-transport-security-hsts","title":"5.1 HTTP Strict Transport Security (HSTS)","text":"<p>\u8bbf\u95ee\u7f51\u7ad9\u65f6\uff0c\u7528\u6237\u5f88\u5c11\u76f4\u63a5\u5728\u5730\u5740\u680f\u8f93\u5165<code>https://</code>\uff0c\u603b\u662f\u901a\u8fc7\u70b9\u51fb\u94fe\u63a5\uff0c\u6216\u80053xx\u91cd\u5b9a\u5411\uff0c\u4eceHTTP\u9875\u9762\u8fdb\u5165HTTPS\u9875\u9762\u3002\u653b\u51fb\u8005\u5b8c\u5168\u53ef\u4ee5\u5728\u7528\u6237\u53d1\u51faHTTP\u8bf7\u6c42\u65f6\uff0c\u52ab\u6301\u5e76\u7be1\u6539\u8be5\u8bf7\u6c42\u3002</p> <p>\u53e6\u4e00\u79cd\u60c5\u51b5\u662f\u6076\u610f\u7f51\u7ad9\u4f7f\u7528\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u5192\u5145\u53e6\u4e00\u4e2a\u7f51\u7ad9\uff0c\u8fd9\u65f6\u6d4f\u89c8\u5668\u4f1a\u7ed9\u51fa\u8b66\u544a\uff0c\u4f46\u662f\u8bb8\u591a\u7528\u6237\u4f1a\u5ffd\u7565\u8b66\u544a\u7ee7\u7eed\u8bbf\u95ee\u3002</p> <p>\u201cHTTP\u4e25\u683c\u4f20\u8f93\u5b89\u5168\u201d\uff08\u7b80\u79f0 HSTS\uff09\u7684\u4f5c\u7528\uff0c\u5c31\u662f\u5f3a\u5236\u6d4f\u89c8\u5668\u53ea\u80fd\u53d1\u51faHTTPS\u8bf7\u6c42\uff0c\u5e76\u963b\u6b62\u7528\u6237\u63a5\u53d7\u4e0d\u5b89\u5168\u7684\u8bc1\u4e66\u3002</p> <p>\u5b83\u5728\u7f51\u7ad9\u7684\u54cd\u5e94\u5934\u91cc\u9762\uff0c\u52a0\u5165\u4e00\u4e2a\u5f3a\u5236\u6027\u58f0\u660e\u3002\u4ee5\u4e0b\u4f8b\u5b50\u6458\u81ea\u7ef4\u57fa\u767e\u79d1\u3002</p> <pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains\n</code></pre> <p>\u4e0a\u9762\u8fd9\u6bb5\u5934\u4fe1\u606f\u6709\u4e24\u4e2a\u4f5c\u7528\u3002</p> <p>\uff081\uff09\u5728\u63a5\u4e0b\u6765\u7684\u4e00\u5e74\uff08\u537331536000\u79d2\uff09\u4e2d\uff0c\u6d4f\u89c8\u5668\u53ea\u8981\u5411<code>example.com</code>\u6216\u5176\u5b50\u57df\u540d\u53d1\u9001HTTP\u8bf7\u6c42\u65f6\uff0c\u5fc5\u987b\u91c7\u7528HTTPS\u6765\u53d1\u8d77\u8fde\u63a5\u3002\u7528\u6237\u70b9\u51fb\u8d85\u94fe\u63a5\u6216\u5728\u5730\u5740\u680f\u8f93\u5165<code>http://www.example.com/</code>\uff0c\u6d4f\u89c8\u5668\u5e94\u5f53\u81ea\u52a8\u5c06<code>http</code>\u8f6c\u5199\u6210<code>https</code>\uff0c\u7136\u540e\u76f4\u63a5\u5411<code>https://www.example.com/</code>\u53d1\u9001\u8bf7\u6c42\u3002</p> <p>\uff082\uff09\u5728\u63a5\u4e0b\u6765\u7684\u4e00\u5e74\u4e2d\uff0c\u5982\u679c<code>example.com</code>\u670d\u52a1\u5668\u53d1\u9001\u7684\u8bc1\u4e66\u65e0\u6548\uff0c\u7528\u6237\u4e0d\u80fd\u5ffd\u7565\u6d4f\u89c8\u5668\u8b66\u544a\uff0c\u5c06\u65e0\u6cd5\u7ee7\u7eed\u8bbf\u95ee\u8be5\u7f51\u7ad9\u3002</p> <p>HSTS \u5f88\u5927\u7a0b\u5ea6\u4e0a\u89e3\u51b3\u4e86 SSL \u5265\u79bb\u653b\u51fb\u3002\u53ea\u8981\u6d4f\u89c8\u5668\u66fe\u7ecf\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fc7\u4e00\u6b21\u5b89\u5168\u8fde\u63a5\uff0c\u4e4b\u540e\u6d4f\u89c8\u5668\u4f1a\u5f3a\u5236\u4f7f\u7528<code>HTTPS</code>\uff0c\u5373\u4f7f\u94fe\u63a5\u88ab\u6362\u6210\u4e86<code>HTTP</code>\u3002</p> <p>\u8be5\u65b9\u6cd5\u7684\u4e3b\u8981\u4e0d\u8db3\u662f\uff0c\u7528\u6237\u9996\u6b21\u8bbf\u95ee\u7f51\u7ad9\u53d1\u51faHTTP\u8bf7\u6c42\u65f6\uff0c\u662f\u4e0d\u53d7HSTS\u4fdd\u62a4\u7684\u3002</p>"},{"location":"http/https/#52-cookie","title":"5.2 Cookie","text":"<p>\u53e6\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\uff0c\u786e\u4fdd\u6d4f\u89c8\u5668\u53ea\u5728\u4f7f\u7528 HTTPS \u65f6\uff0c\u624d\u53d1\u9001Cookie\u3002</p> <p>\u7f51\u7ad9\u54cd\u5e94\u5934\u91cc\u9762\uff0c<code>Set-Cookie</code>\u5b57\u6bb5\u52a0\u4e0a<code>Secure</code>\u6807\u5fd7\u5373\u53ef\u3002</p> <pre><code>Set-Cookie: LSID=DQAAAK\u2026Eaem_vYg; Secure\n</code></pre>"},{"location":"http/https/#\u516d\u53c2\u8003\u94fe\u63a5","title":"\u516d\u3001\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>How To Migrate To HTTPS, by Chris Palmer</li> <li>Complete Guide \u2013 How to Migrate from HTTP to HTTPS, by KeyCDN</li> <li>What You Need to Know About Changing From Http to Https, by Matt Mansfield</li> </ul> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/internet_protocol_suite_part_i/","title":"\u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e00\uff09","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - \u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e00\uff09</p> <p>\u6211\u4eec\u6bcf\u5929\u4f7f\u7528\u4e92\u8054\u7f51\uff0c\u4f60\u662f\u5426\u60f3\u8fc7\uff0c\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f</p> <p>\u5168\u4e16\u754c\u51e0\u5341\u4ebf\u53f0\u7535\u8111\uff0c\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u4e24\u4e24\u901a\u4fe1\u3002\u4e0a\u6d77\u7684\u67d0\u4e00\u5757\u7f51\u5361\u9001\u51fa\u4fe1\u53f7\uff0c\u6d1b\u6749\u77f6\u7684\u53e6\u4e00\u5757\u7f51\u5361\u5c45\u7136\u5c31\u6536\u5230\u4e86\uff0c\u4e24\u8005\u5b9e\u9645\u4e0a\u6839\u672c\u4e0d\u77e5\u9053\u5bf9\u65b9\u7684\u7269\u7406\u4f4d\u7f6e\uff0c\u4f60\u4e0d\u89c9\u5f97\u8fd9\u662f\u5f88\u795e\u5947\u7684\u4e8b\u60c5\u5417\uff1f</p> <p>\u4e92\u8054\u7f51\u7684\u6838\u5fc3\u662f\u4e00\u7cfb\u5217\u534f\u8bae\uff0c\u603b\u79f0\u4e3a\"\u4e92\u8054\u7f51\u534f\u8bae\"\uff08Internet Protocol Suite\uff09\u3002\u5b83\u4eec\u5bf9\u7535\u8111\u5982\u4f55\u8fde\u63a5\u548c\u7ec4\u7f51\uff0c\u505a\u51fa\u4e86\u8be6\u5c3d\u7684\u89c4\u5b9a\u3002\u7406\u89e3\u4e86\u8fd9\u4e9b\u534f\u8bae\uff0c\u5c31\u7406\u89e3\u4e86\u4e92\u8054\u7f51\u7684\u539f\u7406\u3002</p> <p>\u4e0b\u9762\u5c31\u662f\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u3002\u56e0\u4e3a\u8fd9\u4e9b\u534f\u8bae\u5b9e\u5728\u592a\u590d\u6742\u3001\u592a\u5e9e\u5927\uff0c\u6211\u60f3\u6574\u7406\u4e00\u4e2a\u7b80\u6d01\u7684\u6846\u67b6\uff0c\u5e2e\u52a9\u81ea\u5df1\u4ece\u603b\u4f53\u4e0a\u628a\u63e1\u5b83\u4eec\u3002\u4e3a\u4e86\u4fdd\u8bc1\u7b80\u5355\u6613\u61c2\uff0c\u6211\u505a\u4e86\u5927\u91cf\u7684\u7b80\u5316\uff0c\u6709\u4e9b\u5730\u65b9\u5e76\u4e0d\u5168\u9762\u548c\u7cbe\u786e\uff0c\u4f46\u662f\u5e94\u8be5\u80fd\u591f\u8bf4\u6e05\u695a\u4e92\u8054\u7f51\u7684\u539f\u7406\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#\u4e00\u6982\u8ff0","title":"\u4e00\u3001\u6982\u8ff0","text":""},{"location":"http/internet_protocol_suite_part_i/#11-\u4e94\u5c42\u6a21\u578b","title":"1.1 \u4e94\u5c42\u6a21\u578b","text":"<p>\u4e92\u8054\u7f51\u7684\u5b9e\u73b0\uff0c\u5206\u6210\u597d\u51e0\u5c42\u3002\u6bcf\u4e00\u5c42\u90fd\u6709\u81ea\u5df1\u7684\u529f\u80fd\uff0c\u5c31\u50cf\u5efa\u7b51\u7269\u4e00\u6837\uff0c\u6bcf\u4e00\u5c42\u90fd\u9760\u4e0b\u4e00\u5c42\u652f\u6301\u3002</p> <p>\u7528\u6237\u63a5\u89e6\u5230\u7684\uff0c\u53ea\u662f\u6700\u4e0a\u9762\u7684\u4e00\u5c42\uff0c\u6839\u672c\u6ca1\u6709\u611f\u89c9\u5230\u4e0b\u9762\u7684\u5c42\u3002\u8981\u7406\u89e3\u4e92\u8054\u7f51\uff0c\u5fc5\u987b\u4ece\u6700\u4e0b\u5c42\u5f00\u59cb\uff0c\u81ea\u4e0b\u800c\u4e0a\u7406\u89e3\u6bcf\u4e00\u5c42\u7684\u529f\u80fd\u3002</p> <p>\u5982\u4f55\u5206\u5c42\u6709\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u6709\u7684\u6a21\u578b\u5206\u4e03\u5c42\uff0c\u6709\u7684\u5206\u56db\u5c42\u3002\u6211\u89c9\u5f97\uff0c\u628a\u4e92\u8054\u7f51\u5206\u6210\u4e94\u5c42\uff0c\u6bd4\u8f83\u5bb9\u6613\u89e3\u91ca\u3002</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6700\u5e95\u4e0b\u7684\u4e00\u5c42\u53eb\u505a\"\u5b9e\u4f53\u5c42\"\uff08Physical Layer\uff09\uff0c\u6700\u4e0a\u9762\u7684\u4e00\u5c42\u53eb\u505a\"\u5e94\u7528\u5c42\"\uff08Application Layer\uff09\uff0c\u4e2d\u95f4\u7684\u4e09\u5c42\uff08\u81ea\u4e0b\u800c\u4e0a\uff09\u5206\u522b\u662f\"\u94fe\u63a5\u5c42\"\uff08Link Layer\uff09\u3001\"\u7f51\u7edc\u5c42\"\uff08Network Layer\uff09\u548c\"\u4f20\u8f93\u5c42\"\uff08Transport Layer\uff09\u3002\u8d8a\u4e0b\u9762\u7684\u5c42\uff0c\u8d8a\u9760\u8fd1\u786c\u4ef6\uff1b\u8d8a\u4e0a\u9762\u7684\u5c42\uff0c\u8d8a\u9760\u8fd1\u7528\u6237\u3002</p> <p>\u5b83\u4eec\u53eb\u4ec0\u4e48\u540d\u5b57\uff0c\u5176\u5b9e\u5e76\u4e0d\u91cd\u8981\u3002\u53ea\u9700\u8981\u77e5\u9053\uff0c\u4e92\u8054\u7f51\u5206\u6210\u82e5\u5e72\u5c42\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#12-\u5c42\u4e0e\u534f\u8bae","title":"1.2 \u5c42\u4e0e\u534f\u8bae","text":"<p>\u6bcf\u4e00\u5c42\u90fd\u662f\u4e3a\u4e86\u5b8c\u6210\u4e00\u79cd\u529f\u80fd\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u5c31\u9700\u8981\u5927\u5bb6\u90fd\u9075\u5b88\u5171\u540c\u7684\u89c4\u5219\u3002</p> <p>\u5927\u5bb6\u90fd\u9075\u5b88\u7684\u89c4\u5219\uff0c\u5c31\u53eb\u505a\"\u534f\u8bae\"\uff08protocol\uff09\u3002</p> <p>\u4e92\u8054\u7f51\u7684\u6bcf\u4e00\u5c42\uff0c\u90fd\u5b9a\u4e49\u4e86\u5f88\u591a\u534f\u8bae\u3002\u8fd9\u4e9b\u534f\u8bae\u7684\u603b\u79f0\uff0c\u5c31\u53eb\u505a\"\u4e92\u8054\u7f51\u534f\u8bae\"\uff08Internet Protocol Suite\uff09\u3002\u5b83\u4eec\u662f\u4e92\u8054\u7f51\u7684\u6838\u5fc3\uff0c\u4e0b\u9762\u4ecb\u7ecd\u6bcf\u4e00\u5c42\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u5c31\u662f\u4ecb\u7ecd\u6bcf\u4e00\u5c42\u7684\u4e3b\u8981\u534f\u8bae\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#\u4e8c\u5b9e\u4f53\u5c42","title":"\u4e8c\u3001\u5b9e\u4f53\u5c42","text":"<p>\u6211\u4eec\u4ece\u6700\u5e95\u4e0b\u7684\u4e00\u5c42\u5f00\u59cb\u3002</p> <p>\u7535\u8111\u8981\u7ec4\u7f51\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u8981\u5e72\u4ec0\u4e48\uff1f\u5f53\u7136\u662f\u5148\u628a\u7535\u8111\u8fde\u8d77\u6765\uff0c\u53ef\u4ee5\u7528\u5149\u7f06\u3001\u7535\u7f06\u3001\u53cc\u7ede\u7ebf\u3001\u65e0\u7ebf\u7535\u6ce2\u7b49\u65b9\u5f0f\u3002</p> <p></p> <p>\u8fd9\u5c31\u53eb\u505a\"\u5b9e\u4f53\u5c42\"\uff0c\u5b83\u5c31\u662f\u628a\u7535\u8111\u8fde\u63a5\u8d77\u6765\u7684\u7269\u7406\u624b\u6bb5\u3002\u5b83\u4e3b\u8981\u89c4\u5b9a\u4e86\u7f51\u7edc\u7684\u4e00\u4e9b\u7535\u6c14\u7279\u6027\uff0c\u4f5c\u7528\u662f\u8d1f\u8d23\u4f20\u90010\u548c1\u7684\u7535\u4fe1\u53f7\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#\u4e09\u94fe\u63a5\u5c42","title":"\u4e09\u3001\u94fe\u63a5\u5c42","text":""},{"location":"http/internet_protocol_suite_part_i/#31-\u5b9a\u4e49","title":"3.1 \u5b9a\u4e49","text":"<p>\u5355\u7eaf\u7684<code>0</code>\u548c<code>1</code>\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u5fc5\u987b\u89c4\u5b9a\u89e3\u8bfb\u65b9\u5f0f\uff1a\u591a\u5c11\u4e2a\u7535\u4fe1\u53f7\u7b97\u4e00\u7ec4\uff1f\u6bcf\u4e2a\u4fe1\u53f7\u4f4d\u6709\u4f55\u610f\u4e49\uff1f</p> <p>\u8fd9\u5c31\u662f\"\u94fe\u63a5\u5c42\"\u7684\u529f\u80fd\uff0c\u5b83\u5728\"\u5b9e\u4f53\u5c42\"\u7684\u4e0a\u65b9\uff0c\u786e\u5b9a\u4e860\u548c1\u7684\u5206\u7ec4\u65b9\u5f0f\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#32-\u4ee5\u592a\u7f51\u534f\u8bae","title":"3.2 \u4ee5\u592a\u7f51\u534f\u8bae","text":"<p>\u65e9\u671f\u7684\u65f6\u5019\uff0c\u6bcf\u5bb6\u516c\u53f8\u90fd\u6709\u81ea\u5df1\u7684\u7535\u4fe1\u53f7\u5206\u7ec4\u65b9\u5f0f\u3002\u9010\u6e10\u5730\uff0c\u4e00\u79cd\u53eb\u505a\"\u4ee5\u592a\u7f51\"\uff08Ethernet\uff09\u7684\u534f\u8bae\uff0c\u5360\u636e\u4e86\u4e3b\u5bfc\u5730\u4f4d\u3002</p> <p>\u4ee5\u592a\u7f51\u89c4\u5b9a\uff0c\u4e00\u7ec4\u7535\u4fe1\u53f7\u6784\u6210\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u53eb\u505a\"\u5e27\"\uff08Frame\uff09\u3002\u6bcf\u4e00\u5e27\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a\u6807\u5934\uff08Head\uff09\u548c\u6570\u636e\uff08Data\uff09\u3002</p> <p></p> <p>\"\u6807\u5934\"\u5305\u542b\u6570\u636e\u5305\u7684\u4e00\u4e9b\u8bf4\u660e\u9879\uff0c\u6bd4\u5982\u53d1\u9001\u8005\u3001\u63a5\u53d7\u8005\u3001\u6570\u636e\u7c7b\u578b\u7b49\u7b49\uff1b\"\u6570\u636e\"\u5219\u662f\u6570\u636e\u5305\u7684\u5177\u4f53\u5185\u5bb9\u3002</p> <p>\"\u6807\u5934\"\u7684\u957f\u5ea6\uff0c\u56fa\u5b9a\u4e3a18\u5b57\u8282\u3002\"\u6570\u636e\"\u7684\u957f\u5ea6\uff0c\u6700\u77ed\u4e3a46\u5b57\u8282\uff0c\u6700\u957f\u4e3a1500\u5b57\u8282\u3002\u56e0\u6b64\uff0c\u6574\u4e2a\"\u5e27\"\u6700\u77ed\u4e3a64\u5b57\u8282\uff0c\u6700\u957f\u4e3a1518\u5b57\u8282\u3002\u5982\u679c\u6570\u636e\u5f88\u957f\uff0c\u5c31\u5fc5\u987b\u5206\u5272\u6210\u591a\u4e2a\u5e27\u8fdb\u884c\u53d1\u9001\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#33-mac\u5730\u5740","title":"3.3 MAC\u5730\u5740","text":"<p>\u4e0a\u9762\u63d0\u5230\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u7684\"\u6807\u5934\"\uff0c\u5305\u542b\u4e86\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u7684\u4fe1\u606f\u3002\u90a3\u4e48\uff0c\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u662f\u5982\u4f55\u6807\u8bc6\u5462\uff1f</p> <p>\u4ee5\u592a\u7f51\u89c4\u5b9a\uff0c\u8fde\u5165\u7f51\u7edc\u7684\u6240\u6709\u8bbe\u5907\uff0c\u90fd\u5fc5\u987b\u5177\u6709\"\u7f51\u5361\"\u63a5\u53e3\u3002\u6570\u636e\u5305\u5fc5\u987b\u662f\u4ece\u4e00\u5757\u7f51\u5361\uff0c\u4f20\u9001\u5230\u53e6\u4e00\u5757\u7f51\u5361\u3002\u7f51\u5361\u7684\u5730\u5740\uff0c\u5c31\u662f\u6570\u636e\u5305\u7684\u53d1\u9001\u5730\u5740\u548c\u63a5\u6536\u5730\u5740\uff0c\u8fd9\u53eb\u505aMAC\u5730\u5740\u3002</p> <p></p> <p>\u6bcf\u5757\u7f51\u5361\u51fa\u5382\u7684\u65f6\u5019\uff0c\u90fd\u6709\u4e00\u4e2a\u5168\u4e16\u754c\u72ec\u4e00\u65e0\u4e8c\u7684MAC\u5730\u5740\uff0c\u957f\u5ea6\u662f48\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u901a\u5e38\u752812\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a\u3002</p> <p></p> <p>\u524d6\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u662f\u5382\u5546\u7f16\u53f7\uff0c\u540e6\u4e2a\u662f\u8be5\u5382\u5546\u7684\u7f51\u5361\u6d41\u6c34\u53f7\u3002\u6709\u4e86MAC\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u7f51\u5361\u548c\u6570\u636e\u5305\u7684\u8def\u5f84\u4e86\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#34-\u5e7f\u64ad","title":"3.4 \u5e7f\u64ad","text":"<p>\u5b9a\u4e49\u5730\u5740\u53ea\u662f\u7b2c\u4e00\u6b65\uff0c\u540e\u9762\u8fd8\u6709\u66f4\u591a\u7684\u6b65\u9aa4\u3002</p> <p>\u9996\u5148\uff0c\u4e00\u5757\u7f51\u5361\u600e\u4e48\u4f1a\u77e5\u9053\u53e6\u4e00\u5757\u7f51\u5361\u7684MAC\u5730\u5740\uff1f</p> <p>\u56de\u7b54\u662f\u6709\u4e00\u79cdARP\u534f\u8bae\uff0c\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u4e2a\u7559\u5230\u540e\u9762\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u77e5\u9053\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u5fc5\u987b\u77e5\u9053\u63a5\u6536\u65b9\u7684MAC\u5730\u5740\uff0c\u7136\u540e\u624d\u80fd\u53d1\u9001\u3002</p> <p>\u5176\u6b21\uff0c\u5c31\u7b97\u6709\u4e86MAC\u5730\u5740\uff0c\u7cfb\u7edf\u600e\u6837\u624d\u80fd\u628a\u6570\u636e\u5305\u51c6\u786e\u9001\u5230\u63a5\u6536\u65b9\uff1f</p> <p>\u56de\u7b54\u662f\u4ee5\u592a\u7f51\u91c7\u7528\u4e86\u4e00\u79cd\u5f88\"\u539f\u59cb\"\u7684\u65b9\u5f0f\uff0c\u5b83\u4e0d\u662f\u628a\u6570\u636e\u5305\u51c6\u786e\u9001\u5230\u63a5\u6536\u65b9\uff0c\u800c\u662f\u5411\u672c\u7f51\u7edc\u5185\u6240\u6709\u8ba1\u7b97\u673a\u53d1\u9001\uff0c\u8ba9\u6bcf\u53f0\u8ba1\u7b97\u673a\u81ea\u5df1\u5224\u65ad\uff0c\u662f\u5426\u4e3a\u63a5\u6536\u65b9\u3002</p> <p></p> <p>\u4e0a\u56fe\u4e2d\uff0c1\u53f7\u8ba1\u7b97\u673a\u54112\u53f7\u8ba1\u7b97\u673a\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u76843\u53f7\u30014\u53f7\u30015\u53f7\u8ba1\u7b97\u673a\u90fd\u4f1a\u6536\u5230\u8fd9\u4e2a\u5305\u3002\u5b83\u4eec\u8bfb\u53d6\u8fd9\u4e2a\u5305\u7684\"\u6807\u5934\"\uff0c\u627e\u5230\u63a5\u6536\u65b9\u7684MAC\u5730\u5740\uff0c\u7136\u540e\u4e0e\u81ea\u8eab\u7684MAC\u5730\u5740\u76f8\u6bd4\u8f83\uff0c\u5982\u679c\u4e24\u8005\u76f8\u540c\uff0c\u5c31\u63a5\u53d7\u8fd9\u4e2a\u5305\uff0c\u505a\u8fdb\u4e00\u6b65\u5904\u7406\uff0c\u5426\u5219\u5c31\u4e22\u5f03\u8fd9\u4e2a\u5305\u3002\u8fd9\u79cd\u53d1\u9001\u65b9\u5f0f\u5c31\u53eb\u505a\"\u5e7f\u64ad\"\uff08broadcasting\uff09\u3002</p> <p>\u6709\u4e86\u6570\u636e\u5305\u7684\u5b9a\u4e49\u3001\u7f51\u5361\u7684MAC\u5730\u5740\u3001\u5e7f\u64ad\u7684\u53d1\u9001\u65b9\u5f0f\uff0c\"\u94fe\u63a5\u5c42\"\u5c31\u53ef\u4ee5\u5728\u591a\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u4f20\u9001\u6570\u636e\u4e86\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#\u56db\u7f51\u7edc\u5c42","title":"\u56db\u3001\u7f51\u7edc\u5c42","text":""},{"location":"http/internet_protocol_suite_part_i/#41-\u7f51\u7edc\u5c42\u7684\u7531\u6765","title":"4.1 \u7f51\u7edc\u5c42\u7684\u7531\u6765","text":"<p>\u4ee5\u592a\u7f51\u534f\u8bae\uff0c\u4f9d\u9760MAC\u5730\u5740\u53d1\u9001\u6570\u636e\u3002\u7406\u8bba\u4e0a\uff0c\u5355\u5355\u4f9d\u9760MAC\u5730\u5740\uff0c\u4e0a\u6d77\u7684\u7f51\u5361\u5c31\u53ef\u4ee5\u627e\u5230\u6d1b\u6749\u77f6\u7684\u7f51\u5361\u4e86\uff0c\u6280\u672f\u4e0a\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002</p> <p>\u4f46\u662f\uff0c\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u91cd\u5927\u7684\u7f3a\u70b9\u3002\u4ee5\u592a\u7f51\u91c7\u7528\u5e7f\u64ad\u65b9\u5f0f\u53d1\u9001\u6570\u636e\u5305\uff0c\u6240\u6709\u6210\u5458\u4eba\u624b\u4e00\"\u5305\"\uff0c\u4e0d\u4ec5\u6548\u7387\u4f4e\uff0c\u800c\u4e14\u5c40\u9650\u5728\u53d1\u9001\u8005\u6240\u5728\u7684\u5b50\u7f51\u7edc\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e24\u53f0\u8ba1\u7b97\u673a\u4e0d\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u5e7f\u64ad\u662f\u4f20\u4e0d\u8fc7\u53bb\u7684\u3002\u8fd9\u79cd\u8bbe\u8ba1\u662f\u5408\u7406\u7684\uff0c\u5426\u5219\u4e92\u8054\u7f51\u4e0a\u6bcf\u4e00\u53f0\u8ba1\u7b97\u673a\u90fd\u4f1a\u6536\u5230\u6240\u6709\u5305\uff0c\u90a3\u4f1a\u5f15\u8d77\u707e\u96be\u3002</p> <p>\u4e92\u8054\u7f51\u662f\u65e0\u6570\u5b50\u7f51\u7edc\u5171\u540c\u7ec4\u6210\u7684\u4e00\u4e2a\u5de8\u578b\u7f51\u7edc\uff0c\u5f88\u50cf\u60f3\u8c61\u4e0a\u6d77\u548c\u6d1b\u6749\u77f6\u7684\u7535\u8111\u4f1a\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u8fd9\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002</p> <p></p> <p>\u56e0\u6b64\uff0c\u5fc5\u987b\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\uff0c\u80fd\u591f\u533a\u5206\u54ea\u4e9bMAC\u5730\u5740\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u54ea\u4e9b\u4e0d\u662f\u3002\u5982\u679c\u662f\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u5c31\u91c7\u7528\u5e7f\u64ad\u65b9\u5f0f\u53d1\u9001\uff0c\u5426\u5219\u5c31\u91c7\u7528\"\u8def\u7531\"\u65b9\u5f0f\u53d1\u9001\u3002\uff08\"\u8def\u7531\"\u7684\u610f\u601d\uff0c\u5c31\u662f\u6307\u5982\u4f55\u5411\u4e0d\u540c\u7684\u5b50\u7f51\u7edc\u5206\u53d1\u6570\u636e\u5305\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u4e3b\u9898\uff0c\u672c\u6587\u4e0d\u6d89\u53ca\u3002\uff09\u9057\u61be\u7684\u662f\uff0cMAC\u5730\u5740\u672c\u8eab\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5b83\u53ea\u4e0e\u5382\u5546\u6709\u5173\uff0c\u4e0e\u6240\u5904\u7f51\u7edc\u65e0\u5173\u3002</p> <p>\u8fd9\u5c31\u5bfc\u81f4\u4e86\"\u7f51\u7edc\u5c42\"\u7684\u8bde\u751f\u3002\u5b83\u7684\u4f5c\u7528\u662f\u5f15\u8fdb\u4e00\u5957\u65b0\u7684\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u80fd\u591f\u533a\u5206\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002\u8fd9\u5957\u5730\u5740\u5c31\u53eb\u505a\"\u7f51\u7edc\u5730\u5740\"\uff0c\u7b80\u79f0\"\u7f51\u5740\"\u3002</p> <p>\u4e8e\u662f\uff0c\"\u7f51\u7edc\u5c42\"\u51fa\u73b0\u4ee5\u540e\uff0c\u6bcf\u53f0\u8ba1\u7b97\u673a\u6709\u4e86\u4e24\u79cd\u5730\u5740\uff0c\u4e00\u79cd\u662fMAC\u5730\u5740\uff0c\u53e6\u4e00\u79cd\u662f\u7f51\u7edc\u5730\u5740\u3002\u4e24\u79cd\u5730\u5740\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u8054\u7cfb\uff0cMAC\u5730\u5740\u662f\u7ed1\u5b9a\u5728\u7f51\u5361\u4e0a\u7684\uff0c\u7f51\u7edc\u5730\u5740\u5219\u662f\u7ba1\u7406\u5458\u5206\u914d\u7684\uff0c\u5b83\u4eec\u53ea\u662f\u968f\u673a\u7ec4\u5408\u5728\u4e00\u8d77\u3002</p> <p>\u7f51\u7edc\u5730\u5740\u5e2e\u52a9\u6211\u4eec\u786e\u5b9a\u8ba1\u7b97\u673a\u6240\u5728\u7684\u5b50\u7f51\u7edc\uff0cMAC\u5730\u5740\u5219\u5c06\u6570\u636e\u5305\u9001\u5230\u8be5\u5b50\u7f51\u7edc\u4e2d\u7684\u76ee\u6807\u7f51\u5361\u3002\u56e0\u6b64\uff0c\u4ece\u903b\u8f91\u4e0a\u53ef\u4ee5\u63a8\u65ad\uff0c\u5fc5\u5b9a\u662f\u5148\u5904\u7406\u7f51\u7edc\u5730\u5740\uff0c\u7136\u540e\u518d\u5904\u7406MAC\u5730\u5740\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#42-ip\u534f\u8bae","title":"4.2 IP\u534f\u8bae","text":"<p>\u89c4\u5b9a\u7f51\u7edc\u5730\u5740\u7684\u534f\u8bae\uff0c\u53eb\u505aIP\u534f\u8bae\u3002\u5b83\u6240\u5b9a\u4e49\u7684\u5730\u5740\uff0c\u5c31\u88ab\u79f0\u4e3aIP\u5730\u5740\u3002</p> <p>\u76ee\u524d\uff0c\u5e7f\u6cdb\u91c7\u7528\u7684\u662fIP\u534f\u8bae\u7b2c\u56db\u7248\uff0c\u7b80\u79f0IPv4\u3002\u8fd9\u4e2a\u7248\u672c\u89c4\u5b9a\uff0c\u7f51\u7edc\u5730\u5740\u753132\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7ec4\u6210\u3002</p> <p></p> <p>\u4e60\u60ef\u4e0a\uff0c\u6211\u4eec\u7528\u5206\u6210\u56db\u6bb5\u7684\u5341\u8fdb\u5236\u6570\u8868\u793aIP\u5730\u5740\uff0c\u4ece<code>0.0.0.0</code>\u4e00\u76f4\u5230<code>255.255.255.255</code>\u3002</p> <p>\u4e92\u8054\u7f51\u4e0a\u7684\u6bcf\u4e00\u53f0\u8ba1\u7b97\u673a\uff0c\u90fd\u4f1a\u5206\u914d\u5230\u4e00\u4e2aIP\u5730\u5740\u3002\u8fd9\u4e2a\u5730\u5740\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u524d\u4e00\u90e8\u5206\u4ee3\u8868\u7f51\u7edc\uff0c\u540e\u4e00\u90e8\u5206\u4ee3\u8868\u4e3b\u673a\u3002\u6bd4\u5982\uff0cIP\u5730\u5740<code>172.16.254.1</code>\uff0c\u8fd9\u662f\u4e00\u4e2a<code>32</code>\u4f4d\u7684\u5730\u5740\uff0c\u5047\u5b9a\u5b83\u7684\u7f51\u7edc\u90e8\u5206\u662f\u524d<code>24</code>\u4f4d\uff08<code>172.16.254</code>\uff09\uff0c\u90a3\u4e48\u4e3b\u673a\u90e8\u5206\u5c31\u662f\u540e<code>8</code>\u4f4d\uff08\u6700\u540e\u7684\u90a3\u4e2a<code>1</code>\uff09\u3002\u5904\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u7684\u7535\u8111\uff0c\u5b83\u4eecIP\u5730\u5740\u7684\u7f51\u7edc\u90e8\u5206\u5fc5\u5b9a\u662f\u76f8\u540c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4<code>172.16.254.2</code>\u5e94\u8be5\u4e0e<code>172.16.254.1</code>\u5904\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002</p> <p>\u4f46\u662f\uff0c\u95ee\u9898\u5728\u4e8e\u5355\u5355\u4eceIP\u5730\u5740\uff0c\u6211\u4eec\u65e0\u6cd5\u5224\u65ad\u7f51\u7edc\u90e8\u5206\u3002\u8fd8\u662f\u4ee5<code>172.16.254.1</code>\u4e3a\u4f8b\uff0c\u5b83\u7684\u7f51\u7edc\u90e8\u5206\uff0c\u5230\u5e95\u662f\u524d24\u4f4d\uff0c\u8fd8\u662f\u524d<code>16</code>\u4f4d\uff0c\u751a\u81f3\u524d<code>28</code>\u4f4d\uff0c\u4eceIP\u5730\u5740\u4e0a\u662f\u770b\u4e0d\u51fa\u6765\u7684\u3002</p> <p>\u90a3\u4e48\uff0c\u600e\u6837\u624d\u80fd\u4eceIP\u5730\u5740\uff0c\u5224\u65ad\u4e24\u53f0\u8ba1\u7b97\u673a\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u5462\uff1f\u8fd9\u5c31\u8981\u7528\u5230\u53e6\u4e00\u4e2a\u53c2\u6570\"\u5b50\u7f51\u63a9\u7801\"\uff08subnet mask\uff09\u3002</p> <p>\u6240\u8c13\"\u5b50\u7f51\u63a9\u7801\"\uff0c\u5c31\u662f\u8868\u793a\u5b50\u7f51\u7edc\u7279\u5f81\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u5b83\u5728\u5f62\u5f0f\u4e0a\u7b49\u540c\u4e8eIP\u5730\u5740\uff0c\u4e5f\u662f\u4e00\u4e2a<code>32</code>\u4f4d\u4e8c\u8fdb\u5236\u6570\u5b57\uff0c\u5b83\u7684\u7f51\u7edc\u90e8\u5206\u5168\u90e8\u4e3a<code>1</code>\uff0c\u4e3b\u673a\u90e8\u5206\u5168\u90e8\u4e3a<code>0</code>\u3002\u6bd4\u5982\uff0cIP\u5730\u5740<code>172.16.254.1</code>\uff0c\u5982\u679c\u5df2\u77e5\u7f51\u7edc\u90e8\u5206\u662f\u524d24\u4f4d\uff0c\u4e3b\u673a\u90e8\u5206\u662f\u540e<code>8</code>\u4f4d\uff0c\u90a3\u4e48\u5b50\u7f51\u7edc\u63a9\u7801\u5c31\u662f<code>11111111.11111111.11111111.00000000</code>\uff0c\u5199\u6210\u5341\u8fdb\u5236\u5c31\u662f<code>255.255.255.0</code>\u3002</p> <p>\u77e5\u9053\"\u5b50\u7f51\u63a9\u7801\"\uff0c\u6211\u4eec\u5c31\u80fd\u5224\u65ad\uff0c\u4efb\u610f\u4e24\u4e2aIP\u5730\u5740\u662f\u5426\u5904\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002\u65b9\u6cd5\u662f\u5c06\u4e24\u4e2aIP\u5730\u5740\u4e0e\u5b50\u7f51\u63a9\u7801\u5206\u522b\u8fdb\u884c<code>AND</code>\u8fd0\u7b97\uff08\u4e24\u4e2a\u6570\u4f4d\u90fd\u4e3a<code>1</code>\uff0c\u8fd0\u7b97\u7ed3\u679c\u4e3a<code>1</code>\uff0c\u5426\u5219\u4e3a<code>0</code>\uff09\uff0c\u7136\u540e\u6bd4\u8f83\u7ed3\u679c\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u8868\u660e\u5b83\u4eec\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u4e2d\uff0c\u5426\u5219\u5c31\u4e0d\u662f\u3002</p> <p>\u6bd4\u5982\uff0c\u5df2\u77e5IP\u5730\u5740<code>172.16.254.1</code>\u548c<code>172.16.254.233</code>\u7684\u5b50\u7f51\u63a9\u7801\u90fd\u662f<code>255.255.255.0</code>\uff0c\u8bf7\u95ee\u5b83\u4eec\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff1f\u4e24\u8005\u4e0e\u5b50\u7f51\u63a9\u7801\u5206\u522b\u8fdb\u884c<code>AND</code>\u8fd0\u7b97\uff0c\u7ed3\u679c\u90fd\u662f<code>172.16.254.0</code>\uff0c\u56e0\u6b64\u5b83\u4eec\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002</p> <p>\u603b\u7ed3\u4e00\u4e0b\uff0cIP\u534f\u8bae\u7684\u4f5c\u7528\u4e3b\u8981\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u4e3a\u6bcf\u4e00\u53f0\u8ba1\u7b97\u673a\u5206\u914dIP\u5730\u5740\uff0c\u53e6\u4e00\u4e2a\u662f\u786e\u5b9a\u54ea\u4e9b\u5730\u5740\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#43-ip\u6570\u636e\u5305","title":"4.3 IP\u6570\u636e\u5305","text":"<p>\u6839\u636eIP\u534f\u8bae\u53d1\u9001\u7684\u6570\u636e\uff0c\u5c31\u53eb\u505aIP\u6570\u636e\u5305\u3002\u4e0d\u96be\u60f3\u8c61\uff0c\u5176\u4e2d\u5fc5\u5b9a\u5305\u62ecIP\u5730\u5740\u4fe1\u606f\u3002</p> <p>\u4f46\u662f\u524d\u9762\u8bf4\u8fc7\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u53ea\u5305\u542bMAC\u5730\u5740\uff0c\u5e76\u6ca1\u6709IP\u5730\u5740\u7684\u680f\u4f4d\u3002\u90a3\u4e48\u662f\u5426\u9700\u8981\u4fee\u6539\u6570\u636e\u5b9a\u4e49\uff0c\u518d\u6dfb\u52a0\u4e00\u4e2a\u680f\u4f4d\u5462\uff1f</p> <p>\u56de\u7b54\u662f\u4e0d\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u628aIP\u6570\u636e\u5305\u76f4\u63a5\u653e\u8fdb\u4ee5\u592a\u7f51\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\uff0c\u56e0\u6b64\u5b8c\u5168\u4e0d\u7528\u4fee\u6539\u4ee5\u592a\u7f51\u7684\u89c4\u683c\u3002\u8fd9\u5c31\u662f\u4e92\u8054\u7f51\u5206\u5c42\u7ed3\u6784\u7684\u597d\u5904\uff1a\u4e0a\u5c42\u7684\u53d8\u52a8\u5b8c\u5168\u4e0d\u6d89\u53ca\u4e0b\u5c42\u7684\u7ed3\u6784\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0cIP\u6570\u636e\u5305\u4e5f\u5206\u4e3a\"\u6807\u5934\"\u548c\"\u6570\u636e\"\u4e24\u4e2a\u90e8\u5206\u3002</p> <p></p> <p>\"\u6807\u5934\"\u90e8\u5206\u4e3b\u8981\u5305\u62ec\u7248\u672c\u3001\u957f\u5ea6\u3001IP\u5730\u5740\u7b49\u4fe1\u606f\uff0c\"\u6570\u636e\"\u90e8\u5206\u5219\u662fIP\u6570\u636e\u5305\u7684\u5177\u4f53\u5185\u5bb9\u3002\u5b83\u653e\u8fdb\u4ee5\u592a\u7f51\u6570\u636e\u5305\u540e\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u5c31\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u6837\u3002</p> <p></p> <p>IP\u6570\u636e\u5305\u7684\"\u6807\u5934\"\u90e8\u5206\u7684\u957f\u5ea6\u4e3a20\u523060\u5b57\u8282\uff0c\u6574\u4e2a\u6570\u636e\u5305\u7684\u603b\u957f\u5ea6\u6700\u5927\u4e3a<code>65,535</code>\u5b57\u8282\u3002\u56e0\u6b64\uff0c\u7406\u8bba\u4e0a\uff0c\u4e00\u4e2aIP\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\uff0c\u6700\u957f\u4e3a<code>65,515</code>\u5b57\u8282\u3002\u524d\u9762\u8bf4\u8fc7\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\uff0c\u6700\u957f\u53ea\u6709<code>1500</code>\u5b57\u8282\u3002\u56e0\u6b64\uff0c\u5982\u679cIP\u6570\u636e\u5305\u8d85\u8fc7\u4e86<code>1500</code>\u5b57\u8282\uff0c\u5b83\u5c31\u9700\u8981\u5206\u5272\u6210\u51e0\u4e2a\u4ee5\u592a\u7f51\u6570\u636e\u5305\uff0c\u5206\u5f00\u53d1\u9001\u4e86\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#44-arp\u534f\u8bae","title":"4.4 ARP\u534f\u8bae","text":"<p>\u5173\u4e8e\"\u7f51\u7edc\u5c42\"\uff0c\u8fd8\u6709\u6700\u540e\u4e00\u70b9\u9700\u8981\u8bf4\u660e\u3002</p> <p>\u56e0\u4e3aIP\u6570\u636e\u5305\u662f\u653e\u5728\u4ee5\u592a\u7f51\u6570\u636e\u5305\u91cc\u53d1\u9001\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u540c\u65f6\u77e5\u9053\u4e24\u4e2a\u5730\u5740\uff0c\u4e00\u4e2a\u662f\u5bf9\u65b9\u7684MAC\u5730\u5740\uff0c\u53e6\u4e00\u4e2a\u662f\u5bf9\u65b9\u7684IP\u5730\u5740\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u65b9\u7684IP\u5730\u5740\u662f\u5df2\u77e5\u7684\uff08\u540e\u6587\u4f1a\u89e3\u91ca\uff09\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053\u5b83\u7684MAC\u5730\u5740\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\uff0c\u80fd\u591f\u4eceIP\u5730\u5740\u5f97\u5230MAC\u5730\u5740\u3002 \u8fd9\u91cc\u53c8\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\u60c5\u51b5\u3002</p> \u7b2c\u4e00\u79cd\u60c5\u51b5 \u5982\u679c\u4e24\u53f0\u4e3b\u673a\u4e0d\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u90a3\u4e48\u4e8b\u5b9e\u4e0a\u6ca1\u6709\u529e\u6cd5\u5f97\u5230\u5bf9\u65b9\u7684MAC\u5730\u5740\uff0c\u53ea\u80fd\u628a\u6570\u636e\u5305\u4f20\u9001\u5230\u4e24\u4e2a\u5b50\u7f51\u7edc\u8fde\u63a5\u5904\u7684\"\u7f51\u5173\"\uff08gateway\uff09\uff0c\u8ba9\u7f51\u5173\u53bb\u5904\u7406\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5 \u5982\u679c\u4e24\u53f0\u4e3b\u673a\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528ARP\u534f\u8bae\uff0c\u5f97\u5230\u5bf9\u65b9\u7684MAC\u5730\u5740\u3002ARP\u534f\u8bae\u4e5f\u662f\u53d1\u51fa\u4e00\u4e2a\u6570\u636e\u5305\uff08\u5305\u542b\u5728\u4ee5\u592a\u7f51\u6570\u636e\u5305\u4e2d\uff09\uff0c\u5176\u4e2d\u5305\u542b\u5b83\u6240\u8981\u67e5\u8be2\u4e3b\u673a\u7684IP\u5730\u5740\uff0c\u5728\u5bf9\u65b9\u7684MAC\u5730\u5740\u8fd9\u4e00\u680f\uff0c\u586b\u7684\u662f<code>FF:FF:FF:FF:FF:FF</code>\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\"\u5e7f\u64ad\"\u5730\u5740\u3002\u5b83\u6240\u5728\u5b50\u7f51\u7edc\u7684\u6bcf\u4e00\u53f0\u4e3b\u673a\uff0c\u90fd\u4f1a\u6536\u5230\u8fd9\u4e2a\u6570\u636e\u5305\uff0c\u4ece\u4e2d\u53d6\u51faIP\u5730\u5740\uff0c\u4e0e\u81ea\u8eab\u7684IP\u5730\u5740\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e24\u8005\u76f8\u540c\uff0c\u90fd\u505a\u51fa\u56de\u590d\uff0c\u5411\u5bf9\u65b9\u62a5\u544a\u81ea\u5df1\u7684MAC\u5730\u5740\uff0c\u5426\u5219\u5c31\u4e22\u5f03\u8fd9\u4e2a\u5305\u3002 <p>\u603b\u4e4b\uff0c\u6709\u4e86ARP\u534f\u8bae\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u5185\u7684\u4e3b\u673aMAC\u5730\u5740\uff0c\u53ef\u4ee5\u628a\u6570\u636e\u5305\u53d1\u9001\u5230\u4efb\u610f\u4e00\u53f0\u4e3b\u673a\u4e4b\u4e0a\u4e86\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#\u4e94\u4f20\u8f93\u5c42","title":"\u4e94\u3001\u4f20\u8f93\u5c42","text":""},{"location":"http/internet_protocol_suite_part_i/#51-\u4f20\u8f93\u5c42\u7684\u7531\u6765","title":"5.1 \u4f20\u8f93\u5c42\u7684\u7531\u6765","text":"<p>\u6709\u4e86MAC\u5730\u5740\u548cIP\u5730\u5740\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u4efb\u610f\u4e24\u53f0\u4e3b\u673a\u4e0a\u5efa\u7acb\u901a\u4fe1\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u662f\uff0c\u540c\u4e00\u53f0\u4e3b\u673a\u4e0a\u6709\u8bb8\u591a\u7a0b\u5e8f\u90fd\u9700\u8981\u7528\u5230\u7f51\u7edc\uff0c\u6bd4\u5982\uff0c\u4f60\u4e00\u8fb9\u6d4f\u89c8\u7f51\u9875\uff0c\u4e00\u8fb9\u4e0e\u670b\u53cb\u5728\u7ebf\u804a\u5929\u3002\u5f53\u4e00\u4e2a\u6570\u636e\u5305\u4ece\u4e92\u8054\u7f51\u4e0a\u53d1\u6765\u7684\u65f6\u5019\uff0c\u4f60\u600e\u4e48\u77e5\u9053\uff0c\u5b83\u662f\u8868\u793a\u7f51\u9875\u7684\u5185\u5bb9\uff0c\u8fd8\u662f\u8868\u793a\u5728\u7ebf\u804a\u5929\u7684\u5185\u5bb9\uff1f</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u8fd9\u4e2a\u6570\u636e\u5305\u5230\u5e95\u4f9b\u54ea\u4e2a\u7a0b\u5e8f\uff08\u8fdb\u7a0b\uff09\u4f7f\u7528\u3002\u8fd9\u4e2a\u53c2\u6570\u5c31\u53eb\u505a\"\u7aef\u53e3\"\uff08port\uff09\uff0c\u5b83\u5176\u5b9e\u662f\u6bcf\u4e00\u4e2a\u4f7f\u7528\u7f51\u5361\u7684\u7a0b\u5e8f\u7684\u7f16\u53f7\u3002\u6bcf\u4e2a\u6570\u636e\u5305\u90fd\u53d1\u5230\u4e3b\u673a\u7684\u7279\u5b9a\u7aef\u53e3\uff0c\u6240\u4ee5\u4e0d\u540c\u7684\u7a0b\u5e8f\u5c31\u80fd\u53d6\u5230\u81ea\u5df1\u6240\u9700\u8981\u7684\u6570\u636e\u3002</p> <p>\"\u7aef\u53e3\"\u662f<code>0</code>\u5230<code>65535</code>\u4e4b\u95f4\u7684\u4e00\u4e2a\u6574\u6570\uff0c\u6b63\u597d16\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u3002<code>0</code>\u5230<code>1023</code>\u7684\u7aef\u53e3\u88ab\u7cfb\u7edf\u5360\u7528\uff0c\u7528\u6237\u53ea\u80fd\u9009\u7528\u5927\u4e8e<code>1023</code>\u7684\u7aef\u53e3\u3002\u4e0d\u7ba1\u662f\u6d4f\u89c8\u7f51\u9875\u8fd8\u662f\u5728\u7ebf\u804a\u5929\uff0c\u5e94\u7528\u7a0b\u5e8f\u4f1a\u968f\u673a\u9009\u7528\u4e00\u4e2a\u7aef\u53e3\uff0c\u7136\u540e\u4e0e\u670d\u52a1\u5668\u7684\u76f8\u5e94\u7aef\u53e3\u8054\u7cfb\u3002</p> <p>\"\u4f20\u8f93\u5c42\"\u7684\u529f\u80fd\uff0c\u5c31\u662f\u5efa\u7acb\"\u7aef\u53e3\u5230\u7aef\u53e3\"\u7684\u901a\u4fe1\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\"\u7f51\u7edc\u5c42\"\u7684\u529f\u80fd\u662f\u5efa\u7acb\"\u4e3b\u673a\u5230\u4e3b\u673a\"\u7684\u901a\u4fe1\u3002\u53ea\u8981\u786e\u5b9a\u4e3b\u673a\u548c\u7aef\u53e3\uff0c\u6211\u4eec\u5c31\u80fd\u5b9e\u73b0\u7a0b\u5e8f\u4e4b\u95f4\u7684\u4ea4\u6d41\u3002\u56e0\u6b64\uff0cUnix\u7cfb\u7edf\u5c31\u628a\u4e3b\u673a+\u7aef\u53e3\uff0c\u53eb\u505a\"\u5957\u63a5\u5b57\"\uff08socket\uff09\u3002\u6709\u4e86\u5b83\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4e86\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#52-udp\u534f\u8bae","title":"5.2 UDP\u534f\u8bae","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u6570\u636e\u5305\u4e2d\u52a0\u5165\u7aef\u53e3\u4fe1\u606f\uff0c\u8fd9\u5c31\u9700\u8981\u65b0\u7684\u534f\u8bae\u3002\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u53eb\u505aUDP\u534f\u8bae\uff0c\u5b83\u7684\u683c\u5f0f\u51e0\u4e4e\u5c31\u662f\u5728\u6570\u636e\u524d\u9762\uff0c\u52a0\u4e0a\u7aef\u53e3\u53f7\u3002</p> <p>UDP\u6570\u636e\u5305\uff0c\u4e5f\u662f\u7531\"\u6807\u5934\"\u548c\"\u6570\u636e\"\u4e24\u90e8\u5206\u7ec4\u6210\u3002</p> <p></p> <p>\"\u6807\u5934\"\u90e8\u5206\u4e3b\u8981\u5b9a\u4e49\u4e86\u53d1\u51fa\u7aef\u53e3\u548c\u63a5\u6536\u7aef\u53e3\uff0c\"\u6570\u636e\"\u90e8\u5206\u5c31\u662f\u5177\u4f53\u7684\u5185\u5bb9\u3002\u7136\u540e\uff0c\u628a\u6574\u4e2aUDP\u6570\u636e\u5305\u653e\u5165IP\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\uff0c\u800c\u524d\u9762\u8bf4\u8fc7\uff0cIP\u6570\u636e\u5305\u53c8\u662f\u653e\u5728\u4ee5\u592a\u7f51\u6570\u636e\u5305\u4e4b\u4e2d\u7684\uff0c\u6240\u4ee5\u6574\u4e2a\u4ee5\u592a\u7f51\u6570\u636e\u5305\u73b0\u5728\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u6837\uff1a</p> <p></p> <p>UDP\u6570\u636e\u5305\u975e\u5e38\u7b80\u5355\uff0c\"\u6807\u5934\"\u90e8\u5206\u4e00\u5171\u53ea\u67098\u4e2a\u5b57\u8282\uff0c\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7<code>65,535</code>\u5b57\u8282\uff0c\u6b63\u597d\u653e\u8fdb\u4e00\u4e2aIP\u6570\u636e\u5305\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#53-tcp\u534f\u8bae","title":"5.3 TCP\u534f\u8bae","text":"<p>UDP\u534f\u8bae\u7684\u4f18\u70b9\u662f\u6bd4\u8f83\u7b80\u5355\uff0c\u5bb9\u6613\u5b9e\u73b0\uff0c\u4f46\u662f\u7f3a\u70b9\u662f\u53ef\u9760\u6027\u8f83\u5dee\uff0c\u4e00\u65e6\u6570\u636e\u5305\u53d1\u51fa\uff0c\u65e0\u6cd5\u77e5\u9053\u5bf9\u65b9\u662f\u5426\u6536\u5230\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u63d0\u9ad8\u7f51\u7edc\u53ef\u9760\u6027\uff0cTCP\u534f\u8bae\u5c31\u8bde\u751f\u4e86\u3002\u8fd9\u4e2a\u534f\u8bae\u975e\u5e38\u590d\u6742\uff0c\u4f46\u53ef\u4ee5\u8fd1\u4f3c\u8ba4\u4e3a\uff0c\u5b83\u5c31\u662f\u6709\u786e\u8ba4\u673a\u5236\u7684UDP\u534f\u8bae\uff0c\u6bcf\u53d1\u51fa\u4e00\u4e2a\u6570\u636e\u5305\u90fd\u8981\u6c42\u786e\u8ba4\u3002\u5982\u679c\u6709\u4e00\u4e2a\u6570\u636e\u5305\u9057\u5931\uff0c\u5c31\u6536\u4e0d\u5230\u786e\u8ba4\uff0c\u53d1\u51fa\u65b9\u5c31\u77e5\u9053\u6709\u5fc5\u8981\u91cd\u53d1\u8fd9\u4e2a\u6570\u636e\u5305\u4e86\u3002</p> <p>\u56e0\u6b64\uff0cTCP\u534f\u8bae\u80fd\u591f\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u9057\u5931\u3002\u5b83\u7684\u7f3a\u70b9\u662f\u8fc7\u7a0b\u590d\u6742\u3001\u5b9e\u73b0\u56f0\u96be\u3001\u6d88\u8017\u8f83\u591a\u7684\u8d44\u6e90\u3002</p> <p>TCP\u6570\u636e\u5305\u548cUDP\u6570\u636e\u5305\u4e00\u6837\uff0c\u90fd\u662f\u5185\u5d4c\u5728IP\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\u3002TCP\u6570\u636e\u5305\u6ca1\u6709\u957f\u5ea6\u9650\u5236\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u65e0\u9650\u957f\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1\u7f51\u7edc\u7684\u6548\u7387\uff0c\u901a\u5e38TCP\u6570\u636e\u5305\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7IP\u6570\u636e\u5305\u7684\u957f\u5ea6\uff0c\u4ee5\u786e\u4fdd\u5355\u4e2aTCP\u6570\u636e\u5305\u4e0d\u5fc5\u518d\u5206\u5272\u3002</p>"},{"location":"http/internet_protocol_suite_part_i/#\u516d\u5e94\u7528\u5c42","title":"\u516d\u3001\u5e94\u7528\u5c42","text":"<p>\u5e94\u7528\u7a0b\u5e8f\u6536\u5230\"\u4f20\u8f93\u5c42\"\u7684\u6570\u636e\uff0c\u63a5\u4e0b\u6765\u5c31\u8981\u8fdb\u884c\u89e3\u8bfb\u3002\u7531\u4e8e\u4e92\u8054\u7f51\u662f\u5f00\u653e\u67b6\u6784\uff0c\u6570\u636e\u6765\u6e90\u4e94\u82b1\u516b\u95e8\uff0c\u5fc5\u987b\u4e8b\u5148\u89c4\u5b9a\u597d\u683c\u5f0f\uff0c\u5426\u5219\u6839\u672c\u65e0\u6cd5\u89e3\u8bfb\u3002</p> <p>\"\u5e94\u7528\u5c42\"\u7684\u4f5c\u7528\uff0c\u5c31\u662f\u89c4\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u683c\u5f0f\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0cTCP\u534f\u8bae\u53ef\u4ee5\u4e3a\u5404\u79cd\u5404\u6837\u7684\u7a0b\u5e8f\u4f20\u9012\u6570\u636e\uff0c\u6bd4\u5982<code>Email</code>\u3001<code>WWW</code>\u3001<code>FTP</code>\u7b49\u7b49\u3002\u90a3\u4e48\uff0c\u5fc5\u987b\u6709\u4e0d\u540c\u534f\u8bae\u89c4\u5b9a<code>\u7535\u5b50\u90ae\u4ef6</code>\u3001<code>\u7f51\u9875</code>\u3001<code>FTP\u6570\u636e</code>\u7684\u683c\u5f0f\uff0c\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u534f\u8bae\u5c31\u6784\u6210\u4e86\"\u5e94\u7528\u5c42\"\u3002</p> <p>\u8fd9\u662f\u6700\u9ad8\u7684\u4e00\u5c42\uff0c\u76f4\u63a5\u9762\u5bf9\u7528\u6237\u3002\u5b83\u7684\u6570\u636e\u5c31\u653e\u5728TCP\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u73b0\u5728\u7684\u4ee5\u592a\u7f51\u7684\u6570\u636e\u5305\u5c31\u53d8\u6210\u4e0b\u9762\u8fd9\u6837\u3002</p> <p></p> <p>\u81f3\u6b64\uff0c\u6574\u4e2a\u4e92\u8054\u7f51\u7684\u4e94\u5c42\u7ed3\u6784\uff0c\u81ea\u4e0b\u800c\u4e0a\u5168\u90e8\u8bb2\u5b8c\u4e86\u3002\u8fd9\u662f\u4ece\u7cfb\u7edf\u7684\u89d2\u5ea6\uff0c\u89e3\u91ca\u4e92\u8054\u7f51\u662f\u5982\u4f55\u6784\u6210\u7684\u3002\u4e0b\u4e00\u7bc7\uff0c\u6211\u53cd\u8fc7\u6765\uff0c\u4ece\u7528\u6237\u7684\u89d2\u5ea6\uff0c\u81ea\u4e0a\u800c\u4e0b\u770b\u770b\u8fd9\u4e2a\u7ed3\u6784\u662f\u5982\u4f55\u53d1\u6325\u4f5c\u7528\uff0c\u5b8c\u6210\u4e00\u6b21\u7f51\u7edc\u6570\u636e\u4ea4\u6362\u7684\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/internet_protocol_suite_part_ii/","title":"\u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e8c\uff09","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - \u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e8c\uff09</p> <p>\u4e0a\u4e00\u7bc7\u6587\u7ae0\u5206\u6790\u4e86\u4e92\u8054\u7f51\u7684\u603b\u4f53\u6784\u601d\uff0c\u4ece\u4e0b\u81f3\u4e0a\uff0c\u6bcf\u4e00\u5c42\u534f\u8bae\u7684\u8bbe\u8ba1\u601d\u60f3\u3002</p> <p>\u8fd9\u662f\u4ece\u8bbe\u8ba1\u8005\u7684\u89d2\u5ea6\u770b\u95ee\u9898\uff0c\u4eca\u5929\u6211\u60f3\u5207\u6362\u5230\u7528\u6237\u7684\u89d2\u5ea6\uff0c\u770b\u770b\u7528\u6237\u662f\u5982\u4f55\u4ece\u4e0a\u81f3\u4e0b\uff0c\u4e0e\u8fd9\u4e9b\u534f\u8bae\u4e92\u52a8\u7684\u3002</p> <p></p> <p>\uff08\u63a5\u4e0a\u6587\uff09</p>"},{"location":"http/internet_protocol_suite_part_ii/#\u4e03\u4e00\u4e2a\u5c0f\u7ed3","title":"\u4e03\u3001\u4e00\u4e2a\u5c0f\u7ed3","text":"<p>\u5148\u5bf9\u524d\u9762\u7684\u5185\u5bb9\uff0c\u505a\u4e00\u4e2a\u5c0f\u7ed3\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u7f51\u7edc\u901a\u4fe1\u5c31\u662f\u4ea4\u6362\u6570\u636e\u5305\u3002\u7535\u8111A\u5411\u7535\u8111B\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u540e\u8005\u6536\u5230\u4e86\uff0c\u56de\u590d\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u4ece\u800c\u5b9e\u73b0\u4e24\u53f0\u7535\u8111\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u6570\u636e\u5305\u7684\u7ed3\u6784\uff0c\u57fa\u672c\u4e0a\u662f\u4e0b\u9762\u8fd9\u6837\uff1a</p> <p></p> <p>\u53d1\u9001\u8fd9\u4e2a\u5305\uff0c\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u5730\u5740\uff1a</p> <pre><code>\u3000\u3000* \u5bf9\u65b9\u7684MAC\u5730\u5740\n\n\u3000\u3000* \u5bf9\u65b9\u7684IP\u5730\u5740\n</code></pre> <p>\u6709\u4e86\u8fd9\u4e24\u4e2a\u5730\u5740\uff0c\u6570\u636e\u5305\u624d\u80fd\u51c6\u786e\u9001\u5230\u63a5\u6536\u8005\u624b\u4e2d\u3002\u4f46\u662f\uff0c\u524d\u9762\u8bf4\u8fc7\uff0cMAC\u5730\u5740\u6709\u5c40\u9650\u6027\uff0c\u5982\u679c\u4e24\u53f0\u7535\u8111\u4e0d\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u5c31\u65e0\u6cd5\u77e5\u9053\u5bf9\u65b9\u7684MAC\u5730\u5740\uff0c\u5fc5\u987b\u901a\u8fc7\u7f51\u5173\uff08gateway\uff09\u8f6c\u53d1\u3002</p> <p></p> <p>\u4e0a\u56fe\u4e2d\uff0c1\u53f7\u7535\u8111\u8981\u54114\u53f7\u7535\u8111\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\u3002\u5b83\u5148\u5224\u65ad4\u53f7\u7535\u8111\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u7ed3\u679c\u53d1\u73b0\u4e0d\u662f\uff08\u540e\u6587\u4ecb\u7ecd\u5224\u65ad\u65b9\u6cd5\uff09\uff0c\u4e8e\u662f\u5c31\u628a\u8fd9\u4e2a\u6570\u636e\u5305\u53d1\u5230\u7f51\u5173A\u3002\u7f51\u5173A\u901a\u8fc7\u8def\u7531\u534f\u8bae\uff0c\u53d1\u73b04\u53f7\u7535\u8111\u4f4d\u4e8e\u5b50\u7f51\u7edcB\uff0c\u53c8\u628a\u6570\u636e\u5305\u53d1\u7ed9\u7f51\u5173B\uff0c\u7f51\u5173B\u518d\u8f6c\u53d1\u52304\u53f7\u7535\u8111\u3002</p> <p>1\u53f7\u7535\u8111\u628a\u6570\u636e\u5305\u53d1\u5230\u7f51\u5173A\uff0c\u5fc5\u987b\u77e5\u9053\u7f51\u5173A\u7684MAC\u5730\u5740\u3002\u6240\u4ee5\uff0c\u6570\u636e\u5305\u7684\u76ee\u6807\u5730\u5740\uff0c\u5b9e\u9645\u4e0a\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff1a</p> \u573a\u666f \u6570\u636e\u5305\u5730\u5740 \u540c\u4e00\u4e2a\u5b50\u7f51\u7edc \u5bf9\u65b9\u7684MAC\u5730\u5740\uff0c\u5bf9\u65b9\u7684IP\u5730\u5740 \u975e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc \u7f51\u5173\u7684MAC\u5730\u5740\uff0c\u5bf9\u65b9\u7684IP\u5730\u5740 <p>\u53d1\u9001\u6570\u636e\u5305\u4e4b\u524d\uff0c\u7535\u8111\u5fc5\u987b\u5224\u65ad\u5bf9\u65b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u7136\u540e\u9009\u62e9\u76f8\u5e94\u7684MAC\u5730\u5740\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u6765\u770b\uff0c\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u600e\u4e48\u5b8c\u6210\u7684\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#\u516b\u7528\u6237\u7684\u4e0a\u7f51\u8bbe\u7f6e","title":"\u516b\u3001\u7528\u6237\u7684\u4e0a\u7f51\u8bbe\u7f6e","text":""},{"location":"http/internet_protocol_suite_part_ii/#81-\u9759\u6001ip\u5730\u5740","title":"8.1 \u9759\u6001IP\u5730\u5740","text":"<p>\u4f60\u4e70\u4e86\u4e00\u53f0\u65b0\u7535\u8111\uff0c\u63d2\u4e0a\u7f51\u7ebf\uff0c\u5f00\u673a\uff0c\u8fd9\u65f6\u7535\u8111\u80fd\u591f\u4e0a\u7f51\u5417\uff1f</p> <p></p> <p>\u901a\u5e38\u4f60\u5fc5\u987b\u505a\u4e00\u4e9b\u8bbe\u7f6e\u3002\u6709\u65f6\uff0c\u7ba1\u7406\u5458\uff08\u6216\u8005ISP\uff09\u4f1a\u544a\u8bc9\u4f60\u4e0b\u9762\u56db\u4e2a\u53c2\u6570\uff0c\u4f60\u628a\u5b83\u4eec\u586b\u5165\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8ba1\u7b97\u673a\u5c31\u80fd\u8fde\u4e0a\u7f51\u4e86\uff1a</p> <pre><code>    * \u672c\u673a\u7684IP\u5730\u5740\n    * \u5b50\u7f51\u63a9\u7801\n    * \u7f51\u5173\u7684IP\u5730\u5740\n    * DNS\u7684IP\u5730\u5740\n</code></pre> <p>\u4e0b\u56fe\u662fWindows\u7cfb\u7edf\u7684\u8bbe\u7f6e\u7a97\u53e3\u3002</p> <p></p> <p>\u8fd9\u56db\u4e2a\u53c2\u6570\u7f3a\u4e00\u4e0d\u53ef\uff0c\u540e\u6587\u4f1a\u89e3\u91ca\u4e3a\u4ec0\u4e48\u9700\u8981\u77e5\u9053\u5b83\u4eec\u624d\u80fd\u4e0a\u7f51\u3002\u7531\u4e8e\u5b83\u4eec\u662f\u7ed9\u5b9a\u7684\uff0c\u8ba1\u7b97\u673a\u6bcf\u6b21\u5f00\u673a\uff0c\u90fd\u4f1a\u5206\u5230\u540c\u6837\u7684IP\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u88ab\u79f0\u4f5c\"\u9759\u6001IP\u5730\u5740\u4e0a\u7f51\"\u3002</p> <p>\u4f46\u662f\uff0c\u8fd9\u6837\u7684\u8bbe\u7f6e\u5f88\u4e13\u4e1a\uff0c\u666e\u901a\u7528\u6237\u671b\u800c\u751f\u754f\uff0c\u800c\u4e14\u5982\u679c\u4e00\u53f0\u7535\u8111\u7684IP\u5730\u5740\u4fdd\u6301\u4e0d\u53d8\uff0c\u5176\u4ed6\u7535\u8111\u5c31\u4e0d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u5730\u5740\uff0c\u4e0d\u591f\u7075\u6d3b\u3002\u51fa\u4e8e\u8fd9\u4e24\u4e2a\u539f\u56e0\uff0c\u5927\u591a\u6570\u7528\u6237\u4f7f\u7528\"\u52a8\u6001IP\u5730\u5740\u4e0a\u7f51\"\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#82-\u52a8\u6001ip\u5730\u5740","title":"8.2 \u52a8\u6001IP\u5730\u5740","text":"<p>\u6240\u8c13\"\u52a8\u6001IP\u5730\u5740\"\uff0c\u6307\u8ba1\u7b97\u673a\u5f00\u673a\u540e\uff0c\u4f1a\u81ea\u52a8\u5206\u914d\u5230\u4e00\u4e2aIP\u5730\u5740\uff0c\u4e0d\u7528\u4eba\u4e3a\u8bbe\u5b9a\u3002\u5b83\u4f7f\u7528\u7684\u534f\u8bae\u53eb\u505aDHCP\u534f\u8bae\u3002</p> <p>\u8fd9\u4e2a\u534f\u8bae\u89c4\u5b9a\uff0c\u6bcf\u4e00\u4e2a\u5b50\u7f51\u7edc\u4e2d\uff0c\u6709\u4e00\u53f0\u8ba1\u7b97\u673a\u8d1f\u8d23\u7ba1\u7406\u672c\u7f51\u7edc\u7684\u6240\u6709IP\u5730\u5740\uff0c\u5b83\u53eb\u505a\"DHCP\u670d\u52a1\u5668\"\u3002\u65b0\u7684\u8ba1\u7b97\u673a\u52a0\u5165\u7f51\u7edc\uff0c\u5fc5\u987b\u5411\"DHCP\u670d\u52a1\u5668\"\u53d1\u9001\u4e00\u4e2a\"DHCP\u8bf7\u6c42\"\u6570\u636e\u5305\uff0c\u7533\u8bf7IP\u5730\u5740\u548c\u76f8\u5173\u7684\u7f51\u7edc\u53c2\u6570\u3002</p> <p>\u524d\u9762\u8bf4\u8fc7\uff0c\u5982\u679c\u4e24\u53f0\u8ba1\u7b97\u673a\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u5fc5\u987b\u77e5\u9053\u5bf9\u65b9\u7684MAC\u5730\u5740\u548cIP\u5730\u5740\uff0c\u624d\u80fd\u53d1\u9001\u6570\u636e\u5305\u3002\u4f46\u662f\uff0c\u65b0\u52a0\u5165\u7684\u8ba1\u7b97\u673a\u4e0d\u77e5\u9053\u8fd9\u4e24\u4e2a\u5730\u5740\uff0c\u600e\u4e48\u53d1\u9001\u6570\u636e\u5305\u5462\uff1f</p> <p>DHCP\u534f\u8bae\u505a\u4e86\u4e00\u4e9b\u5de7\u5999\u7684\u89c4\u5b9a\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#83-dhcp\u534f\u8bae","title":"8.3 DHCP\u534f\u8bae","text":"<p>\u9996\u5148\uff0c\u5b83\u662f\u4e00\u79cd\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u5efa\u7acb\u5728UDP\u534f\u8bae\u4e4b\u4e0a\uff0c\u6240\u4ee5\u6574\u4e2a\u6570\u636e\u5305\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>\uff081\uff09\u6700\u524d\u9762\u7684\"\u4ee5\u592a\u7f51\u6807\u5934\"\uff0c\u8bbe\u7f6e\u53d1\u51fa\u65b9\uff08\u672c\u673a\uff09\u7684MAC\u5730\u5740\u548c\u63a5\u6536\u65b9\uff08DHCP\u670d\u52a1\u5668\uff09\u7684MAC\u5730\u5740\u3002\u524d\u8005\u5c31\u662f\u672c\u673a\u7f51\u5361\u7684MAC\u5730\u5740\uff0c\u540e\u8005\u8fd9\u65f6\u4e0d\u77e5\u9053\uff0c\u5c31\u586b\u5165\u4e00\u4e2a\u5e7f\u64ad\u5730\u5740\uff1a<code>FF-FF-FF-FF-FF-FF</code>\u3002</p> <p>\uff082\uff09\u540e\u9762\u7684\"IP\u6807\u5934\"\uff0c\u8bbe\u7f6e\u53d1\u51fa\u65b9\u7684<code>IP\u5730\u5740</code>\u548c<code>\u63a5\u6536\u65b9\u7684IP\u5730\u5740</code>\u3002\u8fd9\u65f6\uff0c\u5bf9\u4e8e\u8fd9\u4e24\u8005\uff0c\u672c\u673a\u90fd\u4e0d\u77e5\u9053\u3002\u4e8e\u662f\uff0c\u53d1\u51fa\u65b9\u7684IP\u5730\u5740\u5c31\u8bbe\u4e3a<code>0.0.0.0</code>\uff0c\u63a5\u6536\u65b9\u7684IP\u5730\u5740\u8bbe\u4e3a<code>255.255.255.255</code>\u3002</p> <p>\uff083\uff09\u6700\u540e\u7684\"UDP\u6807\u5934\"\uff0c\u8bbe\u7f6e<code>\u53d1\u51fa\u65b9\u7684\u7aef\u53e3</code>\u548c<code>\u63a5\u6536\u65b9\u7684\u7aef\u53e3</code>\u3002\u8fd9\u4e00\u90e8\u5206\u662fDHCP\u534f\u8bae\u89c4\u5b9a\u597d\u7684\uff0c\u53d1\u51fa\u65b9\u662f<code>68\u7aef\u53e3</code>\uff0c\u63a5\u6536\u65b9\u662f<code>67\u7aef\u53e3</code>\u3002</p> <p>\u8fd9\u4e2a\u6570\u636e\u5305\u6784\u9020\u5b8c\u6210\u540e\uff0c\u5c31\u53ef\u4ee5\u53d1\u51fa\u4e86\u3002\u4ee5\u592a\u7f51\u662f\u5e7f\u64ad\u53d1\u9001\uff0c\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u7684\u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u6536\u5230\u4e86\u8fd9\u4e2a\u5305\u3002\u56e0\u4e3a\u63a5\u6536\u65b9\u7684MAC\u5730\u5740\u662f<code>FF-FF-FF-FF-FF-FF</code>\uff0c\u770b\u4e0d\u51fa\u662f\u53d1\u7ed9\u8c01\u7684\uff0c\u6240\u4ee5\u6bcf\u53f0\u6536\u5230\u8fd9\u4e2a\u5305\u7684\u8ba1\u7b97\u673a\uff0c\u8fd8\u5fc5\u987b\u5206\u6790\u8fd9\u4e2a\u5305\u7684IP\u5730\u5740\uff0c\u624d\u80fd\u786e\u5b9a\u662f\u4e0d\u662f\u53d1\u7ed9\u81ea\u5df1\u7684\u3002\u5f53\u770b\u5230\u53d1\u51fa\u65b9IP\u5730\u5740\u662f<code>0.0.0.0</code>\uff0c\u63a5\u6536\u65b9\u662f<code>255.255.255.255</code>\uff0c\u4e8e\u662fDHCP\u670d\u52a1\u5668\u77e5\u9053\"\u8fd9\u4e2a\u5305\u662f\u53d1\u7ed9\u6211\u7684\"\uff0c\u800c\u5176\u4ed6\u8ba1\u7b97\u673a\u5c31\u53ef\u4ee5\u4e22\u5f03\u8fd9\u4e2a\u5305\u3002</p> <p>\u63a5\u4e0b\u6765\uff0cDHCP\u670d\u52a1\u5668\u8bfb\u51fa\u8fd9\u4e2a\u5305\u7684\u6570\u636e\u5185\u5bb9\uff0c\u5206\u914d\u597dIP\u5730\u5740\uff0c\u53d1\u9001\u56de\u53bb\u4e00\u4e2a\"DHCP\u54cd\u5e94\"\u6570\u636e\u5305\u3002\u8fd9\u4e2a\u54cd\u5e94\u5305\u7684\u7ed3\u6784\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u4ee5\u592a\u7f51\u6807\u5934\u7684MAC\u5730\u5740\u662f\u53cc\u65b9\u7684\u7f51\u5361\u5730\u5740\uff0cIP\u6807\u5934\u7684IP\u5730\u5740\u662fDHCP\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff08\u53d1\u51fa\u65b9\uff09\u548c<code>255.255.255.255</code>\uff08\u63a5\u6536\u65b9\uff09\uff0cUDP\u6807\u5934\u7684\u7aef\u53e3\u662f<code>67</code>\uff08\u53d1\u51fa\u65b9\uff09\u548c<code>68</code>\uff08\u63a5\u6536\u65b9\uff09\uff0c\u5206\u914d\u7ed9\u8bf7\u6c42\u7aef\u7684IP\u5730\u5740\u548c\u672c\u7f51\u7edc\u7684\u5177\u4f53\u53c2\u6570\u5219\u5305\u542b\u5728Data\u90e8\u5206\u3002</p> <p>\u65b0\u52a0\u5165\u7684\u8ba1\u7b97\u673a\u6536\u5230\u8fd9\u4e2a\u54cd\u5e94\u5305\uff0c\u4e8e\u662f\u5c31\u77e5\u9053\u4e86\u81ea\u5df1\u7684IP\u5730\u5740\u3001\u5b50\u7f51\u63a9\u7801\u3001\u7f51\u5173\u5730\u5740\u3001DNS\u670d\u52a1\u5668\u7b49\u7b49\u53c2\u6570\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#84-\u4e0a\u7f51\u8bbe\u7f6e\u5c0f\u7ed3","title":"8.4 \u4e0a\u7f51\u8bbe\u7f6e\uff1a\u5c0f\u7ed3","text":"<p>\u8fd9\u4e2a\u90e8\u5206\uff0c\u9700\u8981\u8bb0\u4f4f\u7684\u5c31\u662f\u4e00\u70b9\uff1a\u4e0d\u7ba1\u662f\"\u9759\u6001IP\u5730\u5740\"\u8fd8\u662f\"\u52a8\u6001IP\u5730\u5740\"\uff0c\u7535\u8111\u4e0a\u7f51\u7684\u9996\u8981\u6b65\u9aa4\uff0c\u662f\u786e\u5b9a\u56db\u4e2a\u53c2\u6570\u3002\u8fd9\u56db\u4e2a\u503c\u5f88\u91cd\u8981\uff0c\u503c\u5f97\u91cd\u590d\u4e00\u904d\uff1a</p> <pre><code>    * \u672c\u673a\u7684IP\u5730\u5740\n    * \u5b50\u7f51\u63a9\u7801\n    * \u7f51\u5173\u7684IP\u5730\u5740\n    * DNS\u7684IP\u5730\u5740\n</code></pre> <p>\u6709\u4e86\u8fd9\u51e0\u4e2a\u6570\u503c\uff0c\u7535\u8111\u5c31\u53ef\u4ee5\u4e0a\u7f51\"\u51b2\u6d6a\"\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u7f51\u9875\u7684\u65f6\u5019\uff0c\u4e92\u8054\u7f51\u534f\u8bae\u662f\u600e\u4e48\u8fd0\u4f5c\u7684\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#\u4e5d\u4e00\u4e2a\u5b9e\u4f8b\u8bbf\u95ee\u7f51\u9875","title":"\u4e5d\u3001\u4e00\u4e2a\u5b9e\u4f8b\uff1a\u8bbf\u95ee\u7f51\u9875","text":""},{"location":"http/internet_protocol_suite_part_ii/#91-\u672c\u673a\u53c2\u6570","title":"9.1 \u672c\u673a\u53c2\u6570","text":"<p>\u6211\u4eec\u5047\u5b9a\uff0c\u7ecf\u8fc7\u4e0a\u4e00\u8282\u7684\u6b65\u9aa4\uff0c\u7528\u6237\u8bbe\u7f6e\u597d\u4e86\u81ea\u5df1\u7684\u7f51\u7edc\u53c2\u6570\uff1a</p> <pre><code>    * \u672c\u673a\u7684IP\u5730\u5740\uff1a192.168.1.100\n    * \u5b50\u7f51\u63a9\u7801\uff1a255.255.255.0\n    * \u7f51\u5173\u7684IP\u5730\u5740\uff1a192.168.1.1\n    * DNS\u7684IP\u5730\u5740\uff1a8.8.8.8\n</code></pre> <p>\u7136\u540e\u4ed6\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u60f3\u8981\u8bbf\u95eeGoogle\uff0c\u5728\u5730\u5740\u680f\u8f93\u5165\u4e86\u7f51\u5740\uff1a<code>www.google.com</code>\u3002</p> <p></p> <p>\u8fd9\u610f\u5473\u7740\uff0c\u6d4f\u89c8\u5668\u8981\u5411Google\u53d1\u9001\u4e00\u4e2a\u7f51\u9875\u8bf7\u6c42\u7684\u6570\u636e\u5305\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#92-dns\u534f\u8bae","title":"9.2 DNS\u534f\u8bae","text":"<p>\u6211\u4eec\u77e5\u9053\uff0c\u53d1\u9001\u6570\u636e\u5305\uff0c\u5fc5\u987b\u8981\u77e5\u9053\u5bf9\u65b9\u7684IP\u5730\u5740\u3002\u4f46\u662f\uff0c\u73b0\u5728\uff0c\u6211\u4eec\u53ea\u77e5\u9053\u7f51\u5740<code>www.google.com</code>\uff0c\u4e0d\u77e5\u9053\u5b83\u7684IP\u5730\u5740\u3002</p> <p>DNS\u534f\u8bae\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\uff0c\u5c06\u8fd9\u4e2a\u7f51\u5740\u8f6c\u6362\u6210IP\u5730\u5740\u3002\u5df2\u77e5DNS\u670d\u52a1\u5668\u4e3a<code>8.8.8.8</code>\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u8fd9\u4e2a\u5730\u5740\u53d1\u9001\u4e00\u4e2aDNS\u6570\u636e\u5305\uff08<code>53</code>\u7aef\u53e3\uff09\u3002</p> <p></p> <p>\u7136\u540e\uff0cDNS\u670d\u52a1\u5668\u505a\u51fa\u54cd\u5e94\uff0c\u544a\u8bc9\u6211\u4eecGoogle\u7684IP\u5730\u5740\u662f<code>172.194.72.105</code>\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u77e5\u9053\u4e86\u5bf9\u65b9\u7684IP\u5730\u5740\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#93-\u5b50\u7f51\u63a9\u7801","title":"9.3 \u5b50\u7f51\u63a9\u7801","text":"<p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8981\u5224\u65ad\uff0c\u8fd9\u4e2aIP\u5730\u5740\u662f\u4e0d\u662f\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u8fd9\u5c31\u8981\u7528\u5230\u5b50\u7f51\u63a9\u7801\u3002</p> <p>\u5df2\u77e5\u5b50\u7f51\u63a9\u7801\u662f<code>255.255.255.0</code>\uff0c\u672c\u673a\u7528\u5b83\u5bf9\u81ea\u5df1\u7684IP\u5730\u5740<code>192.168.1.100</code>\uff0c\u505a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684AND\u8fd0\u7b97\uff08\u4e24\u4e2a\u6570\u4f4d\u90fd\u4e3a<code>1</code>\uff0c\u7ed3\u679c\u4e3a<code>1</code>\uff0c\u5426\u5219\u4e3a<code>0</code>\uff09\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e3a<code>192.168.1.0</code>\uff1b\u7136\u540e\u5bf9Google\u7684IP\u5730\u5740<code>172.194.72.105</code>\u4e5f\u505a\u4e00\u4e2aAND\u8fd0\u7b97\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e3a<code>172.194.72.0</code>\u3002\u8fd9\u4e24\u4e2a\u7ed3\u679c\u4e0d\u76f8\u7b49\uff0c\u6240\u4ee5\u7ed3\u8bba\u662f\uff0cGoogle\u4e0e\u672c\u673a\u4e0d\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u8981\u5411Google\u53d1\u9001\u6570\u636e\u5305\uff0c\u5fc5\u987b\u901a\u8fc7\u7f51\u5173<code>192.168.1.1</code>\u8f6c\u53d1\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u63a5\u6536\u65b9\u7684MAC\u5730\u5740\u5c06\u662f\u7f51\u5173\u7684MAC\u5730\u5740\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#94-\u5e94\u7528\u5c42\u534f\u8bae","title":"9.4 \u5e94\u7528\u5c42\u534f\u8bae","text":"<p>\u6d4f\u89c8\u7f51\u9875\u7528\u7684\u662fHTTP\u534f\u8bae\uff0c\u5b83\u7684\u6574\u4e2a\u6570\u636e\u5305\u6784\u9020\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>HTTP\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>    GET / HTTP/1.1\n    Host: www.google.com\n\u3000  Connection: keep-alive\n\u3000  User-Agent: Mozilla/5.0 (Windows NT 6.1) ......\n\u3000  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n\u3000  Accept-Encoding: gzip,deflate,sdch\n\u3000  Accept-Language: zh-CN,zh;q=0.8\n\u3000  Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3\n\u3000  Cookie: ... ...\n</code></pre> <p>\u6211\u4eec\u5047\u5b9a\u8fd9\u4e2a\u90e8\u5206\u7684\u957f\u5ea6\u4e3a4960\u5b57\u8282\uff0c\u5b83\u4f1a\u88ab\u5d4c\u5728TCP\u6570\u636e\u5305\u4e4b\u4e2d\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#95-tcp\u534f\u8bae","title":"9.5 TCP\u534f\u8bae","text":"<p>TCP\u6570\u636e\u5305\u9700\u8981\u8bbe\u7f6e\u7aef\u53e3\uff0c\u63a5\u6536\u65b9\uff08Google\uff09\u7684HTTP\u7aef\u53e3\u9ed8\u8ba4\u662f<code>80</code>\uff0c\u53d1\u9001\u65b9\uff08\u672c\u673a\uff09\u7684\u7aef\u53e3\u662f\u4e00\u4e2a\u968f\u673a\u751f\u6210\u7684<code>1024-65535</code>\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5047\u5b9a\u4e3a<code>51775</code>\u3002</p> <p>TCP\u6570\u636e\u5305\u7684\u6807\u5934\u957f\u5ea6\u4e3a<code>20</code>\u5b57\u8282\uff0c\u52a0\u4e0a\u5d4c\u5165HTTP\u7684\u6570\u636e\u5305\uff0c\u603b\u957f\u5ea6\u53d8\u4e3a<code>4980</code>\u5b57\u8282\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#96-ip\u534f\u8bae","title":"9.6 IP\u534f\u8bae","text":"<p>\u7136\u540e\uff0cTCP\u6570\u636e\u5305\u518d\u5d4c\u5165IP\u6570\u636e\u5305\u3002IP\u6570\u636e\u5305\u9700\u8981\u8bbe\u7f6e\u53cc\u65b9\u7684IP\u5730\u5740\uff0c\u8fd9\u662f\u5df2\u77e5\u7684\uff0c\u53d1\u9001\u65b9\u662f<code>192.168.1.100</code>\uff08\u672c\u673a\uff09\uff0c\u63a5\u6536\u65b9\u662f<code>172.194.72.105</code>\uff08Google\uff09\u3002</p> <p>IP\u6570\u636e\u5305\u7684\u6807\u5934\u957f\u5ea6\u4e3a<code>20</code>\u5b57\u8282\uff0c\u52a0\u4e0a\u5d4c\u5165\u7684TCP\u6570\u636e\u5305\uff0c\u603b\u957f\u5ea6\u53d8\u4e3a5000\u5b57\u8282\u3002</p>"},{"location":"http/internet_protocol_suite_part_ii/#97-\u4ee5\u592a\u7f51\u534f\u8bae","title":"9.7 \u4ee5\u592a\u7f51\u534f\u8bae","text":"<p>\u6700\u540e\uff0cIP\u6570\u636e\u5305\u5d4c\u5165\u4ee5\u592a\u7f51\u6570\u636e\u5305\u3002\u4ee5\u592a\u7f51\u6570\u636e\u5305\u9700\u8981\u8bbe\u7f6e\u53cc\u65b9\u7684MAC\u5730\u5740\uff0c\u53d1\u9001\u65b9\u4e3a\u672c\u673a\u7684\u7f51\u5361MAC\u5730\u5740\uff0c\u63a5\u6536\u65b9\u4e3a\u7f51\u5173<code>192.168.1.1</code>\u7684MAC\u5730\u5740\uff08\u901a\u8fc7ARP\u534f\u8bae\u5f97\u5230\uff09\u3002</p> <p>\u4ee5\u592a\u7f51\u6570\u636e\u5305\u7684\u6570\u636e\u90e8\u5206\uff0c\u6700\u5927\u957f\u5ea6\u4e3a<code>1500</code>\u5b57\u8282\uff0c\u800c\u73b0\u5728\u7684IP\u6570\u636e\u5305\u957f\u5ea6\u4e3a<code>5000</code>\u5b57\u8282\u3002\u56e0\u6b64\uff0cIP\u6570\u636e\u5305\u5fc5\u987b\u5206\u5272\u6210\u56db\u4e2a\u5305\u3002\u56e0\u4e3a\u6bcf\u4e2a\u5305\u90fd\u6709\u81ea\u5df1\u7684IP\u6807\u5934\uff0820\u5b57\u8282\uff09\uff0c\u6240\u4ee5\u56db\u4e2a\u5305\u7684IP\u6570\u636e\u5305\u7684\u957f\u5ea6\u5206\u522b\u4e3a<code>1500</code>\u3001<code>1500</code>\u3001<code>1500</code>\u3001<code>560</code>\u3002</p> <p></p>"},{"location":"http/internet_protocol_suite_part_ii/#98-\u670d\u52a1\u5668\u7aef\u54cd\u5e94","title":"9.8 \u670d\u52a1\u5668\u7aef\u54cd\u5e94","text":"<p>\u7ecf\u8fc7\u591a\u4e2a\u7f51\u5173\u7684\u8f6c\u53d1\uff0cGoogle\u7684\u670d\u52a1\u5668<code>172.194.72.105</code>\uff0c\u6536\u5230\u4e86\u8fd9\u56db\u4e2a\u4ee5\u592a\u7f51\u6570\u636e\u5305\u3002</p> <p>\u6839\u636eIP\u6807\u5934\u7684\u5e8f\u53f7\uff0cGoogle\u5c06\u56db\u4e2a\u5305\u62fc\u8d77\u6765\uff0c\u53d6\u51fa\u5b8c\u6574\u7684TCP\u6570\u636e\u5305\uff0c\u7136\u540e\u8bfb\u51fa\u91cc\u9762\u7684\"HTTP\u8bf7\u6c42\"\uff0c\u63a5\u7740\u505a\u51fa\"HTTP\u54cd\u5e94\"\uff0c\u518d\u7528TCP\u534f\u8bae\u53d1\u56de\u6765\u3002</p> <p>\u672c\u673a\u6536\u5230HTTP\u54cd\u5e94\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u7f51\u9875\u663e\u793a\u51fa\u6765\uff0c\u5b8c\u6210\u4e00\u6b21\u7f51\u7edc\u901a\u4fe1\u3002</p> <p></p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u5230\u6b64\u4e3a\u6b62\uff0c\u867d\u7136\u7ecf\u8fc7\u4e86\u7b80\u5316\uff0c\u4f46\u5b83\u5927\u81f4\u4e0a\u53cd\u6620\u4e86\u4e92\u8054\u7f51\u534f\u8bae\u7684\u6574\u4e2a\u901a\u4fe1\u8fc7\u7a0b\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/restapi/","title":"Restful API \u8bbe\u8ba1\u6307\u5357","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - RESTful API \u8bbe\u8ba1\u6307\u5357</p> <p>\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\uff0c\u5206\u4e3a\u524d\u7aef\u548c\u540e\u7aef\u4e24\u4e2a\u90e8\u5206\u3002\u5f53\u524d\u7684\u53d1\u5c55\u8d8b\u52bf\uff0c\u5c31\u662f\u524d\u7aef\u8bbe\u5907\u5c42\u51fa\u4e0d\u7a77\uff08\u624b\u673a\u3001\u5e73\u677f\u3001\u684c\u9762\u7535\u8111\u3001\u5176\u4ed6\u4e13\u7528\u8bbe\u5907\u2026\u2026\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u5fc5\u987b\u6709\u4e00\u79cd\u7edf\u4e00\u7684\u673a\u5236\uff0c\u65b9\u4fbf\u4e0d\u540c\u7684\u524d\u7aef\u8bbe\u5907\u4e0e\u540e\u7aef\u8fdb\u884c\u901a\u4fe1\u3002\u8fd9\u5bfc\u81f4API\u6784\u67b6\u7684\u6d41\u884c\uff0c\u751a\u81f3\u51fa\u73b0\u201cAPI First\u201d\u7684\u8bbe\u8ba1\u601d\u60f3\u3002</p> <p>RESTful API\u662f\u76ee\u524d\u6bd4\u8f83\u6210\u719f\u7684\u4e00\u5957\u4e92\u8054\u7f51\u5e94\u7528\u7a0b\u5e8f\u7684API\u8bbe\u8ba1\u7406\u8bba\u3002\u6211\u4ee5\u524d\u5199\u8fc7\u4e00\u7bc7\u300a\u7406\u89e3RESTful\u67b6\u6784\u300b\uff0c\u63a2\u8ba8\u5982\u4f55\u7406\u89e3\u8fd9\u4e2a\u6982\u5ff5\u3002\u4eca\u5929\uff0c\u6211\u5c06\u4ecb\u7ecdRESTful API\u7684\u8bbe\u8ba1\u7ec6\u8282\uff0c\u63a2\u8ba8\u5982\u4f55\u8bbe\u8ba1\u4e00\u5957\u5408\u7406\u3001\u597d\u7528\u7684API\u3002\u6211\u7684\u4e3b\u8981\u53c2\u8003\u8d44\u6599\u662f\u8fd9\u7bc7\u300aPrinciples of good RESTful API Design\u300b\u3002</p> <p></p>"},{"location":"http/restapi/#\u4e00\u534f\u8bae","title":"\u4e00\u3001\u534f\u8bae","text":"<p>\u603b\u662f\u4f7f\u7528HTTPs\u534f\u8bae\u3002</p>"},{"location":"http/restapi/#\u4e8c\u57df\u540d","title":"\u4e8c\u3001\u57df\u540d","text":"<p>\u5e94\u8be5\u5c3d\u91cf\u5c06API\u90e8\u7f72\u5728\u4e13\u7528\u57df\u540d\u4e4b\u4e0b\u3002</p> <pre><code>https://api.example.com\n</code></pre> <p>\u5982\u679c\u786e\u5b9aAPI\u5f88\u7b80\u5355\uff0c\u4e0d\u4f1a\u6709\u8fdb\u4e00\u6b65\u6269\u5c55\uff0c\u53ef\u4ee5\u8003\u8651\u653e\u5728\u4e3b\u57df\u540d\u4e0b\u3002</p> <pre><code>https://example.org/api/\n</code></pre>"},{"location":"http/restapi/#\u4e09\u7248\u672cversioning","title":"\u4e09\u3001\u7248\u672c\uff08Versioning\uff09","text":"<p>\u5e94\u8be5\u5c06API\u7684\u7248\u672c\u53f7\u653e\u5165URL\u3002</p> <pre><code>https://api.example.com/v1/\n</code></pre> <p>\u53e6\u4e00\u79cd\u505a\u6cd5\u662f\uff0c\u5c06\u7248\u672c\u53f7\u653e\u5728HTTP\u5934\u4fe1\u606f\u4e2d\uff0c\u4f46\u4e0d\u5982\u653e\u5165URL\u65b9\u4fbf\u548c\u76f4\u89c2\u3002</p>"},{"location":"http/restapi/#\u56db\u8def\u5f84endpoint","title":"\u56db\u3001\u8def\u5f84\uff08Endpoint\uff09","text":"<p>\u8def\u5f84\u53c8\u79f0\u201c\u7ec8\u70b9\u201d\uff08endpoint\uff09\uff0c\u8868\u793aAPI\u7684\u5177\u4f53\u7f51\u5740\u3002</p> <p>\u5728RESTful\u67b6\u6784\u4e2d\uff0c\u6bcf\u4e2a\u7f51\u5740\u4ee3\u8868\u4e00\u79cd\u8d44\u6e90\uff08resource\uff09\uff0c\u6240\u4ee5\u7f51\u5740\u4e2d\u4e0d\u80fd\u6709\u52a8\u8bcd\uff0c\u53ea\u80fd\u6709\u540d\u8bcd\uff0c\u800c\u4e14\u6240\u7528\u7684\u540d\u8bcd\u5f80\u5f80\u4e0e\u6570\u636e\u5e93\u7684\u8868\u683c\u540d\u5bf9\u5e94\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u8868\u90fd\u662f\u540c\u79cd\u8bb0\u5f55\u7684\u201c\u96c6\u5408\u201d\uff08collection\uff09\uff0c\u6240\u4ee5API\u4e2d\u7684\u540d\u8bcd\u4e5f\u5e94\u8be5\u4f7f\u7528\u590d\u6570\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6709\u4e00\u4e2aAPI\u63d0\u4f9b\u52a8\u7269\u56ed\uff08zoo\uff09\u7684\u4fe1\u606f\uff0c\u8fd8\u5305\u62ec\u5404\u79cd\u52a8\u7269\u548c\u96c7\u5458\u7684\u4fe1\u606f\uff0c\u5219\u5b83\u7684\u8def\u5f84\u5e94\u8be5\u8bbe\u8ba1\u6210\u4e0b\u9762\u8fd9\u6837\u3002</p> <ul> <li>https://api.example.com/v1/zoos</li> <li>https://api.example.com/v1/animals</li> <li>https://api.example.com/v1/employees</li> </ul>"},{"location":"http/restapi/#\u4e94http\u52a8\u8bcd","title":"\u4e94\u3001HTTP\u52a8\u8bcd","text":"<p>\u5bf9\u4e8e\u8d44\u6e90\u7684\u5177\u4f53\u64cd\u4f5c\u7c7b\u578b\uff0c\u7531HTTP\u52a8\u8bcd\u8868\u793a\u3002</p> <p>\u5e38\u7528\u7684HTTP\u52a8\u8bcd\u6709\u4e0b\u9762\u4e94\u4e2a\uff08\u62ec\u53f7\u91cc\u662f\u5bf9\u5e94\u7684SQL\u547d\u4ee4\uff09\u3002</p> <ul> <li>GET\uff08SELECT\uff09\uff1a\u4ece\u670d\u52a1\u5668\u53d6\u51fa\u8d44\u6e90\uff08\u4e00\u9879\u6216\u591a\u9879\uff09\u3002</li> <li>POST\uff08CREATE\uff09\uff1a\u5728\u670d\u52a1\u5668\u65b0\u5efa\u4e00\u4e2a\u8d44\u6e90\u3002</li> <li>PUT\uff08UPDATE\uff09\uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u540e\u7684\u5b8c\u6574\u8d44\u6e90\uff09\u3002</li> <li>PATCH\uff08UPDATE\uff09\uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u7684\u5c5e\u6027\uff09\u3002</li> <li>DELETE\uff08DELETE\uff09\uff1a\u4ece\u670d\u52a1\u5668\u5220\u9664\u8d44\u6e90\u3002</li> </ul> <p>\u8fd8\u6709\u4e24\u4e2a\u4e0d\u5e38\u7528\u7684HTTP\u52a8\u8bcd\u3002</p> <ul> <li>HEAD\uff1a\u83b7\u53d6\u8d44\u6e90\u7684\u5143\u6570\u636e\u3002</li> <li>OPTIONS\uff1a\u83b7\u53d6\u4fe1\u606f\uff0c\u5173\u4e8e\u8d44\u6e90\u7684\u54ea\u4e9b\u5c5e\u6027\u662f\u5ba2\u6237\u7aef\u53ef\u4ee5\u6539\u53d8\u7684\u3002</li> </ul> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50\u3002</p> <ul> <li>GET /zoos\uff1a\u5217\u51fa\u6240\u6709\u52a8\u7269\u56ed</li> <li>POST /zoos\uff1a\u65b0\u5efa\u4e00\u4e2a\u52a8\u7269\u56ed</li> <li>GET /zoos/ID\uff1a\u83b7\u53d6\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u4fe1\u606f</li> <li>PUT /zoos/ID\uff1a\u66f4\u65b0\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u4fe1\u606f\uff08\u63d0\u4f9b\u8be5\u52a8\u7269\u56ed\u7684\u5168\u90e8\u4fe1\u606f\uff09</li> <li>PATCH /zoos/ID\uff1a\u66f4\u65b0\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u4fe1\u606f\uff08\u63d0\u4f9b\u8be5\u52a8\u7269\u56ed\u7684\u90e8\u5206\u4fe1\u606f\uff09</li> <li>DELETE /zoos/ID\uff1a\u5220\u9664\u67d0\u4e2a\u52a8\u7269\u56ed</li> <li>GET /zoos/ID/animals\uff1a\u5217\u51fa\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u6240\u6709\u52a8\u7269</li> <li>DELETE /zoos/ID/animals/ID\uff1a\u5220\u9664\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u6307\u5b9a\u52a8\u7269</li> </ul>"},{"location":"http/restapi/#\u516d\u8fc7\u6ee4\u4fe1\u606ffiltering","title":"\u516d\u3001\u8fc7\u6ee4\u4fe1\u606f\uff08Filtering\uff09","text":"<p>\u5982\u679c\u8bb0\u5f55\u6570\u91cf\u5f88\u591a\uff0c\u670d\u52a1\u5668\u4e0d\u53ef\u80fd\u90fd\u5c06\u5b83\u4eec\u8fd4\u56de\u7ed9\u7528\u6237\u3002API\u5e94\u8be5\u63d0\u4f9b\u53c2\u6570\uff0c\u8fc7\u6ee4\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u53c2\u6570\u3002</p> <ul> <li>?limit=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u6570\u91cf</li> <li>?offset=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002</li> <li>?sortby=name&amp;order=asc\uff1a\u6307\u5b9a\u8fd4\u56de\u7ed3\u679c\u6309\u7167\u54ea\u4e2a\u5c5e\u6027\u6392\u5e8f\uff0c\u4ee5\u53ca\u6392\u5e8f\u987a\u5e8f\u3002</li> <li>?animal_type_id=1\uff1a\u6307\u5b9a\u7b5b\u9009\u6761\u4ef6</li> </ul> <p>\u53c2\u6570\u7684\u8bbe\u8ba1\u5141\u8bb8\u5b58\u5728\u5197\u4f59\uff0c\u5373\u5141\u8bb8API\u8def\u5f84\u548cURL\u53c2\u6570\u5076\u5c14\u6709\u91cd\u590d\u3002\u6bd4\u5982\uff0cGET /zoo/ID/animals \u4e0e GET /animals?zoo_id=ID \u7684\u542b\u4e49\u662f\u76f8\u540c\u7684\u3002</p>"},{"location":"http/restapi/#\u4e03\u72b6\u6001\u7801status-codes","title":"\u4e03\u3001\u72b6\u6001\u7801\uff08Status Codes\uff09","text":"<p>\u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u7684\u72b6\u6001\u7801\u548c\u63d0\u793a\u4fe1\u606f\uff0c\u5e38\u89c1\u7684\u6709\u4ee5\u4e0b\u4e00\u4e9b\uff08\u65b9\u62ec\u53f7\u4e2d\u662f\u8be5\u72b6\u6001\u7801\u5bf9\u5e94\u7684HTTP\u52a8\u8bcd\uff09\u3002</p> <ul> <li>200 OK \u2013 [GET]\uff1a\u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7528\u6237\u8bf7\u6c42\u7684\u6570\u636e\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\uff08Idempotent\uff09\u3002</li> <li>201 CREATED \u2013 [POST/PUT/PATCH]\uff1a\u7528\u6237\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u6210\u529f\u3002</li> <li>204 NO CONTENT \u2013 [DELETE]\uff1a\u7528\u6237\u5220\u9664\u6570\u636e\u6210\u529f\u3002</li> <li>400 INVALID REQUEST \u2013 [POST/PUT/PATCH]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u6709\u9519\u8bef\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002\u3002</li> <li>404 NOT FOUND \u2013 [*]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u9488\u5bf9\u7684\u662f\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002</li> <li>500 INTERNAL SERVER ERROR \u2013 [*]\uff1a\u670d\u52a1\u5668\u53d1\u751f\u9519\u8bef\uff0c\u7528\u6237\u5c06\u65e0\u6cd5\u5224\u65ad\u53d1\u51fa\u7684\u8bf7\u6c42\u662f\u5426\u6210\u529f\u3002</li> </ul> <p>\u72b6\u6001\u7801\u7684\u5b8c\u5168\u5217\u8868\u53c2\u89c1\u8fd9\u91cc\u3002</p>"},{"location":"http/restapi/#\u516b\u8fd4\u56de\u7ed3\u679c","title":"\u516b\u3001\u8fd4\u56de\u7ed3\u679c","text":"<p>\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u8be5\u7b26\u5408\u4ee5\u4e0b\u89c4\u8303\u3002</p> <ul> <li>GET /collection\uff1a\u8fd4\u56de\u8d44\u6e90\u5bf9\u8c61\u7684\u5217\u8868\uff08\u6570\u7ec4\uff09</li> <li>GET /collection/resource\uff1a\u8fd4\u56de\u5355\u4e2a\u8d44\u6e90\u5bf9\u8c61</li> <li>POST /collection\uff1a\u8fd4\u56de\u65b0\u751f\u6210\u7684\u8d44\u6e90\u5bf9\u8c61</li> <li>PUT /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61</li> <li>PATCH /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61</li> <li>DELETE /collection/resource\uff1a\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6587\u6863</li> </ul>"},{"location":"http/restapi/#\u4e5d\u5176\u4ed6","title":"\u4e5d\u3001\u5176\u4ed6","text":"<p>\uff083\uff09API\u5e94\u8be5\u662fHypermedia\u7684\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u4e2d\u63d0\u4f9b\u94fe\u63a5\uff0c\u8fde\u5411\u5176\u4ed6API\u65b9\u6cd5\uff0c\u4f7f\u5f97\u7528\u6237\u4e0d\u67e5\u6587\u6863\uff0c\u4e5f\u77e5\u9053\u4e0b\u4e00\u6b65\u5e94\u8be5\u505a\u4ec0\u4e48\u3002</p> <p>\u6bd4\u5982\uff0c\u5f53\u7528\u6237\u5411api.example.com\u7684\u6839\u76ee\u5f55\u53d1\u51fa\u8bf7\u6c42\uff0c\u4f1a\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u6587\u6863\u3002</p> <pre><code>{\"link\": {\n  \"rel\":   \"collection https://www.example.com/zoos\",\n  \"href\":  \"https://api.example.com/zoos\",\n  \"title\": \"List of zoos\",\n  \"type\":  \"application/vnd.yourformat+json\"\n}}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u8868\u793a\uff0c\u6587\u6863\u4e2d\u6709\u4e00\u4e2alink\u5c5e\u6027\uff0c\u7528\u6237\u8bfb\u53d6\u8fd9\u4e2a\u5c5e\u6027\u5c31\u77e5\u9053\u4e0b\u4e00\u6b65\u8be5\u8c03\u7528\u4ec0\u4e48API\u4e86\u3002rel\u8868\u793a\u8fd9\u4e2aAPI\u4e0e\u5f53\u524d\u7f51\u5740\u7684\u5173\u7cfb\uff08collection\u5173\u7cfb\uff0c\u5e76\u7ed9\u51fa\u8be5collection\u7684\u7f51\u5740\uff09\uff0chref\u8868\u793aAPI\u7684\u8def\u5f84\uff0ctitle\u8868\u793aAPI\u7684\u6807\u9898\uff0ctype\u8868\u793a\u8fd4\u56de\u7c7b\u578b\u3002</p> <p>Hypermedia API\u7684\u8bbe\u8ba1\u88ab\u79f0\u4e3aHATEOAS\u3002Github\u7684API\u5c31\u662f\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u8bbf\u95eeapi.github.com\u4f1a\u5f97\u5230\u4e00\u4e2a\u6240\u6709\u53ef\u7528API\u7684\u7f51\u5740\u5217\u8868\u3002</p> <pre><code>{\n  \"current_user_url\": \"https://api.github.com/user\",\n  \"authorizations_url\": \"https://api.github.com/authorizations\",\n  // ...\n}\n</code></pre> <p>\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u60f3\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u53bb\u8bbf\u95eeapi.github.com/user\uff0c\u7136\u540e\u5c31\u5f97\u5230\u4e86\u4e0b\u9762\u7ed3\u679c\u3002</p> <pre><code>{\n  \"message\": \"Requires authentication\",\n  \"documentation_url\": \"https://developer.github.com/v3\"\n}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u8868\u793a\uff0c\u670d\u52a1\u5668\u7ed9\u51fa\u4e86\u63d0\u793a\u4fe1\u606f\uff0c\u4ee5\u53ca\u6587\u6863\u7684\u7f51\u5740\u3002</p>"},{"location":"http/restapi/#\u5341\u5176\u4ed6","title":"\u5341\u3001\u5176\u4ed6","text":"<p>\uff081\uff09API\u7684\u8eab\u4efd\u8ba4\u8bc1\u5e94\u8be5\u4f7f\u7528OAuth 2.0\u6846\u67b6\u3002</p> <p>\uff082\uff09\u670d\u52a1\u5668\u8fd4\u56de\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5e94\u8be5\u4f7f\u7528JSON\uff0c\u4e0d\u5e94\u4f7f\u7528XML\uff08\u66f4\u4e0d\u5fc5\u63d0SOAP\u4e86\uff09\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/restapibsetp/","title":"RESTful API \u6700\u4f73\u5b9e\u8df5","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - RESTful API \u6700\u4f73\u5b9e\u8df5</p> <p>RESTful \u662f\u76ee\u524d\u6700\u6d41\u884c\u7684 API \u8bbe\u8ba1\u89c4\u8303\uff0c\u7528\u4e8e Web \u6570\u636e\u63a5\u53e3\u7684\u8bbe\u8ba1\u3002</p> <p>\u5b83\u7684\u5927\u539f\u5219\u5bb9\u6613\u628a\u63e1\uff0c\u4f46\u662f\u7ec6\u8282\u4e0d\u5bb9\u6613\u505a\u5bf9\u3002\u8fd9\u7bc7\u6587\u7ae0\u5c31\u662f\u603b\u7ed3 API \u7684\u8bbe\u8ba1\u7ec6\u8282\uff0c\u4ecb\u7ecd\u600e\u4e48\u8bbe\u8ba1\u51fa\u6613\u4e8e\u7406\u89e3\u548c\u4f7f\u7528\u7684 API\u3002</p> <p></p>"},{"location":"http/restapibsetp/#\u4e00url-\u8bbe\u8ba1","title":"\u4e00\u3001URL \u8bbe\u8ba1","text":""},{"location":"http/restapibsetp/#11-\u52a8\u8bcd--\u8c13\u8bed","title":"1.1 \u52a8\u8bcd + \u8c13\u8bed","text":"<p>RESTful \u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6570\u636e\u64cd\u4f5c\u6307\u4ee4\u90fd\u662f\u201c\u52a8\u8bcd + \u8c13\u8bed\u201d\u7684\u7ed3\u6784\u3002\u6bd4\u5982\uff0c<code>GET /articles</code>\u8fd9\u4e2a\u547d\u4ee4\uff0c<code>GET</code>\u662f\u52a8\u8bcd\uff0c<code>/articles</code>\u662f\u8c13\u8bed\u3002</p> <p>\u52a8\u8bcd\u901a\u5e38\u5c31\u662f\u4e94\u79cd HTTP \u65b9\u6cd5\uff0c\u5bf9\u5e94 CRUD \u64cd\u4f5c\u3002</p> <ul> <li>GET\uff1a\u8bfb\u53d6\uff08Read\uff09</li> <li>POST\uff1a\u65b0\u5efa\uff08Create\uff09</li> <li>PUT\uff1a\u66f4\u65b0\uff08Update\uff09</li> <li>PATCH\uff1a\u66f4\u65b0\uff08Update\uff09\uff0c\u901a\u5e38\u662f\u90e8\u5206\u66f4\u65b0</li> <li>DELETE\uff1a\u5220\u9664\uff08Delete\uff09</li> </ul> <p>\u6839\u636e HTTP \u89c4\u8303\uff0c\u52a8\u8bcd\u4e00\u5f8b\u5927\u5199\u3002</p>"},{"location":"http/restapibsetp/#12-\u52a8\u8bcd\u7684\u8986\u76d6","title":"1.2 \u52a8\u8bcd\u7684\u8986\u76d6","text":"<p>\u6709\u4e9b\u5ba2\u6237\u7aef\u53ea\u80fd\u4f7f\u7528<code>GET</code>\u548c<code>POST</code>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u3002\u670d\u52a1\u5668\u5fc5\u987b\u63a5\u53d7<code>POST</code>\u6a21\u62df\u5176\u4ed6\u4e09\u4e2a\u65b9\u6cd5\uff08<code>PUT</code>\u3001<code>PATCH</code>\u3001<code>DELETE</code>\uff09\u3002</p> <p>\u8fd9\u65f6\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684 HTTP \u8bf7\u6c42\uff0c\u8981\u52a0\u4e0a<code>X-HTTP-Method-Override</code>\u5c5e\u6027\uff0c\u544a\u8bc9\u670d\u52a1\u5668\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u4e2a\u52a8\u8bcd\uff0c\u8986\u76d6<code>POST</code>\u65b9\u6cd5\u3002</p> <pre><code>POST /api/Person/4 HTTP/1.1  \nX-HTTP-Method-Override: PUT\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c<code>X-HTTP-Method-Override</code>\u6307\u5b9a\u672c\u6b21\u8bf7\u6c42\u7684\u65b9\u6cd5\u662f<code>PUT</code>\uff0c\u800c\u4e0d\u662f<code>POST</code>\u3002</p>"},{"location":"http/restapibsetp/#13-\u8c13\u8bed\u5fc5\u987b\u662f\u540d\u8bcd","title":"1.3 \u8c13\u8bed\u5fc5\u987b\u662f\u540d\u8bcd","text":"<p>\u8c13\u8bed\u5c31\u662f API \u7684 URL\uff0c\u662f HTTP \u52a8\u8bcd\u4f5c\u7528\u7684\u5bf9\u8c61\u3002\u5b83\u5e94\u8be5\u662f\u540d\u8bcd\uff0c\u4e0d\u80fd\u662f\u52a8\u8bcd\u3002\u6bd4\u5982\uff0c<code>/articles</code>\u8fd9\u4e2a URL \u5c31\u662f\u6b63\u786e\u7684\uff0c\u800c\u4e0b\u9762\u7684 URL \u4e0d\u662f\u540d\u8bcd\uff0c\u6240\u4ee5\u90fd\u662f\u9519\u8bef\u7684\u3002</p> <ul> <li>/getAllCars</li> <li>/createNewCar</li> <li>/deleteAllRedCars</li> </ul>"},{"location":"http/restapibsetp/#14-\u590d\u6570-url","title":"1.4 \u590d\u6570 URL","text":"<p>\u65e2\u7136 URL \u662f\u540d\u8bcd\uff0c\u90a3\u4e48\u5e94\u8be5\u4f7f\u7528\u590d\u6570\uff0c\u8fd8\u662f\u5355\u6570\uff1f</p> <p>\u8fd9\u6ca1\u6709\u7edf\u4e00\u7684\u89c4\u5b9a\uff0c\u4f46\u662f\u5e38\u89c1\u7684\u64cd\u4f5c\u662f\u8bfb\u53d6\u4e00\u4e2a\u96c6\u5408\uff0c\u6bd4\u5982<code>GET /articles</code>\uff08\u8bfb\u53d6\u6240\u6709\u6587\u7ae0\uff09\uff0c\u8fd9\u91cc\u660e\u663e\u5e94\u8be5\u662f\u590d\u6570\u3002</p> <p>\u4e3a\u4e86\u7edf\u4e00\u8d77\u89c1\uff0c\u5efa\u8bae\u90fd\u4f7f\u7528\u590d\u6570 URL\uff0c\u6bd4\u5982<code>GET /articles/2</code>\u8981\u597d\u4e8e<code>GET /article/2</code>\u3002</p>"},{"location":"http/restapibsetp/#15-\u907f\u514d\u591a\u7ea7-url","title":"1.5 \u907f\u514d\u591a\u7ea7 URL","text":"<p>\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u8d44\u6e90\u9700\u8981\u591a\u7ea7\u5206\u7c7b\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u5199\u51fa\u591a\u7ea7\u7684 URL\uff0c\u6bd4\u5982\u83b7\u53d6\u67d0\u4e2a\u4f5c\u8005\u7684\u67d0\u4e00\u7c7b\u6587\u7ae0\u3002</p> <pre><code>GET /authors/12/categories/2\n</code></pre> <p>\u8fd9\u79cd URL \u4e0d\u5229\u4e8e\u6269\u5c55\uff0c\u8bed\u4e49\u4e5f\u4e0d\u660e\u786e\uff0c\u5f80\u5f80\u8981\u60f3\u4e00\u4f1a\uff0c\u624d\u80fd\u660e\u767d\u542b\u4e49\u3002</p> <p>\u66f4\u597d\u7684\u505a\u6cd5\u662f\uff0c\u9664\u4e86\u7b2c\u4e00\u7ea7\uff0c\u5176\u4ed6\u7ea7\u522b\u90fd\u7528\u67e5\u8be2\u5b57\u7b26\u4e32\u8868\u8fbe\u3002</p> <pre><code>GET /authors/12?categories=2\n</code></pre> <p>\u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u67e5\u8be2\u5df2\u53d1\u5e03\u7684\u6587\u7ae0\u3002\u4f60\u53ef\u80fd\u4f1a\u8bbe\u8ba1\u6210\u4e0b\u9762\u7684 URL\u3002</p> <pre><code>GET /articles/published\n</code></pre> <p>\u67e5\u8be2\u5b57\u7b26\u4e32\u7684\u5199\u6cd5\u660e\u663e\u66f4\u597d\u3002</p> <pre><code>GET /articles?published=true\n</code></pre>"},{"location":"http/restapibsetp/#\u4e8c\u72b6\u6001\u7801","title":"\u4e8c\u3001\u72b6\u6001\u7801","text":""},{"location":"http/restapibsetp/#21-\u72b6\u6001\u7801\u5fc5\u987b\u7cbe\u786e","title":"2.1 \u72b6\u6001\u7801\u5fc5\u987b\u7cbe\u786e","text":"<p>\u5ba2\u6237\u7aef\u7684\u6bcf\u4e00\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u90fd\u5fc5\u987b\u7ed9\u51fa\u56de\u5e94\u3002\u56de\u5e94\u5305\u62ec\u72b6\u6001\u7801\u548c\u6570\u636e\u4e24\u90e8\u5206\u3002</p> <p>\u72b6\u6001\u7801\u5c31\u662f\u4e00\u4e2a\u4e09\u4f4d\u6570\uff0c\u5206\u6210\u4e94\u4e2a\u7c7b\u522b\u3002</p> <ul> <li><code>1xx</code>\uff1a\u76f8\u606f</li> <li><code>2xx</code>\uff1a\u64cd\u4f5c\u6210\u529f</li> <li><code>3xx</code>\uff1a\u91cd\u5b9a\u5411</li> <li><code>4xx</code>\uff1a\u5ba2\u6237\u7aef\u9519\u8bef</li> <li><code>5xx</code>\uff1a\u670d\u52a1\u5668\u9519\u8bef</li> </ul> <p>\u8fd9\u4e94\u5927\u7c7b\u603b\u5171\u5305\u542b100\u591a\u79cd\u72b6\u6001\u7801\uff0c\u8986\u76d6\u4e86\u7edd\u5927\u90e8\u5206\u53ef\u80fd\u9047\u5230\u7684\u60c5\u51b5\u3002\u6bcf\u4e00\u79cd\u72b6\u6001\u7801\u90fd\u6709\u6807\u51c6\u7684\uff08\u6216\u8005\u7ea6\u5b9a\u7684\uff09\u89e3\u91ca\uff0c\u5ba2\u6237\u7aef\u53ea\u9700\u67e5\u770b\u72b6\u6001\u7801\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u53d1\u751f\u4e86\u4ec0\u4e48\u60c5\u51b5\uff0c\u6240\u4ee5\u670d\u52a1\u5668\u5e94\u8be5\u8fd4\u56de\u5c3d\u53ef\u80fd\u7cbe\u786e\u7684\u72b6\u6001\u7801\u3002</p> <p>API \u4e0d\u9700\u8981<code>1xx</code>\u72b6\u6001\u7801\uff0c\u4e0b\u9762\u4ecb\u7ecd\u5176\u4ed6\u56db\u7c7b\u72b6\u6001\u7801\u7684\u7cbe\u786e\u542b\u4e49\u3002</p>"},{"location":"http/restapibsetp/#22-2xx-\u72b6\u6001\u7801","title":"2.2 2xx \u72b6\u6001\u7801","text":"<p><code>200</code>\u72b6\u6001\u7801\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u66f4\u7cbe\u786e\u7684\u72b6\u6001\u7801\u3002</p> <ul> <li>GET: 200 OK</li> <li>POST: 201 Created</li> <li>PUT: 200 OK</li> <li>PATCH: 200 OK</li> <li>DELETE: 204 No Content</li> </ul> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c<code>POST</code>\u8fd4\u56de<code>201</code>\u72b6\u6001\u7801\uff0c\u8868\u793a\u751f\u6210\u4e86\u65b0\u7684\u8d44\u6e90\uff1b<code>DELETE</code>\u8fd4\u56de<code>204</code>\u72b6\u6001\u7801\uff0c\u8868\u793a\u8d44\u6e90\u5df2\u7ecf\u4e0d\u5b58\u5728\u3002</p> <p>\u6b64\u5916\uff0c<code>202 Accepted</code>\u72b6\u6001\u7801\u8868\u793a\u670d\u52a1\u5668\u5df2\u7ecf\u6536\u5230\u8bf7\u6c42\uff0c\u4f46\u8fd8\u672a\u8fdb\u884c\u5904\u7406\uff0c\u4f1a\u5728\u672a\u6765\u518d\u5904\u7406\uff0c\u901a\u5e38\u7528\u4e8e\u5f02\u6b65\u64cd\u4f5c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 202 Accepted\n\n{\n  \"task\": {\n    \"href\": \"/api/company/job-management/jobs/2130040\",\n    \"id\": \"2130040\"\n  }\n}\n</code></pre>"},{"location":"http/restapibsetp/#23-3xx-\u72b6\u6001\u7801","title":"2.3 3xx \u72b6\u6001\u7801","text":"<p>API \u7528\u4e0d\u5230<code>301</code>\u72b6\u6001\u7801\uff08\u6c38\u4e45\u91cd\u5b9a\u5411\uff09\u548c<code>302</code>\u72b6\u6001\u7801\uff08\u6682\u65f6\u91cd\u5b9a\u5411\uff0c<code>307</code>\u4e5f\u662f\u8fd9\u4e2a\u542b\u4e49\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u7531\u5e94\u7528\u7ea7\u522b\u8fd4\u56de\uff0c\u6d4f\u89c8\u5668\u4f1a\u76f4\u63a5\u8df3\u8f6c\uff0cAPI \u7ea7\u522b\u53ef\u4ee5\u4e0d\u8003\u8651\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>API \u7528\u5230\u7684<code>3xx</code>\u72b6\u6001\u7801\uff0c\u4e3b\u8981\u662f<code>303 See Other</code>\uff0c\u8868\u793a\u53c2\u8003\u53e6\u4e00\u4e2a URL\u3002\u5b83\u4e0e<code>302</code>\u548c<code>307</code>\u7684\u542b\u4e49\u4e00\u6837\uff0c\u4e5f\u662f\u201c\u6682\u65f6\u91cd\u5b9a\u5411\u201d\uff0c\u533a\u522b\u5728\u4e8e<code>302</code>\u548c<code>307</code>\u7528\u4e8e<code>GET</code>\u8bf7\u6c42\uff0c\u800c<code>303</code>\u7528\u4e8e<code>POST</code>\u3001<code>PUT</code>\u548c<code>DELETE</code>\u8bf7\u6c42\u3002\u6536\u5230<code>303</code>\u4ee5\u540e\uff0c\u6d4f\u89c8\u5668\u4e0d\u4f1a\u81ea\u52a8\u8df3\u8f6c\uff0c\u800c\u4f1a\u8ba9\u7528\u6237\u81ea\u5df1\u51b3\u5b9a\u4e0b\u4e00\u6b65\u600e\u4e48\u529e\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 303 See Other\nLocation: /api/orders/12345\n</code></pre>"},{"location":"http/restapibsetp/#24-4xx-\u72b6\u6001\u7801","title":"2.4 4xx \u72b6\u6001\u7801","text":"<p><code>4xx</code>\u72b6\u6001\u7801\u8868\u793a\u5ba2\u6237\u7aef\u9519\u8bef\uff0c\u4e3b\u8981\u6709\u4e0b\u9762\u51e0\u79cd\u3002</p> <p><code>400 Bad Request</code>\uff1a\u670d\u52a1\u5668\u4e0d\u7406\u89e3\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u672a\u505a\u4efb\u4f55\u5904\u7406\u3002</p> <p><code>401 Unauthorized</code>\uff1a\u7528\u6237\u672a\u63d0\u4f9b\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\uff0c\u6216\u8005\u6ca1\u6709\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u3002</p> <p><code>403 Forbidden</code>\uff1a\u7528\u6237\u901a\u8fc7\u4e86\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u662f\u4e0d\u5177\u6709\u8bbf\u95ee\u8d44\u6e90\u6240\u9700\u7684\u6743\u9650\u3002</p> <p><code>404 Not Found</code>\uff1a\u6240\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u5b58\u5728\uff0c\u6216\u4e0d\u53ef\u7528\u3002</p> <p><code>405 Method Not Allowed</code>\uff1a\u7528\u6237\u5df2\u7ecf\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u662f\u6240\u7528\u7684 HTTP \u65b9\u6cd5\u4e0d\u5728\u4ed6\u7684\u6743\u9650\u4e4b\u5185\u3002</p> <p><code>410 Gone</code>\uff1a\u6240\u8bf7\u6c42\u7684\u8d44\u6e90\u5df2\u4ece\u8fd9\u4e2a\u5730\u5740\u8f6c\u79fb\uff0c\u4e0d\u518d\u53ef\u7528\u3002</p> <p><code>415 Unsupported Media Type</code>\uff1a\u5ba2\u6237\u7aef\u8981\u6c42\u7684\u8fd4\u56de\u683c\u5f0f\u4e0d\u652f\u6301\u3002\u6bd4\u5982\uff0cAPI \u53ea\u80fd\u8fd4\u56de JSON \u683c\u5f0f\uff0c\u4f46\u662f\u5ba2\u6237\u7aef\u8981\u6c42\u8fd4\u56de XML \u683c\u5f0f\u3002</p> <p><code>422 Unprocessable Entity</code> \uff1a\u5ba2\u6237\u7aef\u4e0a\u4f20\u7684\u9644\u4ef6\u65e0\u6cd5\u5904\u7406\uff0c\u5bfc\u81f4\u8bf7\u6c42\u5931\u8d25\u3002</p> <p><code>429 Too Many Requests</code>\uff1a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6b21\u6570\u8d85\u8fc7\u9650\u989d\u3002</p>"},{"location":"http/restapibsetp/#25-5xx-\u72b6\u6001\u7801","title":"2.5 5xx \u72b6\u6001\u7801","text":"<p><code>5xx</code>\u72b6\u6001\u7801\u8868\u793a\u670d\u52a1\u7aef\u9519\u8bef\u3002\u4e00\u822c\u6765\u8bf4\uff0cAPI \u4e0d\u4f1a\u5411\u7528\u6237\u900f\u9732\u670d\u52a1\u5668\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u6240\u4ee5\u53ea\u8981\u4e24\u4e2a\u72b6\u6001\u7801\u5c31\u591f\u4e86\u3002</p> <p><code>500 Internal Server Error</code>\uff1a\u5ba2\u6237\u7aef\u8bf7\u6c42\u6709\u6548\uff0c\u670d\u52a1\u5668\u5904\u7406\u65f6\u53d1\u751f\u4e86\u610f\u5916\u3002</p> <p><code>503 Service Unavailable</code>\uff1a\u670d\u52a1\u5668\u65e0\u6cd5\u5904\u7406\u8bf7\u6c42\uff0c\u4e00\u822c\u7528\u4e8e\u7f51\u7ad9\u7ef4\u62a4\u72b6\u6001\u3002</p>"},{"location":"http/restapibsetp/#\u4e09\u670d\u52a1\u5668\u56de\u5e94","title":"\u4e09\u3001\u670d\u52a1\u5668\u56de\u5e94","text":""},{"location":"http/restapibsetp/#31-\u4e0d\u8981\u8fd4\u56de\u7eaf\u672c\u6587","title":"3.1 \u4e0d\u8981\u8fd4\u56de\u7eaf\u672c\u6587","text":"<p>API \u8fd4\u56de\u7684\u6570\u636e\u683c\u5f0f\uff0c\u4e0d\u5e94\u8be5\u662f\u7eaf\u6587\u672c\uff0c\u800c\u5e94\u8be5\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u8fd4\u56de\u6807\u51c6\u7684\u7ed3\u6784\u5316\u6570\u636e\u3002\u6240\u4ee5\uff0c\u670d\u52a1\u5668\u56de\u5e94\u7684 HTTP \u5934\u7684<code>Content-Type</code>\u5c5e\u6027\u8981\u8bbe\u4e3a<code>application/json</code>\u3002</p> <p>\u5ba2\u6237\u7aef\u8bf7\u6c42\u65f6\uff0c\u4e5f\u8981\u660e\u786e\u544a\u8bc9\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u63a5\u53d7 JSON \u683c\u5f0f\uff0c\u5373\u8bf7\u6c42\u7684 HTTP \u5934\u7684<code>ACCEPT</code>\u5c5e\u6027\u4e5f\u8981\u8bbe\u6210<code>application/json</code>\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>GET /orders/2 HTTP/1.1 \nAccept: application/json\n</code></pre>"},{"location":"http/restapibsetp/#32-\u53d1\u751f\u9519\u8bef\u65f6\u4e0d\u8981\u8fd4\u56de-200-\u72b6\u6001\u7801","title":"3.2 \u53d1\u751f\u9519\u8bef\u65f6\uff0c\u4e0d\u8981\u8fd4\u56de 200 \u72b6\u6001\u7801","text":"<p>\u6709\u4e00\u79cd\u4e0d\u6070\u5f53\u7684\u505a\u6cd5\u662f\uff0c\u5373\u4f7f\u53d1\u751f\u9519\u8bef\uff0c\u4e5f\u8fd4\u56de<code>200</code>\u72b6\u6001\u7801\uff0c\u628a\u9519\u8bef\u4fe1\u606f\u653e\u5728\u6570\u636e\u4f53\u91cc\u9762\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"status\": \"failure\",\n  \"data\": {\n    \"error\": \"Expected at least two items in list.\"\n  }\n}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u89e3\u6790\u6570\u636e\u4f53\u4ee5\u540e\uff0c\u624d\u80fd\u5f97\u77e5\u64cd\u4f5c\u5931\u8d25\u3002</p> <p>\u8fd9\u5f20\u505a\u6cd5\u5b9e\u9645\u4e0a\u53d6\u6d88\u4e86\u72b6\u6001\u7801\uff0c\u8fd9\u662f\u5b8c\u5168\u4e0d\u53ef\u53d6\u7684\u3002\u6b63\u786e\u7684\u505a\u6cd5\u662f\uff0c\u72b6\u6001\u7801\u53cd\u6620\u53d1\u751f\u7684\u9519\u8bef\uff0c\u5177\u4f53\u7684\u9519\u8bef\u4fe1\u606f\u653e\u5728\u6570\u636e\u4f53\u91cc\u9762\u8fd4\u56de\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  \"error\": \"Invalid payoad.\",\n  \"detail\": {\n     \"surname\": \"This field is required.\"\n  }\n}\n</code></pre>"},{"location":"http/restapibsetp/#33-\u63d0\u4f9b\u94fe\u63a5","title":"3.3 \u63d0\u4f9b\u94fe\u63a5","text":"<p>API \u7684\u4f7f\u7528\u8005\u672a\u5fc5\u77e5\u9053\uff0cURL \u662f\u600e\u4e48\u8bbe\u8ba1\u7684\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\uff0c\u5728\u56de\u5e94\u4e2d\uff0c\u7ed9\u51fa\u76f8\u5173\u94fe\u63a5\uff0c\u4fbf\u4e8e\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u7528\u6237\u53ea\u8981\u8bb0\u4f4f\u4e00\u4e2a URL\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u5176\u4ed6\u7684 URL\u3002\u8fd9\u79cd\u65b9\u6cd5\u53eb\u505a HATEOAS\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0cGitHub \u7684 API \u90fd\u5728 api.github.com \u8fd9\u4e2a\u57df\u540d\u3002\u8bbf\u95ee\u5b83\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5176\u4ed6 URL\u3002</p> <pre><code>{\n  ...\n  \"feeds_url\": \"https://api.github.com/feeds\",\n  \"followers_url\": \"https://api.github.com/user/followers\",\n  \"following_url\": \"https://api.github.com/user/following{/target}\",\n  \"gists_url\": \"https://api.github.com/gists{/gist_id}\",\n  \"hub_url\": \"https://api.github.com/hub\",\n  ...\n}\n</code></pre> <p>\u4e0a\u9762\u7684\u56de\u5e94\u4e2d\uff0c\u6311\u4e00\u4e2a URL \u8bbf\u95ee\uff0c\u53c8\u53ef\u4ee5\u5f97\u5230\u522b\u7684 URL\u3002\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u4e0d\u9700\u8981\u8bb0\u4f4f  URL \u8bbe\u8ba1\uff0c\u53ea\u8981\u4ece api.github.com \u4e00\u6b65\u6b65\u67e5\u627e\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>HATEOAS \u7684\u683c\u5f0f\u6ca1\u6709\u7edf\u4e00\u89c4\u5b9a\uff0c\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0cGitHub \u5c06\u5b83\u4eec\u4e0e\u5176\u4ed6\u5c5e\u6027\u653e\u5728\u4e00\u8d77\u3002\u66f4\u597d\u7684\u505a\u6cd5\u5e94\u8be5\u662f\uff0c\u5c06\u76f8\u5173\u94fe\u63a5\u4e0e\u5176\u4ed6\u5c5e\u6027\u5206\u5f00\u3002</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"status\": \"In progress\",\n   \"links\": {[\n    { \"rel\":\"cancel\", \"method\": \"delete\", \"href\":\"/api/status/12345\" } ,\n    { \"rel\":\"edit\", \"method\": \"put\", \"href\":\"/api/status/12345\" }\n  ]}\n}\n</code></pre>"},{"location":"http/restapibsetp/#\u56db\u53c2\u8003\u94fe\u63a5","title":"\u56db\u3001\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>RESTful API Design: 13 Best Practices to Make Your Users Happy, by Florimond Manca</li> <li>API design, by MicroSoft Azure</li> </ul> <p>\uff08\u5b8c\uff09</p>"},{"location":"sysdesign/perm_design/","title":"\u6743\u9650\u7cfb\u7edf\u7684\u8bbe\u8ba1","text":"<p>\u8f6c\u8f7d\u81ea: \u7816\u5bb6\u7a74\u8005\u53eb\u517d \u7684 \u6743\u9650\u7cfb\u7edf\u7684\u8bbe\u8ba1</p> <p></p>"},{"location":"sysdesign/perm_design/#\u524d\u8a00","title":"\u524d\u8a00","text":"<p>\u6743\u9650\u7ba1\u7406\u662f\u6240\u6709\u540e\u53f0\u7cfb\u7edf\u7684\u90fd\u4f1a\u6d89\u53ca\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u5bf9\u4e0d\u540c\u7684\u4eba\u8bbf\u95ee\u8d44\u6e90\u8fdb\u884c\u6743\u9650\u7684\u63a7\u5236\uff0c\u907f\u514d\u56e0\u6743\u9650\u63a7\u5236\u7f3a\u5931\u6216\u64cd\u4f5c\u4e0d\u5f53\u5f15\u53d1\u7684\u98ce\u9669\u95ee\u9898\uff0c\u5982\u64cd\u4f5c\u9519\u8bef\uff0c\u9690\u79c1\u6570\u636e\u6cc4\u9732\u7b49\u95ee\u9898\u3002</p> <p>\u76ee\u524d\u5728\u516c\u53f8\u8d1f\u8d23\u6743\u9650\u8fd9\u5757,\u6240\u4ee5\u5bf9\u6743\u9650\u8fd9\u5757\u7684\u8bbe\u8ba1\u6bd4\u8f83\u719f\u6089,\u516c\u53f8\u91c7\u7528\u5fae\u670d\u52a1\u67b6\u6784,\u6743\u9650\u7cfb\u7edf\u81ea\u7136\u5c31\u72ec\u7acb\u51fa\u6765\u4e86,\u5176\u4ed6\u4e1a\u52a1\u7cfb\u7edf\u5305\u62ec\u5546\u54c1\u4e2d\u5fc3,\u8ba2\u5355\u4e2d\u5fc3,\u7528\u6237\u4e2d\u5fc3,\u4ed3\u5e93\u7cfb\u7edf,\u5c0f\u7a0b\u5e8f,\u591a\u4e2aAPP\u7b49\u5341\u51e0\u4e2a\u7cfb\u7edf\u548c\u7ec8\u7aef</p>"},{"location":"sysdesign/perm_design/#1\u6743\u9650\u6a21\u578b","title":"1.\u6743\u9650\u6a21\u578b","text":"<p>\u8fc4\u4eca\u4e3a\u6b62\u6700\u4e3a\u666e\u53ca\u7684\u6743\u9650\u8bbe\u8ba1\u6a21\u578b\u662fRBAC\u6a21\u578b,\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236(Role-Based Access Control)</p>"},{"location":"sysdesign/perm_design/#11-rbac0\u6a21\u578b","title":"1.1 RBAC0\u6a21\u578b","text":"<p>RBAC0\u6a21\u578b\u5982\u4e0b:</p> <p></p> <p>\u8fd9\u662f\u6743\u9650\u6700\u57fa\u7840\u4e5f\u662f\u6700\u6838\u5fc3\u7684\u6a21\u578b,\u5b83\u5305\u62ec\u7528\u6237/\u89d2\u8272/\u6743\u9650,\u5176\u4e2d\u7528\u6237\u548c\u89d2\u8272\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb,\u89d2\u8272\u548c\u6743\u9650\u4e5f\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u3002</p> <p>\u7528\u6237\u662f\u53d1\u8d77\u64cd\u4f5c\u7684\u4e3b\u4f53,\u6309\u7c7b\u578b\u5206\u53ef\u5206\u4e3a2B\u548c2C\u7528\u6237,\u53ef\u4ee5\u662f\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u7684\u7528\u6237,\u53ef\u4ee5\u662fOA\u7cfb\u7edf\u7684\u5185\u90e8\u5458\u5de5,\u4e5f\u53ef\u4ee5\u662f\u9762\u5411C\u7aef\u7684\u7528\u6237,\u6bd4\u5982\u963f\u91cc\u4e91\u7684\u7528\u6237\u3002</p> <p>\u89d2\u8272\u8d77\u5230\u4e86\u6865\u6881\u7684\u4f5c\u7528,\u8fde\u63a5\u4e86\u7528\u6237\u548c\u6743\u9650\u7684\u5173\u7cfb,\u6bcf\u4e2a\u89d2\u8272\u53ef\u4ee5\u5173\u8054\u591a\u4e2a\u6743\u9650,\u540c\u65f6\u4e00\u4e2a\u7528\u6237\u5173\u8054\u591a\u4e2a\u89d2\u8272,\u90a3\u4e48\u8fd9\u4e2a\u7528\u6237\u5c31\u6709\u4e86\u591a\u4e2a\u89d2\u8272\u7684\u591a\u4e2a\u6743\u9650\u3002</p> <p>\u6709\u4eba\u4f1a\u95ee\u4e86\u4e3a\u4ec0\u4e48\u7528\u6237\u4e0d\u76f4\u63a5\u5173\u8054\u6743\u9650\u5462? \u5728\u7528\u6237\u57fa\u6570\u5c0f\u7684\u7cfb\u7edf,\u6bd4\u598220\u4e2a\u4eba\u7684\u5c0f\u7cfb\u7edf,\u7ba1\u7406\u5458\u53ef\u4ee5\u76f4\u63a5\u628a\u7528\u6237\u548c\u6743\u9650\u5173\u8054,\u5de5\u4f5c\u91cf\u5e76\u4e0d\u5927,\u9009\u62e9\u4e00\u4e2a\u7528\u6237\u52fe\u9009\u4e0b\u9700\u8981\u7684\u6743\u9650\u5c31\u5b8c\u4e8b\u4e86\u3002 \u4f46\u662f\u5728\u5b9e\u9645\u4f01\u4e1a\u7cfb\u7edf\u4e2d,\u7528\u6237\u57fa\u6570\u6bd4\u8f83\u5927,\u5176\u4e2d\u5f88\u591a\u4eba\u7684\u6743\u9650\u90fd\u662f\u4e00\u6837\u7684,\u5c31\u662f\u4e2a\u666e\u901a\u8bbf\u95ee\u6743\u9650,\u5982\u679c\u7ba1\u7406\u5458\u7ed9100\u4eba\u751a\u81f3\u66f4\u591a\u6388\u6743,\u5de5\u4f5c\u91cf\u5de8\u5927\u3002</p> <p>\u8fd9\u5c31\u5f15\u5165\u4e86\"\u89d2\u8272(Role)\"\u6982\u5ff5,\u4e00\u4e2a\u89d2\u8272\u53ef\u4ee5\u4e0e\u591a\u4e2a\u7528\u6237\u5173\u8054,\u7ba1\u7406\u5458\u53ea\u9700\u8981\u628a\u8be5\u89d2\u8272\u8d4b\u4e88\u7528\u6237,\u90a3\u4e48\u7528\u6237\u5c31\u6709\u4e86\u8be5\u89d2\u8272\u4e0b\u7684\u6240\u6709\u6743\u9650,\u8fd9\u6837\u8bbe\u8ba1\u65e2\u63d0\u5347\u4e86\u6548\u7387,\u4e5f\u6709\u5f88\u5927\u7684\u62d3\u5c55\u6027\u3002</p> <p>\u6743\u9650\u662f\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u7684\u8d44\u6e90,\u5305\u62ec\u3010\u9875\u9762\u6743\u9650\u3011,\u3010\u64cd\u4f5c\u6743\u9650\u3011,\u3010\u6570\u636e\u6743\u9650\u3011:</p> \u9875\u9762\u6743\u9650 \u5373\u7528\u6237\u767b\u5f55\u7cfb\u7edf\u53ef\u4ee5\u770b\u5230\u7684\u9875\u9762,\u7531\u83dc\u5355\u6765\u63a7\u5236,\u83dc\u5355\u5305\u62ec\u4e00\u7ea7\u83dc\u5355\u548c\u4e8c\u7ea7\u83dc\u5355,\u53ea\u8981\u7528\u6237\u6709\u4e00\u7ea7\u548c\u4e8c\u7ea7\u83dc\u5355\u7684\u6743\u9650,\u90a3\u4e48\u7528\u6237\u5c31\u53ef\u4ee5\u8bbf\u95ee\u9875\u9762 \u64cd\u4f5c\u6743\u9650 \u5373\u9875\u9762\u7684\u529f\u80fd\u6309\u94ae,\u5305\u62ec\u67e5\u770b,\u65b0\u589e,\u4fee\u6539,\u5220\u9664,\u5ba1\u6838\u7b49,\u7528\u6237\u70b9\u51fb\u5220\u9664\u6309\u94ae\u65f6,\u540e\u53f0\u4f1a\u6821\u9a8c\u7528\u6237\u89d2\u8272\u4e0b\u7684\u6240\u6709\u6743\u9650\u662f\u5426\u5305\u542b\u8be5\u5220\u9664\u6743\u9650,\u5982\u679c\u662f,\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c,\u53cd\u4e4b\u63d0\u793a\u65e0\u6743\u9650\u3002\u6709\u7684\u7cfb\u7edf\u8981\u6c42\"\u53ef\u89c1\u5373\u53ef\u64cd\u4f5c\",\u610f\u601d\u662f\u5982\u679c\u9875\u9762\u4e0a\u80fd\u591f\u770b\u5230\u64cd\u4f5c\u6309\u94ae,\u90a3\u4e48\u7528\u6237\u5c31\u53ef\u4ee5\u64cd\u4f5c,\u8981\u5b9e\u73b0\u6b64\u9700\u6c42,\u8fd9\u91cc\u5c31\u9700\u8981\u524d\u7aef\u6765\u914d\u5408,\u524d\u7aef\u5f00\u53d1\u628a\u7528\u6237\u7684\u6743\u9650\u4fe1\u606f\u7f13\u5b58,\u5728\u9875\u9762\u5224\u65ad\u7528\u6237\u662f\u5426\u5305\u542b\u6b64\u6743\u9650,\u5982\u679c\u6709,\u5c31\u663e\u793a\u8be5\u6309\u94ae,\u5982\u679c\u6ca1\u6709,\u5c31\u9690\u85cf\u8be5\u6309\u94ae\u3002\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u63d0\u5347\u4e86\u7528\u6237\u4f53\u9a8c,\u4f46\u662f\u5728\u5b9e\u9645\u573a\u666f\u53ef\u81ea\u884c\u9009\u62e9\u662f\u5426\u9700\u8981\u8fd9\u6837\u505a \u6570\u636e\u6743\u9650 \u6570\u636e\u6743\u9650\u5c31\u662f\u7528\u6237\u5728\u540c\u4e00\u9875\u9762\u770b\u5230\u7684\u6570\u636e\u662f\u4e0d\u540c\u7684,\u6bd4\u5982\u8d22\u52a1\u90e8\u53ea\u80fd\u770b\u5230\u5176\u90e8\u95e8\u4e0b\u7684\u7528\u6237\u6570\u636e,\u91c7\u8d2d\u90e8\u53ea\u770b\u91c7\u8d2d\u90e8\u7684\u6570\u636e,\u5728\u4e00\u4e9b\u5927\u578b\u7684\u516c\u53f8,\u5168\u56fd\u6709\u5f88\u591a\u57ce\u5e02\u548c\u5206\u516c\u53f8,\u6bd4\u5982\u676d\u5dde\u7528\u6237\u767b\u5f55\u7cfb\u7edf\u53ea\u80fd\u770b\u5230\u676d\u5dde\u7684\u6570\u636e,\u4e0a\u6d77\u7528\u6237\u53ea\u80fd\u770b\u5230\u4e0a\u6d77\u7684\u6570\u636e,\u89e3\u51b3\u65b9\u6848\u4e00\u822c\u662f\u628a\u6570\u636e\u548c\u5177\u4f53\u7684\u7ec4\u7ec7\u67b6\u6784\u5173\u8054\u8d77\u6765,\u4e3e\u4e2a\u4f8b\u5b50,\u518d\u7ed9\u7528\u6237\u6388\u6743\u7684\u65f6\u5019,\u7528\u6237\u9009\u62e9\u67d0\u4e2a\u89d2\u8272\u540c\u65f6\u7ed1\u5b9a\u7ec4\u7ec7\u5982\u8d22\u52a1\u90e8\u6216\u8005\u5408\u80a5\u5206\u516c\u53f8,\u90a3\u4e48\u8be5\u7528\u6237\u5c31\u6709\u4e86\u8be5\u89d2\u8272\u4e0b\u8d22\u52a1\u90e8\u6216\u5408\u80a5\u5206\u516c\u53f8\u4e0b\u7684\u7684\u6570\u636e\u6743\u9650\u3002 <p></p> <p>\u4ee5\u4e0a\u662fRBAC\u7684\u6838\u5fc3\u8bbe\u8ba1\u53ca\u6a21\u578b\u5206\u6790,\u6b64\u6a21\u578b\u4e5f\u53eb\u505aRBAC0,\u800c\u57fa\u4e8e\u6838\u5fc3\u6982\u5ff5\u4e4b\u4e0a,RBAC\u8fd8\u63d0\u4f9b\u4e86\u6269\u5c55\u6a21\u5f0f\u3002\u5305\u62ecRBAC1,RBAC2,RBAC3\u6a21\u578b\u3002\u4e0b\u9762\u4ecb\u7ecd\u8fd9\u4e09\u79cd\u7c7b\u578b</p>"},{"location":"sysdesign/perm_design/#12-rbac1\u6a21\u578b","title":"1.2 RBAC1\u6a21\u578b","text":"<p>\u6b64\u6a21\u578b\u5f15\u5165\u4e86\u89d2\u8272\u7ee7\u627f(Hierarchical Role)\u6982\u5ff5,\u5373\u89d2\u8272\u5177\u6709\u4e0a\u4e0b\u7ea7\u7684\u5173\u7cfb,\u89d2\u8272\u95f4\u7684\u7ee7\u627f\u5173\u7cfb\u53ef\u5206\u4e3a\u4e00\u822c\u7ee7\u627f\u5173\u7cfb\u548c\u53d7\u9650\u7ee7\u627f\u5173\u7cfb\u3002 \u4e00\u822c\u7ee7\u627f\u5173\u7cfb\u4ec5\u8981\u6c42\u89d2\u8272\u7ee7\u627f\u5173\u7cfb\u662f\u4e00\u4e2a\u7edd\u5bf9\u504f\u5e8f\u5173\u7cfb\uff0c\u5141\u8bb8\u89d2\u8272\u95f4\u7684\u591a\u7ee7\u627f\u3002 \u800c\u53d7\u9650\u7ee7\u627f\u5173\u7cfb\u5219\u8fdb\u4e00\u6b65\u8981\u6c42\u89d2\u8272\u7ee7\u627f\u5173\u7cfb\u662f\u4e00\u4e2a\u6811\u7ed3\u6784\uff0c\u5b9e\u73b0\u89d2\u8272\u95f4\u7684\u5355\u7ee7\u627f\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u53ef\u4ee5\u7ed9\u89d2\u8272\u5206\u7ec4\u548c\u5206\u5c42\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u7b80\u5316\u4e86\u6743\u9650\u7ba1\u7406\u5de5\u4f5c\u3002</p>"},{"location":"sysdesign/perm_design/#13-rbac2\u6a21\u578b","title":"1.3 RBAC2\u6a21\u578b","text":"<p>\u57fa\u4e8e\u6838\u5fc3\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u884c\u4e86\u89d2\u8272\u7684\u7ea6\u675f\u63a7\u5236,RBAC2\u6a21\u578b\u4e2d\u6dfb\u52a0\u4e86\u8d23\u4efb\u5206\u79bb\u5173\u7cfb,\u5176\u89c4\u5b9a\u4e86\u6743\u9650\u88ab\u8d4b\u4e88\u89d2\u8272\u65f6\uff0c\u6216\u89d2\u8272\u88ab\u8d4b\u4e88\u7528\u6237\u65f6\uff0c\u4ee5\u53ca\u5f53\u7528\u6237\u5728\u67d0\u4e00\u65f6\u523b\u6fc0\u6d3b\u4e00\u4e2a\u89d2\u8272\u65f6\u6240\u5e94\u9075\u5faa\u7684\u5f3a\u5236\u6027\u89c4\u5219\u3002\u8d23\u4efb\u5206\u79bb\u5305\u62ec\u9759\u6001\u8d23\u4efb\u5206\u79bb\u548c\u52a8\u6001\u8d23\u4efb\u5206\u79bb\u3002\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u7ea6\u675f:</p> \u4e92\u65a5\u89d2\u8272 \u540c\u4e00\u7528\u6237\u53ea\u80fd\u5206\u914d\u5230\u4e00\u7ec4\u4e92\u65a5\u89d2\u8272\u96c6\u5408\u4e2d\u81f3\u591a\u4e00\u4e2a\u89d2\u8272\uff0c\u652f\u6301\u8d23\u4efb\u5206\u79bb\u7684\u539f\u5219\u3002\u4e92\u65a5\u89d2\u8272\u662f\u6307\u5404\u81ea\u6743\u9650\u4e92\u76f8\u5236\u7ea6\u7684\u4e24\u4e2a\u89d2\u8272\u3002\u6bd4\u5982\u8d22\u52a1\u90e8\u6709\u4f1a\u8ba1\u548c\u5ba1\u6838\u5458\u4e24\u4e2a\u89d2\u8272,\u4ed6\u4eec\u662f\u4e92\u65a5\u89d2\u8272,\u90a3\u4e48\u7528\u6237\u4e0d\u80fd\u540c\u65f6\u62e5\u6709\u8fd9\u4e24\u4e2a\u89d2\u8272,\u4f53\u73b0\u4e86\u804c\u8d23\u5206\u79bb\u539f\u5219 \u57fa\u6570\u7ea6\u675f \u4e00\u4e2a\u89d2\u8272\u88ab\u5206\u914d\u7684\u7528\u6237\u6570\u91cf\u53d7\u9650\uff1b\u4e00\u4e2a\u7528\u6237\u53ef\u62e5\u6709\u7684\u89d2\u8272\u6570\u76ee\u53d7\u9650\uff1b\u540c\u6837\u4e00\u4e2a\u89d2\u8272\u5bf9\u5e94\u7684\u8bbf\u95ee\u6743\u9650\u6570\u76ee\u4e5f\u5e94\u53d7\u9650\uff0c\u4ee5\u63a7\u5236\u9ad8\u7ea7\u6743\u9650\u5728\u7cfb\u7edf\u4e2d\u7684\u5206\u914d \u5148\u51b3\u6761\u4ef6\u89d2\u8272 \u5373\u7528\u6237\u60f3\u83b7\u5f97\u67d0\u4e0a\u7ea7\u89d2\u8272,\u5fc5\u987b\u5148\u83b7\u5f97\u5176\u4e0b\u4e00\u7ea7\u7684\u89d2\u8272"},{"location":"sysdesign/perm_design/#14-rbac3\u6a21\u578b","title":"1.4 RBAC3\u6a21\u578b","text":"<p>\u5373\u6700\u5168\u9762\u7684\u6743\u9650\u7ba1\u7406,\u5b83\u662f\u57fa\u4e8eRBAC0,\u5c06RBAC1\u548cRBAC2\u8fdb\u884c\u4e86\u6574\u5408</p>"},{"location":"sysdesign/perm_design/#2-\u7528\u6237\u7ec4","title":"2. \u7528\u6237\u7ec4","text":"<p>\u5f53\u5e73\u53f0\u7528\u6237\u57fa\u6570\u589e\u5927\uff0c\u89d2\u8272\u7c7b\u578b\u589e\u591a\u65f6\uff0c\u800c\u4e14\u6709\u4e00\u90e8\u5206\u4eba\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027,\u6bd4\u5982\u8d22\u52a1\u90e8\u7684\u6240\u6709\u5458\u5de5,\u5982\u679c\u76f4\u63a5\u7ed9\u7528\u6237\u5206\u914d\u89d2\u8272\uff0c\u7ba1\u7406\u5458\u7684\u5de5\u4f5c\u91cf\u5c31\u4f1a\u5f88\u5927,\u5982\u679c\u628a\u76f8\u540c\u5c5e\u6027\u7684\u7528\u6237\u5f52\u7c7b\u5230\u67d0\u7528\u6237\u7ec4,\u90a3\u4e48\u7ba1\u7406\u5458\u76f4\u63a5\u7ed9\u7528\u6237\u7ec4\u5206\u914d\u89d2\u8272,\u7528\u6237\u7ec4\u91cc\u7684\u6bcf\u4e2a\u7528\u6237\u5373\u53ef\u62e5\u6709\u8be5\u89d2\u8272,\u4ee5\u540e\u5176\u4ed6\u7528\u6237\u52a0\u5165\u7528\u6237\u7ec4\u540e,\u5373\u53ef\u81ea\u52a8\u83b7\u53d6\u7528\u6237\u7ec4\u7684\u6240\u6709\u89d2\u8272,\u9000\u51fa\u7528\u6237\u7ec4,\u540c\u65f6\u4e5f\u64a4\u9500\u4e86\u7528\u6237\u7ec4\u4e0b\u7684\u89d2\u8272,\u65e0\u987b\u7ba1\u7406\u5458\u624b\u52a8\u7ba1\u7406\u89d2\u8272\u3002</p> <p>\u6839\u636e\u7528\u6237\u7ec4\u662f\u5426\u6709\u4e0a\u4e0b\u7ea7\u5173\u7cfb,\u53ef\u4ee5\u5206\u4e3a\u6709\u4e0a\u4e0b\u7ea7\u7684\u7528\u6237\u7ec4\u548c\u666e\u901a\u7528\u6237\u7ec4:</p> \u5177\u6709\u4e0a\u4e0b\u7ea7\u5173\u7cfb\u7684\u7528\u6237\u7ec4 \u6700\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\u90e8\u95e8\u548c\u804c\u4f4d,\u53ef\u80fd\u591a\u6570\u4eba\u6ca1\u6709\u628a\u90e8\u95e8\u804c\u4f4d\u548c\u7528\u6237\u7ec4\u5173\u8054\u8d77\u6765\u5427\u3002\u5f53\u7136\u7528\u6237\u7ec4\u662f\u53ef\u4ee5\u62d3\u5c55\u7684,\u90e8\u95e8\u548c\u804c\u4f4d\u5e38\u7528\u4e8e\u5185\u90e8\u7684\u7ba1\u7406\u7cfb\u7edf,\u5982\u679c\u662f\u9762\u5411C\u7aef\u7684\u7cfb\u7edf,\u6bd4\u5982\u6dd8\u5b9d\u7f51\u7684\u5546\u5bb6,\u5546\u5bb6\u81ea\u8eab\u4e5f\u6709\u4e00\u5957\u7ec4\u7ec7\u67b6\u6784,\u6bd4\u5982\u91c7\u8d2d\u90e8,\u9500\u552e\u90e8,\u5ba2\u670d\u90e8,\u540e\u52e4\u90e8\u7b49,\u6709\u4e9b\u4eba\u62e5\u6709\u5ba2\u670d\u6743\u9650,\u6709\u4e9b\u4eba\u62e5\u6709\u4e0a\u67b6\u6743\u9650\u7b49\u7b49,\u6240\u4ee5\u7528\u6237\u7ec4\u662f\u53ef\u4ee5\u62d3\u5c55\u7684 \u666e\u901a\u7528\u6237\u7ec4 \u5373\u6ca1\u6709\u4e0a\u4e0b\u7ea7\u5173\u7cfb,\u548c\u7ec4\u7ec7\u67b6\u6784,\u804c\u4f4d\u90fd\u6ca1\u6709\u5173\u7cfb,\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u8de8\u90e8\u95e8,\u8de8\u804c\u4f4d,\u4e3e\u4e2a\u4f8b\u5b50,\u67d0\u7535\u5546\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf,\u6709\u62fc\u56e2\u6d3b\u52a8\u7ba1\u7406\u89d2\u8272,\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u62fc\u56e2\u7528\u6237\u7ec4,\u8be5\u7ec4\u53ef\u4ee5\u5305\u62ec\u7814\u53d1\u90e8\u7684\u540e\u53f0\u5f00\u53d1\u4eba\u5458,\u8fd0\u8425\u90e8\u7684\u8fd0\u8425\u4eba\u5458,\u91c7\u8d2d\u90e8\u7684\u4eba\u5458\u7b49\u7b49\u3002 <p>\u6bcf\u4e2a\u516c\u53f8\u90fd\u4f1a\u6d89\u53ca\u5230\u5230\u7ec4\u7ec7\u548c\u804c\u4f4d,\u4e0b\u9762\u5c31\u91cd\u70b9\u4ecb\u7ecd\u8fd9\u4e24\u4e2a\u3002</p>"},{"location":"sysdesign/perm_design/#21-\u7ec4\u7ec7","title":"2.1 \u7ec4\u7ec7","text":"<p>\u5e38\u89c1\u7684\u7ec4\u7ec7\u67b6\u6784\u5982\u4e0b\u56fe:</p> <p></p> <p>\u6211\u4eec\u53ef\u4ee5\u628a\u7ec4\u7ec7\u4e0e\u89d2\u8272\u8fdb\u884c\u5173\u8054,\u7528\u6237\u52a0\u5165\u7ec4\u7ec7\u540e,\u5c31\u4f1a\u81ea\u52a8\u83b7\u5f97\u8be5\u7ec4\u7ec7\u7684\u5168\u90e8\u89d2\u8272,\u65e0\u987b\u7ba1\u7406\u5458\u624b\u52a8\u6388\u4e88,\u5927\u5927\u51cf\u5c11\u5de5\u4f5c\u91cf,\u540c\u65f6\u7528\u6237\u5728\u8c03\u5c97\u65f6,\u53ea\u9700\u8c03\u6574\u7ec4\u7ec7,\u89d2\u8272\u5373\u53ef\u6279\u91cf\u8c03\u6574\u3002\u7ec4\u7ec7\u7684\u53e6\u5916\u4e00\u4e2a\u4f5c\u7528\u662f\u63a7\u5236\u6570\u636e\u6743\u9650,\u628a\u89d2\u8272\u5173\u8054\u5230\u7ec4\u7ec7,\u90a3\u4e48\u8be5\u89d2\u8272\u53ea\u80fd\u770b\u5230\u8be5\u7ec4\u7ec7\u4e0b\u7684\u6570\u636e\u6743\u9650\u3002</p>"},{"location":"sysdesign/perm_design/#22-\u804c\u4f4d","title":"2.2 \u804c\u4f4d","text":"<p>\u5047\u8bbe\u8d22\u52a1\u90e8\u7684\u804c\u4f4d\u5982\u4e0b\u56fe:</p> <p></p> <p>\u6bcf\u4e2a\u7ec4\u7ec7\u90e8\u95e8\u4e0b\u90fd\u4f1a\u6709\u591a\u4e2a\u804c\u4f4d,\u6bd4\u5982\u8d22\u52a1\u90e8\u6709\u603b\u76d1,\u4f1a\u8ba1,\u51fa\u7eb3\u7b49\u804c\u4f4d,\u867d\u7136\u90fd\u5728\u540c\u4e00\u90e8\u95e8,\u4f46\u662f\u6bcf\u4e2a\u804c\u4f4d\u7684\u6743\u9650\u662f\u4e0d\u540c\u7684,\u804c\u4f4d\u9ad8\u7684\u62e5\u6709\u66f4\u591a\u7684\u6743\u9650\u3002\u603b\u76d1\u62e5\u6709\u6240\u6709\u6743\u9650,\u4f1a\u8ba1\u548c\u51fa\u7eb3\u62e5\u6709\u90e8\u5206\u6743\u9650\u3002\u7279\u6b8a\u60c5\u51b5\u4e0b,\u4e00\u4e2a\u4eba\u53ef\u80fd\u8eab\u517c\u591a\u804c\u3002</p>"},{"location":"sysdesign/perm_design/#3-\u6a21\u578b","title":"3 \u6a21\u578b","text":"<p>\u6839\u636e\u4ee5\u4e0a\u573a\u666f,\u65b0\u7684\u6743\u9650\u6a21\u578b\u5c31\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u6765\u4e86,\u5982\u4e0b\u56fe:</p> <p></p> <p>\u6839\u636e\u7cfb\u7edf\u7684\u590d\u6742\u5ea6\u4e0d\u540c,\u5176\u4e2d\u7684\u591a\u5bf9\u591a\u5173\u7cfb\u548c\u4e00\u5bf9\u4e00\u5173\u7cfb\u53ef\u80fd\u4f1a\u6709\u53d8\u5316,</p> <ul> <li> <p>\u5728\u5355\u7cfb\u7edf\u4e14\u7528\u6237\u7c7b\u578b\u5355\u4e00\u7684\u60c5\u51b5\u4e0b,\u7528\u6237\u548c\u7ec4\u7ec7\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u7ec4\u7ec7\u548c\u804c\u4f4d\u662f\u4e00\u5bf9\u591a\u5173\u7cfb,\u7528\u6237\u548c\u804c\u4f4d\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u7ec4\u7ec7\u548c\u89d2\u8272\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u804c\u4f4d\u548c\u89d2\u8272\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u7528\u6237\u548c\u7528\u6237\u7ec4\u662f\u591a\u5bf9\u5bf9\u5173\u7cfb,\u7528\u6237\u7ec4\u548c\u89d2\u8272\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u5f53\u7136\u8fd9\u4e9b\u5173\u7cfb\u4e5f\u53ef\u4ee5\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u8fdb\u884c\u8c03\u6574\u3002\u6a21\u578b\u8bbe\u8ba1\u5e76\u4e0d\u662f\u6b7b\u7684,\u5982\u679c\u5c0f\u7cfb\u7edf\u4e0d\u9700\u8981\u7528\u6237\u7ec4,\u8fd9\u5757\u662f\u53ef\u4ee5\u53bb\u6389\u7684\u3002</p> </li> <li> <p>\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e14\u7528\u6237\u7c7b\u578b\u5355\u4e00\u7684\u60c5\u51b5\u4e0b,\u5230\u8fd9\u91cc\u6743\u9650\u7cfb\u7edf\u5c31\u4f1a\u53d8\u5f97\u5f88\u590d\u6742,\u8fd9\u91cc\u5c31\u8981\u5f15\u5165\u4e86\u4e00\u4e2a\"\u7cfb\u7edf\"\u6982\u5ff5,\u6b64\u65f6\u7cfb\u7edf\u67b6\u6784\u662f\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf,\u6743\u9650\u7cfb\u7edf\u72ec\u7acb\u51fa\u6765,\u8d1f\u8d23\u6240\u6709\u7684\u7cfb\u7edf\u7684\u6743\u9650\u63a7\u5236,\u5176\u4ed6\u4e1a\u52a1\u7cfb\u7edf\u6bd4\u5982\u5546\u54c1\u4e2d\u5fc3,\u8ba2\u5355\u4e2d\u5fc3,\u7528\u6237\u4e2d\u5fc3,\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u6709\u81ea\u5df1\u7684\u89d2\u8272\u548c\u6743\u9650,\u90a3\u4e48\u6743\u9650\u7cfb\u7edf\u5c31\u53ef\u4ee5\u914d\u7f6e\u5176\u4ed6\u7cfb\u7edf\u7684\u89d2\u8272\u548c\u6743\u9650\u3002</p> </li> <li> <p>\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e14\u7528\u6237\u7c7b\u578b\u591a\u4e2a\u7684\u60c5\u51b5\u4e0b,\u6bd4\u5982\u6dd8\u5b9d\u7f51,\u5b83\u7684\u7528\u6237\u7c7b\u578b\u5305\u62ec\u5185\u90e8\u7528\u6237,\u5546\u5bb6,\u666e\u901a\u7528\u6237,\u5185\u90e8\u7528\u6237\u767b\u5f55\u591a\u4e2a\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf,\u5546\u5bb6\u767b\u5f55\u5546\u5bb6\u4e2d\u5fc3,\u8fd9\u4e9b\u505a\u6743\u9650\u63a7\u5236,\u5982\u679c\u4f60\u4f5c\u4e3a\u67b6\u6784\u5e08,\u8be5\u5982\u4f55\u6765\u8bbe\u8ba1\u5462?\u5927\u795e\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u7559\u8a00\u4ea4\u6d41\u54e6!</p> </li> </ul>"},{"location":"sysdesign/perm_design/#4-\u6388\u6743\u6d41\u7a0b","title":"4. \u6388\u6743\u6d41\u7a0b","text":"<p>\u6388\u6743\u5373\u7ed9\u7528\u6237\u6388\u4e88\u89d2\u8272,\u6309\u6d41\u7a0b\u53ef\u5206\u4e3a\u624b\u52a8\u6388\u6743\u548c\u5ba1\u6279\u6388\u6743\u3002\u6743\u9650\u4e2d\u5fc3\u53ef\u540c\u65f6\u914d\u7f6e\u8fd9\u4e24\u79cd,\u53ef\u63d0\u9ad8\u6388\u6743\u7684\u7075\u6d3b\u6027\u3002</p> \u624b\u52a8\u6388\u6743 \u7ba1\u7406\u5458\u767b\u5f55\u6743\u9650\u4e2d\u5fc3\u4e3a\u7528\u6237\u6388\u6743,\u6839\u636e\u5728\u54ea\u4e2a\u9875\u9762\u6388\u6743\u5206\u4e3a\u4e24\u79cd\u65b9\u5f0f:\u7ed9\u7528\u6237\u6dfb\u52a0\u89d2\u8272,\u7ed9\u89d2\u8272\u6dfb\u52a0\u7528\u6237\u3002\u7ed9\u7528\u6237\u6dfb\u52a0\u89d2\u8272\u5c31\u662f\u5728\u7528\u6237\u7ba1\u7406\u9875\u9762,\u70b9\u51fb\u67d0\u4e2a\u7528\u6237\u53bb\u6388\u4e88\u89d2\u8272,\u53ef\u4ee5\u4e00\u6b21\u4e3a\u7528\u6237\u6dfb\u52a0\u591a\u4e2a\u89d2\u8272;\u7ed9\u89d2\u8272\u6dfb\u52a0\u7528\u6237\u5c31\u662f\u5728\u89d2\u8272\u7ba1\u7406\u9875\u9762,\u70b9\u51fb\u67d0\u4e2a\u89d2\u8272,\u9009\u62e9\u591a\u4e2a\u7528\u6237,\u5b9e\u73b0\u4e86\u7ed9\u6279\u91cf\u7528\u6237\u6388\u4e88\u89d2\u8272\u7684\u76ee\u7684\u3002 \u5ba1\u6279\u6388\u6743 \u5373\u7528\u6237\u7533\u8bf7\u67d0\u4e2a\u804c\u4f4d\u89d2\u8272,\u90a3\u4e48\u7528\u6237\u901a\u8fc7OA\u6d41\u7a0b\u7533\u8bf7\u8be5\u89d2\u8272,\u7136\u540e\u7531\u4e0a\u7ea7\u5ba1\u6279,\u8be5\u7528\u6237\u5373\u53ef\u62e5\u6709\u8be5\u89d2\u8272,\u4e0d\u9700\u8981\u7cfb\u7edf\u7ba1\u7406\u5458\u624b\u52a8\u6388\u4e88\u3002"},{"location":"sysdesign/perm_design/#5-\u8868\u7ed3\u6784","title":"5. \u8868\u7ed3\u6784","text":"<p>\u6709\u4e86\u4e0a\u8ff0\u7684\u6743\u9650\u6a21\u578b,\u8bbe\u8ba1\u8868\u7ed3\u6784\u5c31\u4e0d\u96be\u4e86,\u4e0b\u9762\u662f\u591a\u7cfb\u7edf\u4e0b\u7684\u8868\u7ed3\u6784,\u7b80\u5355\u8bbe\u8ba1\u4e0b,\u4e3b\u8981\u63d0\u4f9b\u601d\u8def:</p> <p></p>"},{"location":"sysdesign/perm_design/#6-\u6743\u9650\u6846\u67b6","title":"6. \u6743\u9650\u6846\u67b6","text":"<ul> <li>Apache Shrio</li> <li>Spring Security</li> </ul> <p>\u5728\u9879\u76ee\u4e2d\u53ef\u4ee5\u91c7\u7528\u5176\u4e2d\u4e00\u79cd\u6846\u67b6,\u5b83\u4eec\u7684\u4f18\u7f3a\u70b9\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u4f1a\u5728\u540e\u9762\u7684\u6587\u7ae0\u4e2d\u8be6\u7ec6\u4ecb\u7ecd.</p>"},{"location":"sysdesign/perm_design/#7-\u7ed3\u8bed","title":"7. \u7ed3\u8bed","text":"<p>\u6743\u9650\u7cfb\u7edf\u53ef\u4ee5\u8bf4\u662f\u6574\u4e2a\u7cfb\u7edf\u4e2d\u6700\u57fa\u7840,\u540c\u65f6\u4e5f\u53ef\u4ee5\u5f88\u590d\u6742\u7684,\u5728\u5b9e\u9645\u9879\u76ee\u4e2d,\u4f1a\u9047\u5230\u591a\u4e2a\u7cfb\u7edf,\u591a\u4e2a\u7528\u6237\u7c7b\u578b,\u591a\u4e2a\u4f7f\u7528\u573a\u666f,\u8fd9\u5c31\u9700\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790,\u4f46\u6700\u6838\u5fc3\u7684RBAC\u6a21\u578b\u662f\u4e0d\u53d8\u7684,\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u57fa\u7840\u4e0a\u8fdb\u884c\u6269\u5c55\u6765\u6ee1\u8db3\u9700\u6c42\u3002</p>"},{"location":"xml/","title":"Python\u4e2dXML\u89e3\u6790\u5730\u56fe","text":"<p>\u539f\u6587: https://realpython.com/python-xml-parser/</p> \u4e2d\u6587\u539f\u6587 <p>\u5982\u679c\u60a8\u4ee5\u524d\u5c1d\u8bd5\u8fc7\u7528 Python \u89e3\u6790 XML \u6587\u6863\uff0c\u90a3\u4e48\u60a8\u5c31\u4f1a\u77e5\u9053\u8fd9\u9879\u4efb\u52a1\u6709\u591a\u4e48\u56f0\u96be\u3002 \u4e00\u65b9\u9762\uff0cPython \u4e4b\u7985\u4ec5\u627f\u8bfa\u4e00\u79cd\u663e\u800c\u6613\u89c1\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u60a8\u7684\u76ee\u6807\u3002 \u540c\u65f6\uff0c\u6807\u51c6\u5e93\u9075\u5faa\u201c\u7535\u6c60\u5305\u542b\u201d\u7684\u5ea7\u53f3\u94ed\uff0c\u8ba9\u60a8\u4ece\u591a\u4e2a XML \u89e3\u6790\u5668\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 \u5e78\u8fd0\u7684\u662f\uff0cPython \u793e\u533a\u901a\u8fc7\u521b\u5efa\u66f4\u591a\u7684 XML \u89e3\u6790\u5e93\u89e3\u51b3\u4e86\u8fd9\u4e2a\u8fc7\u5269\u95ee\u9898\u3002</p> <p>\u629b\u5f00\u7b11\u8bdd\u4e0d\u8c08\uff0c\u6240\u6709 XML \u89e3\u6790\u5668\u90fd\u5728\u5145\u6ee1\u6216\u5927\u6216\u5c0f\u7684\u6311\u6218\u7684\u4e16\u754c\u4e2d\u5360\u6709\u4e00\u5e2d\u4e4b\u5730\u3002 \u719f\u6089\u53ef\u7528\u7684\u5de5\u5177\u662f\u503c\u5f97\u7684\u3002</p> <p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\uff1a</p> <ul> <li>\u9009\u62e9\u6b63\u786e\u7684 XML \u89e3\u6790\u6a21\u578b</li> <li>\u4f7f\u7528 \u6807\u51c6\u5e93 \u4e2d\u7684 XML \u89e3\u6790\u5668</li> <li>\u4f7f\u7528\u4e3b\u8981\u7684 XML \u89e3\u6790\u5e93</li> <li>\u4f7f\u7528\u6570\u636e\u7ed1\u5b9a\u4ee5\u58f0\u660e\u65b9\u5f0f\u89e3\u6790 XML \u6587\u6863</li> <li>\u4f7f\u7528\u5b89\u5168\u7684 XML \u89e3\u6790\u5668\u6d88\u9664 \u5b89\u5168\u6f0f\u6d1e</li> </ul> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u672c\u6559\u7a0b\u4f5c\u4e3a\u8def\u7ebf\u56fe\u6765\u6307\u5bfc\u60a8\u4e86\u89e3 Python \u4e2d XML \u89e3\u6790\u5668\u7684\u6df7\u4e71\u4e16\u754c\u3002 \u5230\u6700\u540e\uff0c\u60a8\u5c06\u80fd\u591f\u9488\u5bf9\u7ed9\u5b9a\u95ee\u9898\u9009\u62e9\u6b63\u786e\u7684 XML \u89e3\u6790\u5668\u3002 \u4e3a\u4e86\u5145\u5206\u5229\u7528\u672c\u6559\u7a0b\uff0c\u60a8\u5e94\u8be5\u5df2\u7ecf\u719f\u6089 XML \u53ca\u5176\u6784\u5efa\u5757\uff0c\u4ee5\u53ca\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528\u6587\u4ef6\u3002</p> <p>If you\u2019ve ever tried to parse an XML document in Python before, then you know how surprisingly difficult such a task can be. On the one hand, the Zen of Python promises only one obvious way to achieve your goal. At the same time, the standard library follows the batteries included motto by letting you choose from not one but several XML parsers. Luckily, the Python community solved this surplus problem by creating even more XML parsing libraries.</p> <p>Jokes aside, all XML parsers have their place in a world full of smaller or bigger challenges. It\u2019s worthwhile to familiarize yourself with the available tools.</p> <p>In this tutorial, you\u2019ll learn how to:</p> <ul> <li>Choose the right XML parsing model</li> <li>Use the XML parsers in the standard library</li> <li>Use major XML parsing libraries</li> <li>Parse XML documents declaratively using data binding</li> <li>Use safe XML parsers to eliminate security vulnerabilities</li> </ul> <p>You can use this tutorial as a roadmap to guide you through the confusing world of XML parsers in Python. By the end of it, you\u2019ll be able to pick the right XML parser for a given problem. To get the most out of this tutorial, you should already be familiar with XML and its building blocks, as well as how to work with files in Python.</p>"},{"location":"xml/#\u9009\u62e9\u6b63\u786e\u7684-xml-\u89e3\u6790\u6a21\u578b","title":"\u9009\u62e9\u6b63\u786e\u7684 XML \u89e3\u6790\u6a21\u578b","text":"\u4e2d\u6587\u539f\u6587 <p>\u4e8b\u5b9e\u8bc1\u660e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u4e0e\u8bed\u8a00\u65e0\u5173\u7684\u7b56\u7565\u6765\u5904\u7406 XML \u6587\u6863\u3002 \u6bcf\u4e2a\u90fd\u5c55\u793a\u4e86\u4e0d\u540c\u7684\u5185\u5b58\u548c\u901f\u5ea6\u6743\u8861\uff0c\u8fd9\u53ef\u4ee5\u90e8\u5206\u8bc1\u660e Python \u4e2d\u53ef\u7528\u7684\u5404\u79cd XML \u89e3\u6790\u5668\u7684\u5408\u7406\u6027\u3002 \u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5b83\u4eec\u7684\u5dee\u5f02\u548c\u4f18\u70b9\u3002</p> <p>It turns out that you can process XML documents using a few language-agnostic strategies. Each demonstrates different memory and speed trade-offs, which can partially justify the wide range of XML parsers available in Python. In the following section, you\u2019ll find out their differences and strengths.</p>"},{"location":"xml/#\u6587\u6863\u5bf9\u8c61\u6a21\u578b-dom","title":"\u6587\u6863\u5bf9\u8c61\u6a21\u578b (DOM)","text":"\u4e2d\u6587\u539f\u6587 <p>\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u7b2c\u4e00\u4e2a\u4e5f\u662f\u6700\u5e7f\u6cdb\u7684\u89e3\u6790 XML \u7684\u6a21\u578b\u662f DOM\uff0c\u6216\u8005\u8bf4\u662f\u6587\u6863\u5bf9\u8c61\u6a21\u578b\uff0c\u6700\u521d\u5b9a\u4e49 \u7531\u4e07\u7ef4\u7f51\u8054\u76df (W3C) \u5236\u5b9a\u3002 \u60a8\u53ef\u80fd\u5df2\u7ecf\u542c\u8bf4\u8fc7 DOM\uff0c\u56e0\u4e3a Web \u6d4f\u89c8\u5668\u901a\u8fc7 JavaScript \u516c\u5f00 DOM \u63a5\u53e3\uff0c\u8ba9\u60a8\u53ef\u4ee5\u64cd\u4f5c\u7f51\u7ad9\u7684 HTML \u4ee3\u7801\u3002 XML \u548c HTML \u90fd\u5c5e\u4e8e\u540c\u4e00\u6807\u8bb0\u8bed\u8a00\u5bb6\u65cf\uff0c\u8fd9\u4f7f\u5f97\u7528 DOM \u89e3\u6790 XML \u6210\u4e3a\u53ef\u80fd\u3002</p> <p>DOM \u53ef\u4ee5\u8bf4\u662f\u6700\u7b80\u5355\u3001\u6700\u901a\u7528\u7684\u6a21\u578b\u3002 \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6807\u51c6\u64cd\u4f5c\uff0c\u7528\u4e8e\u904d\u5386\u548c\u4fee\u6539\u6309\u5bf9\u8c61\u5c42\u6b21\u7ed3\u6784\u6392\u5217\u7684\u6587\u6863\u5143\u7d20\u3002 \u6574\u4e2a\u6587\u6863\u6811\u7684\u62bd\u8c61\u8868\u793a\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u4f7f\u60a8\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\u5404\u4e2a\u5143\u7d20\u3002</p> <p>\u867d\u7136 DOM \u6811\u5141\u8bb8\u5feb\u901f\u548c\u5168\u5411\u5bfc\u822a\uff0c\u4f46\u9996\u5148\u6784\u5efa\u5176\u62bd\u8c61\u8868\u793a\u53ef\u80fd\u975e\u5e38\u8017\u65f6\u3002 \u6b64\u5916\uff0cXML \u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u7acb\u5373\u89e3\u6790\uff0c\u56e0\u6b64\u5b83\u5fc5\u987b\u76f8\u5f53\u5c0f\u624d\u80fd\u9002\u5408\u53ef\u7528\u5185\u5b58\u3002 \u8fd9\u4f7f\u5f97 DOM \u4ec5\u9002\u7528\u4e8e\u4e2d\u7b49\u5927\u5c0f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u800c\u4e0d\u9002\u5408\u591a GB \u7684 XML \u6570\u636e\u5e93\u3002</p> <p>\u5f53\u65b9\u4fbf\u6bd4\u5904\u7406\u65f6\u95f4\u66f4\u91cd\u8981\u5e76\u4e14\u5185\u5b58\u4e0d\u662f\u95ee\u9898\u65f6\uff0c\u8bf7\u4f7f\u7528 DOM \u89e3\u6790\u5668\u3002 \u4e00\u4e9b\u5178\u578b\u7684\u7528\u4f8b\u662f\u5f53\u60a8\u9700\u8981\u89e3\u6790\u76f8\u5bf9\u8f83\u5c0f\u7684\u6587\u6863\u6216\u53ea\u9700\u8981\u4e0d\u9891\u7e41\u5730\u8fdb\u884c\u89e3\u6790\u65f6\u3002</p> <p>Historically, the first and the most widespread model for parsing XML has been the DOM, or the Document Object Model, originally defined by the World Wide Web Consortium (W3C). You might have already heard about the DOM because web browsers expose a DOM interface through JavaScript to let you manipulate the HTML code of your websites. Both XML and HTML belong to the same family of markup languages, which makes parsing XML with the DOM possible.</p> <p>The DOM is arguably the most straightforward and versatile model to use. It defines a handful of standard operations for traversing and modifying document elements arranged in a hierarchy of objects. An abstract representation of the entire document tree is stored in memory, giving you random access to the individual elements.</p> <p>While the DOM tree allows for fast and omnidirectional navigation, building its abstract representation in the first place can be time-consuming. Moreover, the XML gets parsed at once, as a whole, so it has to be reasonably small to fit the available memory. This renders the DOM suitable only for moderately large configuration files rather than multi-gigabyte XML databases.</p> <p>Use a DOM parser when convenience is more important than processing time and when memory is not an issue. Some typical use cases are when you need to parse a relatively small document or when you only need to do the parsing infrequently.</p>"},{"location":"xml/#xml-\u7684\u7b80\u5355-api-sax","title":"XML \u7684\u7b80\u5355 API (SAX)","text":"\u4e2d\u6587\u539f\u6587 <p>\u4e3a\u4e86\u89e3\u51b3 DOM \u7684\u7f3a\u70b9\uff0cJava \u793e\u533a\u901a\u8fc7\u534f\u4f5c\u63d0\u51fa\u4e86\u4e00\u4e2a\u5e93\uff0c\u8be5\u5e93\u968f\u540e\u6210\u4e3a\u89e3\u6790\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684 XML \u7684\u66ff\u4ee3\u6a21\u578b\u3002 \u6ca1\u6709\u6b63\u5f0f\u7684\u89c4\u8303\uff0c\u53ea\u6709\u90ae\u4ef6\u5217\u8868\u4e0a\u7684\u6709\u673a\u8ba8\u8bba\u3002 \u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d41 API\uff0c\u5b83\u6309\u987a\u5e8f\u5bf9\u5355\u4e2a\u5143\u7d20\u800c\u4e0d\u662f\u6574\u4e2a\u6811\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u5143\u7d20\u6309\u7167\u5b83\u4eec\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u4ece\u4e0a\u5230\u4e0b\u8fdb\u884c\u5904\u7406\u3002 \u89e3\u6790\u5668\u5728\u6587\u6863\u4e2d\u627e\u5230\u7279\u5b9a\u7684 XML \u8282\u70b9\u65f6\uff0c\u4f1a\u89e6\u53d1\u7528\u6237\u5b9a\u4e49\u7684\u56de\u8c03\u6765\u5904\u7406\u5b83\u4eec\u3002 \u8fd9\u79cd\u65b9\u6cd5\u79f0\u4e3a\u201c\u63a8\u9001\u201d\u89e3\u6790\uff0c\u56e0\u4e3a\u89e3\u6790\u5668\u5c06\u5143\u7d20\u63a8\u9001\u5230\u60a8\u7684\u51fd\u6570\u3002</p> <p>\u5982\u679c\u60a8\u5bf9\u5143\u7d20\u4e0d\u611f\u5174\u8da3\uff0cSAX \u8fd8\u5141\u8bb8\u60a8\u4e22\u5f03\u5b83\u4eec\u3002 \u8fd9\u610f\u5473\u7740\u5b83\u7684\u5185\u5b58\u5360\u7528\u6bd4 DOM \u4f4e\u5f97\u591a\uff0c\u5e76\u4e14\u53ef\u4ee5\u5904\u7406\u4efb\u610f\u5927\u7684\u6587\u4ef6\uff0c\u8fd9\u975e\u5e38\u9002\u5408\u5355\u904d\u5904\u7406\uff0c\u4f8b\u5982\u7d22\u5f15\u3001\u8f6c\u6362\u4e3a\u5176\u4ed6\u683c\u5f0f\u7b49\u3002</p> <p>\u7136\u800c\uff0c\u67e5\u627e\u6216\u4fee\u6539\u968f\u673a\u6811\u8282\u70b9\u5f88\u9ebb\u70e6\uff0c\u56e0\u4e3a\u5b83\u901a\u5e38\u9700\u8981\u591a\u6b21\u904d\u5386\u6587\u6863\u5e76\u8ddf\u8e2a\u8bbf\u95ee\u7684\u8282\u70b9\u3002 SAX \u4e5f\u4e0d\u65b9\u4fbf\u5904\u7406\u6df1\u5ea6\u5d4c\u5957\u7684\u5143\u7d20\u3002 \u6700\u540e\uff0cSAX \u6a21\u578b\u53ea\u5141\u8bb8\u53ea\u8bfb\u89e3\u6790\u3002</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0cSAX \u5728\u7a7a\u95f4\u548c\u65f6\u95f4\u4e0a\u90fd\u5f88\u4fbf\u5b9c\uff0c\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u6bd4 DOM \u66f4\u96be\u4f7f\u7528\u3002 \u5b83\u975e\u5e38\u9002\u5408\u89e3\u6790\u975e\u5e38\u5927\u7684\u6587\u6863\u6216\u5b9e\u65f6\u89e3\u6790\u4f20\u5165\u7684 XML \u6570\u636e\u3002</p> <p>To address the shortcomings of the DOM, the Java community came up with a library through a collaborative effort, which then became an alternative model for parsing XML in other languages. There was no formal specification, only organic discussions on a mailing list. The end result was an event-based streaming API that operates sequentially on individual elements rather than the whole tree.</p> <p>Elements are processed from top to bottom in the same order they appear in the document. The parser triggers user-defined callbacks to handle specific XML nodes as it finds them in the document. This approach is known as \u201cpush\u201d parsing because elements are pushed to your functions by the parser.</p> <p>SAX also lets you discard elements if you\u2019re not interested in them. This means it has a much lower memory footprint than DOM and can deal with arbitrarily large files, which is great for single-pass processing such as indexing, conversion to other formats, and so on.</p> <p>However, finding or modifying random tree nodes is cumbersome because it usually requires multiple passes on the document and tracking the visited nodes. SAX is also inconvenient for handling deeply nested elements. Finally, the SAX model just allows for read-only parsing.</p> <p>In short, SAX is cheap in terms of space and time but more difficult to use than DOM in most cases. It works well for parsing very large documents or parsing incoming XML data in real time.</p>"},{"location":"xml/#xml-\u6d41\u5f0f-api-stax","title":"XML \u6d41\u5f0f API (StAX)","text":"\u4e2d\u6587\u539f\u6587 <p>\u867d\u7136\u5728 Python \u4e2d\u4e0d\u592a\u6d41\u884c\uff0c\u4f46\u89e3\u6790 XML \u7684\u7b2c\u4e09\u79cd\u65b9\u6cd5\u6784\u5efa\u5728 SAX \u4e4b\u4e0a\u3002 \u5b83\u6269\u5c55\u4e86\u6d41\u7684\u601d\u60f3\uff0c\u4f46\u4f7f\u7528\u4e86\u201c\u62c9\u201d\u89e3\u6790\u6a21\u578b\uff0c\u8fd9\u4e3a\u60a8\u63d0\u4f9b\u4e86\u66f4\u591a\u63a7\u5236\u6743\u3002 \u60a8\u53ef\u4ee5\u5c06 StAX \u89c6\u4e3a\u4e00\u4e2a\u8fed\u4ee3\u5668 \u901a\u8fc7 XML \u6587\u6863\u63a8\u8fdb \u6e38\u6807\u5bf9\u8c61\uff0c\u5176\u4e2d\u6309\u9700\u81ea\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\u8c03\u7528\u89e3\u6790\u5668 \uff0c\u800c\u4e0d\u662f\u76f8\u53cd\u3002</p> <p>Note</p> <p>Note: \u53ef\u4ee5\u7ec4\u5408\u591a\u4e2a XML \u89e3\u6790\u6a21\u578b\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 SAX \u6216 StAX \u5728\u6587\u6863\u4e2d\u5feb\u901f\u67e5\u627e\u6709\u8da3\u7684\u6570\u636e\uff0c\u7136\u540e\u4ec5\u5728\u5185\u5b58\u4e2d\u6784\u5efa\u8be5\u7279\u5b9a\u5206\u652f\u7684 DOM \u8868\u793a\u3002</p> <p>\u4f7f\u7528 StAX \u53ef\u4ee5\u8ba9\u60a8\u66f4\u597d\u5730\u63a7\u5236\u89e3\u6790\u8fc7\u7a0b\uff0c\u5e76\u5141\u8bb8\u66f4\u65b9\u4fbf\u7684\u72b6\u6001\u7ba1\u7406\u3002 \u6d41\u4e2d\u7684\u4e8b\u4ef6\u4ec5\u5728\u8bf7\u6c42\u65f6\u624d\u88ab\u4f7f\u7528\uff0c\u4ece\u800c\u5b9e\u73b0\u5ef6\u8fdf\u8bc4\u4f30\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u7684\u6027\u80fd\u5e94\u8be5\u4e0e SAX \u76f8\u5f53\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u89e3\u6790\u5668\u7684\u5b9e\u73b0\u3002</p> <p>Although somewhat less popular in Python, this third approach to parsing XML builds on top of SAX. It extends the idea of streaming but uses a \u201cpull\u201d parsing model instead, which gives you more control. You can think of StAX as an iterator advancing a cursor object through an XML document, where custom handlers call the parser on demand and not the other way around.</p> <p>Note</p> <p>Note: It\u2019s possible to combine more than one XML parsing model. For example, you can use SAX or StAX to quickly find an interesting piece of data in the document and then build a DOM representation of only that particular branch in memory.</p> <p>Using StAX gives you more control over the parsing process and allows for more convenient state management. The events in the stream are only consumed when requested, enabling lazy evaluation. Other than that, its performance should be on par with SAX, depending on the parser implementation.</p>"},{"location":"xml/#\u4e86\u89e3-python-\u6807\u51c6\u5e93\u4e2d\u7684-xml-\u89e3\u6790\u5668","title":"\u4e86\u89e3 Python \u6807\u51c6\u5e93\u4e2d\u7684 XML \u89e3\u6790\u5668","text":"\u4e2d\u6587\u539f\u6587 <p>\u5728\u672c\u8282\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3 Python \u7684\u5185\u7f6e XML \u89e3\u6790\u5668\uff0c\u51e0\u4e4e\u6bcf\u4e2a Python \u53d1\u884c\u7248\u90fd\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u3002 \u60a8\u5c06\u628a\u8fd9\u4e9b\u89e3\u6790\u5668\u4e0e\u793a\u4f8b \u53ef\u6269\u5c55\u77e2\u91cf\u56fe\u5f62 (SVG) \u56fe\u50cf\u8fdb\u884c\u6bd4\u8f83\uff0c\u8fd9\u662f\u4e00\u79cd\u57fa\u4e8e XML \u7684\u683c\u5f0f\u3002 \u901a\u8fc7\u4f7f\u7528\u4e0d\u540c\u7684\u89e3\u6790\u5668\u5904\u7406\u540c\u4e00\u6587\u6863\uff0c\u60a8\u5c06\u80fd\u591f\u9009\u62e9\u6700\u9002\u5408\u60a8\u7684\u89e3\u6790\u5668\u3002</p> <p>\u60a8\u5c06\u8981\u4fdd\u5b58\u5728\u672c\u5730\u6587\u4ef6\u4e2d\u4ee5\u4f9b\u53c2\u8003\u7684\u793a\u4f8b\u56fe\u50cf\u63cf\u7ed8\u4e86\u4e00\u5f20\u7b11\u8138\u3002 \u5b83\u7531\u4ee5\u4e0b XML \u5185\u5bb9\u7ec4\u6210\uff1a</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" [\n    &lt;!ENTITY custom_entity \"Hello\"&gt;\n]&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n  xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n  viewBox=\"-105 -100 210 270\" width=\"210\" height=\"270\"&gt;\n  &lt;inkscape:custom x=\"42\" inkscape:z=\"555\"&gt;Some value&lt;/inkscape:custom&gt;\n  &lt;defs&gt;\n    &lt;linearGradient id=\"skin\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\"&gt;\n      &lt;stop offset=\"0%\" stop-color=\"yellow\" stop-opacity=\"1.0\"/&gt;\n      &lt;stop offset=\"75%\" stop-color=\"gold\" stop-opacity=\"1.0\"/&gt;\n      &lt;stop offset=\"100%\" stop-color=\"orange\" stop-opacity=\"1\"/&gt;\n    &lt;/linearGradient&gt;\n  &lt;/defs&gt;\n  &lt;g id=\"smiley\" inkscape:groupmode=\"layer\" inkscape:label=\"Smiley\"&gt;\n    &lt;!-- Head --&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"50\"\n      fill=\"url(#skin)\" stroke=\"orange\" stroke-width=\"2\"/&gt;\n    &lt;!-- Eyes --&gt;\n    &lt;ellipse cx=\"-20\" cy=\"-10\" rx=\"6\" ry=\"8\" fill=\"black\" stroke=\"none\"/&gt;\n    &lt;ellipse cx=\"20\" cy=\"-10\" rx=\"6\" ry=\"8\" fill=\"black\" stroke=\"none\"/&gt;\n    &lt;!-- Mouth --&gt;\n    &lt;path d=\"M-20 20 A25 25 0 0 0 20 20\"\n      fill=\"white\" stroke=\"black\" stroke-width=\"3\"/&gt;\n  &lt;/g&gt;\n  &lt;text x=\"-40\" y=\"75\"&gt;&amp;custom_entity; &amp;lt;svg&amp;gt;!&lt;/text&gt;\n  &lt;script&gt;\n    &lt;![CDATA[\n      console.log(\"CDATA disables XML parsing: &lt;svg&gt;\")\n      const smiley = document.getElementById(\"smiley\")\n      const eyes = document.querySelectorAll(\"ellipse\")\n      const setRadius = r =&gt; e =&gt; eyes.forEach(x =&gt; x.setAttribute(\"ry\", r))\n      smiley.addEventListener(\"mouseenter\", setRadius(2))\n      smiley.addEventListener(\"mouseleave\", setRadius(8))\n    ]]&gt;\n  &lt;/script&gt;\n&lt;/svg&gt;\n</code></pre> <p>\u5b83\u4ee5 XML \u58f0\u660e \u5f00\u5934\uff0c\u540e\u8ddf \u6587\u6863\u7c7b\u578b\u5b9a\u4e49 (DTD) \u548c <code>&lt;svg&gt;</code> \u6839\u5143\u7d20 \u3002 DTD \u662f\u53ef\u9009\u7684\uff0c\u4f46\u5982\u679c\u60a8\u51b3\u5b9a\u4f7f\u7528 XML \u9a8c\u8bc1\u5668\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u9a8c\u8bc1\u60a8\u7684\u6587\u6863\u7ed3\u6784\u3002 \u6839\u5143\u7d20\u6307\u5b9a \u9ed8\u8ba4\u547d\u540d\u7a7a\u95f4 xmlns \u4ee5\u53ca\u7528\u4e8e\u7279\u5b9a\u4e8e\u7f16\u8f91\u5668\u7684\u5143\u7d20\u548c\u5c5e\u6027\u7684\u524d\u7f00\u547d\u540d\u7a7a\u95f4 <code>xmlns:inkscape</code>\u3002 \u8be5\u6587\u4ef6\u8fd8\u5305\u542b\uff1a</p> <ul> <li>\u5d4c\u5957\u5143\u7d20</li> <li>\u5c5e\u6027</li> <li>\u6ce8\u91ca</li> <li>\u5b57\u7b26\u6570\u636e\uff08CDATA\uff09</li> <li>\u9884\u5b9a\u4e49\u548c\u81ea\u5b9a\u4e49\u5b9e\u4f53</li> </ul> <p>\u7ee7\u7eed\uff0c\u5c06 XML \u4fdd\u5b58\u5728\u540d\u4e3a smiley.svg \u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u73b0\u4ee3 Web \u6d4f\u89c8\u5668\u6253\u5f00\u5b83\uff0c\u8be5\u6d4f\u89c8\u5668\u5c06\u8fd0\u884c\u672b\u5c3e\u7684 JavaScript \u4ee3\u7801\u6bb5\uff1a</p> <p></p> <p>\u8be5\u4ee3\u7801\u5411\u56fe\u50cf\u6dfb\u52a0\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u7ec4\u4ef6\u3002 \u5f53\u60a8\u5c06\u9f20\u6807\u60ac\u505c\u5728\u7b11\u8138\u4e0a\u65f6\uff0c\u5b83\u4f1a\u7728\u773c\u775b\u3002 \u5982\u679c\u60a8\u60f3\u4f7f\u7528\u65b9\u4fbf\u7684\u56fe\u5f62\u7528\u6237\u754c\u9762 (GUI) \u7f16\u8f91\u7b11\u8138\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u77e2\u91cf\u56fe\u5f62\u7f16\u8f91\u5668\uff08\u4f8b\u5982 Adobe Illustrator  \u6216 Inkscape\u6253\u5f00\u8be5\u6587\u4ef6\u3002</p> <p>Note</p> <p>Note: \u4e0e JSON \u6216 YAML \u4e0d\u540c\uff0cXML \u7684\u67d0\u4e9b\u529f\u80fd\u53ef\u80fd\u4f1a\u88ab\u9ed1\u5ba2\u5229\u7528\u3002 Python \u7684 xml \u5305\u4e2d\u63d0\u4f9b\u7684\u6807\u51c6 XML \u89e3\u6790\u5668\u4e0d\u5b89\u5168\uff0c\u5e76\u4e14\u5bb9\u6613\u53d7\u5230\u4e00\u7cfb\u5217\u653b\u51fb\u3002 \u8981\u5b89\u5168\u5730\u89e3\u6790\u6765\u81ea\u4e0d\u53d7\u4fe1\u4efb\u6e90\u7684 XML \u6587\u6863\uff0c\u6700\u597d\u9009\u62e9\u5b89\u5168\u7684\u66ff\u4ee3\u65b9\u6848\u3002 \u60a8\u53ef\u4ee5\u8df3\u81f3\u672c\u6559\u7a0b\u7684\u6700\u540e\u4e00\u8282\u4ee5\u4e86\u89e3\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cPython \u7684\u6807\u51c6\u5e93\u5b9a\u4e49\u4e86\u7528\u4e8e\u89e3\u6790 XML \u6587\u6863\u7684\u62bd\u8c61\u63a5\u53e3\uff0c\u540c\u65f6\u5141\u8bb8\u60a8\u63d0\u4f9b\u5177\u4f53\u7684\u89e3\u6790\u5668\u5b9e\u73b0\u3002 \u5b9e\u9645\u4e0a\uff0c\u60a8\u5f88\u5c11\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a Python \u6346\u7ed1\u4e86 Expat \u5e93\u7684\u7ed1\u5b9a\uff0c\u8be5\u5e93\u662f\u7528 C \u7f16\u5199\u7684\u5e7f\u6cdb\u4f7f\u7528\u7684\u5f00\u6e90 XML \u89e3\u6790\u5668 . \u6807\u51c6\u5e93\u4e2d\u7684\u4ee5\u4e0b\u6240\u6709 Python \u6a21\u5757\u9ed8\u8ba4\u90fd\u5728\u5e95\u5c42\u4f7f\u7528 Expat\u3002</p> <p>\u4e0d\u5e78\u7684\u662f\uff0c\u867d\u7136 Expat \u89e3\u6790\u5668\u53ef\u4ee5\u544a\u8bc9\u60a8\u6587\u6863\u662f\u5426\u683c\u5f0f\u826f\u597d\uff0c\u4f46\u5b83\u65e0\u6cd5\u6839\u636e XML \u67b6\u6784\u5b9a\u4e49 (XSD) \u6216 \u6587\u6863\u7c7b\u578b\u5b9a\u4e49 (DTD)\u8fdb\u884c\u6587\u6863\u7ed3\u6784\u9a8c\u8bc1\u3002 \u4e3a\u6b64\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528\u7a0d\u540e\u8ba8\u8bba\u7684\u7b2c\u4e09\u65b9\u5e93\u4e4b\u4e00\u3002</p> <p>In this section, you\u2019ll take a look at Python\u2019s built-in XML parsers, which are available to you in nearly every Python distribution. You\u2019re going to compare those parsers against a sample Scalable Vector Graphics (SVG) image, which is an XML-based format. By processing the same document with different parsers, you\u2019ll be able to choose the one that suits you best.</p> <p>The sample image, which you\u2019re about to save in a local file for reference, depicts a smiley face. It consists of the following XML content:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" [\n    &lt;!ENTITY custom_entity \"Hello\"&gt;\n]&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n  xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n  viewBox=\"-105 -100 210 270\" width=\"210\" height=\"270\"&gt;\n  &lt;inkscape:custom x=\"42\" inkscape:z=\"555\"&gt;Some value&lt;/inkscape:custom&gt;\n  &lt;defs&gt;\n    &lt;linearGradient id=\"skin\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\"&gt;\n      &lt;stop offset=\"0%\" stop-color=\"yellow\" stop-opacity=\"1.0\"/&gt;\n      &lt;stop offset=\"75%\" stop-color=\"gold\" stop-opacity=\"1.0\"/&gt;\n      &lt;stop offset=\"100%\" stop-color=\"orange\" stop-opacity=\"1\"/&gt;\n    &lt;/linearGradient&gt;\n  &lt;/defs&gt;\n  &lt;g id=\"smiley\" inkscape:groupmode=\"layer\" inkscape:label=\"Smiley\"&gt;\n    &lt;!-- Head --&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"50\"\n      fill=\"url(#skin)\" stroke=\"orange\" stroke-width=\"2\"/&gt;\n    &lt;!-- Eyes --&gt;\n    &lt;ellipse cx=\"-20\" cy=\"-10\" rx=\"6\" ry=\"8\" fill=\"black\" stroke=\"none\"/&gt;\n    &lt;ellipse cx=\"20\" cy=\"-10\" rx=\"6\" ry=\"8\" fill=\"black\" stroke=\"none\"/&gt;\n    &lt;!-- Mouth --&gt;\n    &lt;path d=\"M-20 20 A25 25 0 0 0 20 20\"\n      fill=\"white\" stroke=\"black\" stroke-width=\"3\"/&gt;\n  &lt;/g&gt;\n  &lt;text x=\"-40\" y=\"75\"&gt;&amp;custom_entity; &amp;lt;svg&amp;gt;!&lt;/text&gt;\n  &lt;script&gt;\n    &lt;![CDATA[\n      console.log(\"CDATA disables XML parsing: &lt;svg&gt;\")\n      const smiley = document.getElementById(\"smiley\")\n      const eyes = document.querySelectorAll(\"ellipse\")\n      const setRadius = r =&gt; e =&gt; eyes.forEach(x =&gt; x.setAttribute(\"ry\", r))\n      smiley.addEventListener(\"mouseenter\", setRadius(2))\n      smiley.addEventListener(\"mouseleave\", setRadius(8))\n    ]]&gt;\n  &lt;/script&gt;\n&lt;/svg&gt;\n</code></pre> <p>It starts with an XML declaration, followed by a Document Type Definition (DTD) and the <code>&lt;svg&gt;</code> root element. The DTD is optional, but it can help validate your document structure if you decide to use an XML validator. The root element specifies the default namespace xmlns as well as a prefixed namespace <code>xmlns:inkscape</code> for editor-specific elements and attributes. The document also contains:</p> <ul> <li>Nested elements</li> <li>Attributes</li> <li>Comments</li> <li>Character data (CDATA)</li> <li>Predefined and custom entities</li> </ul> <p>Go ahead, save the XML in a file named smiley.svg, and open it using a modern web browser, which will run the JavaScript snippet present at the end:</p> <p></p> <p>The code adds an interactive component to the image. When you hover the mouse over the smiley face, it blinks its eyes. If you want to edit the smiley face using a convenient graphical user interface (GUI), then you can open the file using a vector graphics editor such as Adobe Illustrator or Inkscape.</p> <p>Note</p> <p>Note: Unlike JSON or YAML, some features of XML can be exploited by hackers. The standard XML parsers available in the xml package in Python are insecure and vulnerable to an array of attacks. To safely parse XML documents from an untrusted source, prefer secure alternatives. You can jump to the last section in this tutorial for more details.</p> <p>It\u2019s worth noting that Python\u2019s standard library defines abstract interfaces for parsing XML documents while letting you supply concrete parser implementation. In practice, you rarely do that because Python bundles a binding for the Expat library, which is a widely used open-source XML parser written in C. All of the following Python modules in the standard library use Expat under the hood by default.</p> <p>Unfortunately, while the Expat parser can tell you if your document is well-formed, it can\u2019t validate the structure of your documents against an XML Schema Definition (XSD) or a Document Type Definition (DTD). For that, you\u2019ll have to use one of the third-party libraries discussed later.</p>"},{"location":"xml/#xmldomminidom-\u6700\u5c0f-dom-\u5b9e\u73b0","title":"xml.dom.minidom: \u6700\u5c0f DOM \u5b9e\u73b0","text":"\u4e2d\u6587\u539f\u6587 <p>\u8003\u8651\u5230\u4f7f\u7528 DOM \u89e3\u6790 XML \u6587\u6863\u53ef\u4ee5\u8bf4\u662f\u6700\u76f4\u63a5\u7684\uff0c\u56e0\u6b64\u60a8\u5728 Python \u6807\u51c6\u5e93\u4e2d\u53d1\u73b0 DOM \u89e3\u6790\u5668\u4e0d\u4f1a\u611f\u5230\u60ca\u8bb6\u3002 \u4f46\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5b9e\u9645\u4e0a\u6709\u4e24\u4e2a DOM \u89e3\u6790\u5668\u3002</p> <p>xml.dom \u5305\u5305\u542b\u4e24\u4e2a\u5728 Python \u4e2d\u4f7f\u7528 DOM \u7684\u6a21\u5757\uff1a</p> <ol> <li>xml.dom.minidom</li> <li>xml.dom.pulldom</li> </ol> <p>\u7b2c\u4e00\u4e2a\u662f DOM \u63a5\u53e3\u7684\u7cbe\u7b80\u5b9e\u73b0\uff0c\u7b26\u5408\u76f8\u5bf9\u8f83\u65e7\u7248\u672c\u7684 W3C \u89c4\u8303\u3002 \u5b83\u63d0\u4f9b\u4e86 DOM API \u5b9a\u4e49\u7684\u5e38\u89c1\u5bf9\u8c61\uff0c\u4f8b\u5982 Document\u3001Element \u548c Attr\u3002 \u6b63\u5982\u60a8\u5373\u5c06\u53d1\u73b0\u7684\u90a3\u6837\uff0c\u8be5\u6a21\u5757\u7684\u6587\u6863\u5f88\u5c11\uff0c\u800c\u4e14\u7528\u9014\u4e5f\u76f8\u5f53\u6709\u9650\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u6a21\u5757\u7684\u540d\u79f0\u6709\u70b9\u8bef\u5bfc\u6027\uff0c\u56e0\u4e3a\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6d41\u5f0f\u62c9\u89e3\u6790\u5668\uff0c\u5b83\u53ef\u4ee5\u9009\u62e9\u751f\u6210\u6587\u6863\u6811\u4e2d\u5f53\u524d\u8282\u70b9\u7684 DOM \u8868\u793a\u3002 \u60a8\u7a0d\u540e\u5c06\u627e\u5230\u6709\u5173 pulldom \u89e3\u6790\u5668\u7684\u66f4\u591a\u4fe1\u606f(https://realpython.com/python-xml-parser/#xmldompulldom-streaming-pull-parser)\u3002</p> <p>minidom \u4e2d\u6709\u4e24\u4e2a\u51fd\u6570\u53ef\u4ee5\u8ba9\u60a8\u89e3\u6790\u6765\u81ea\u5404\u79cd\u6570\u636e\u6e90\u7684 XML \u6570\u636e\u3002 \u4e00\u79cd\u63a5\u53d7\u6587\u4ef6\u540d\u6216\u6587\u4ef6\u5bf9\u8c61\uff0c\u800c\u53e6\u4e00\u79cd\u63a5\u53d7Python\u5b57\u7b26\u4e32:</p> <pre><code>&gt;&gt;&gt; from xml.dom.minidom import parse, parseString\n\n&gt;&gt;&gt; # \u4ece\u6587\u4ef6\u540d\u89e3\u6790 XML\n&gt;&gt;&gt; document = parse(\"smiley.svg\")\n\n&gt;&gt;&gt; # \u4ece\u6587\u4ef6\u5bf9\u8c61\u4e2d\u89e3\u6790 XML\n&gt;&gt;&gt; with open(\"smiley.svg\") as file:\n...     document = parse(file)\n...\n\n&gt;&gt;&gt; # \u4ece Python \u5b57\u7b26\u4e32\u89e3\u6790 XML\n&gt;&gt;&gt; document = parseString(\"\"\"\\\n... &lt;svg viewBox=\"-105 -100 210 270\"&gt;\n...   &lt;!-- More content goes here... --&gt;\n... &lt;/svg&gt;\n... \"\"\")\n</code></pre> <p>\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 \u6709\u52a9\u4e8e\u5d4c\u5165\u591a\u884c\u5b57\u7b26\u4e32\u6587\u5b57\uff0c\u800c\u65e0\u9700\u5728\u672b\u5c3e\u4f7f\u7528\u8fde\u7eed\u5b57\u7b26 () \u6bcf\u884c\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u6700\u7ec8\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a Document \u5b9e\u4f8b\uff0c\u5b83\u5c55\u793a\u4e86\u719f\u6089\u7684 DOM \u754c\u9762\uff0c\u8ba9\u60a8\u53ef\u4ee5\u904d\u5386\u6811\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u8bbf\u95ee XML \u58f0\u660e\u3001DTD \u548c\u6839\u5143\u7d20\uff1a</p> <pre><code>&gt;&gt;&gt; document = parse(\"smiley.svg\")\n\n&gt;&gt;&gt; # XML \u58f0\u660e\n&gt;&gt;&gt; document.version, document.encoding, document.standalone\n('1.0', 'UTF-8', False)\n\n&gt;&gt;&gt; # \u6587\u6863\u7c7b\u578b\u5b9a\u4e49 (DTD)\n&gt;&gt;&gt; dtd = document.doctype\n&gt;&gt;&gt; dtd.entities[\"custom_entity\"].childNodes\n[&lt;DOM Text node \"'Hello'\"&gt;]\n\n&gt;&gt;&gt; # \u6587\u6863\u6839\u8282\u70b9\n&gt;&gt;&gt; document.documentElement\n&lt;DOM Element: svg at 0x7fc78c62d790&gt;\n</code></pre> <p>\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u5373\u4f7f Python \u4e2d\u9ed8\u8ba4\u7684 XML \u89e3\u6790\u5668\u65e0\u6cd5\u9a8c\u8bc1\u6587\u6863\uff0c\u5b83\u4ecd\u7136\u5141\u8bb8\u60a8\u68c0\u67e5 <code>.doctype</code>\uff08DTD\uff09\uff08\u5982\u679c\u5b58\u5728\uff09\u3002 \u8bf7\u6ce8\u610f\uff0cXML \u58f0\u660e\u548c DTD \u662f\u53ef\u9009\u7684\u3002 \u5982\u679c\u7f3a\u5c11 XML \u58f0\u660e\u6216\u7ed9\u5b9a\u7684 XML \u5c5e\u6027\uff0c\u5219\u76f8\u5e94\u7684 Python \u5c5e\u6027\u5c06\u4e3a None\u3002</p> <p>\u8981\u901a\u8fc7 ID \u67e5\u627e\u5143\u7d20\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528 Document \u5b9e\u4f8b\u800c\u4e0d\u662f\u7279\u5b9a\u7684\u7236\u5143\u7d20\u3002 \u793a\u4f8b SVG \u56fe\u50cf\u6709\u4e24\u4e2a\u5e26\u6709 id \u5c5e\u6027\u7684\u8282\u70b9\uff0c\u4f46\u60a8\u627e\u4e0d\u5230\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\uff1a</p> <pre><code>&gt;&gt;&gt; document.getElementById(\"skin\") is None\nTrue\n&gt;&gt;&gt; document.getElementById(\"smiley\") is None\nTrue\n</code></pre> <p>\u5bf9\u4e8e\u53ea\u4f7f\u7528\u8fc7 HTML \u548c JavaScript \u4f46\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 XML \u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u611f\u5230\u60ca\u8bb6\u3002 \u867d\u7136 HTML \u5b9a\u4e49\u4e86\u67d0\u4e9b\u5143\u7d20\u548c\u5c5e\u6027\uff08\u4f8b\u5982  \u6216 id\uff09\u7684\u8bed\u4e49\uff0c\u4f46 XML \u5e76\u672a\u4e3a\u5176\u6784\u5efa\u5757\u9644\u52a0\u4efb\u4f55\u542b\u4e49\u3002 \u60a8\u9700\u8981\u4f7f\u7528 DTD \u6216\u901a\u8fc7\u5728 Python \u4e2d\u8c03\u7528 <code>.setIdAttribute()</code> \u663e\u5f0f\u5730\u5c06\u5c5e\u6027\u6807\u8bb0\u4e3a ID\uff0c\u4f8b\u5982\uff1a \u5b9a\u4e49\u98ce\u683c \u5b9e\u73b0 DTD &lt;!ATTLIST linearGradient id ID #IMPLIED&gt; Python linearGradient.setIdAttribute(\"id\") <p>\u4f46\u662f\uff0c\u5982\u679c\u60a8\u7684\u6587\u6863\u5177\u6709\u9ed8\u8ba4\u547d\u540d\u7a7a\u95f4\uff08\u793a\u4f8b SVG \u56fe\u50cf\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff09\uff0c\u90a3\u4e48\u4f7f\u7528 DTD \u4e0d\u8db3\u4ee5\u89e3\u51b3\u95ee\u9898\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5728Python\u4e2d\u9012\u5f52\u5730\u8bbf\u95ee\u6240\u6709\u5143\u7d20\uff0c\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u5177\u6709 id \u5c5e\u6027\uff0c\u5e76\u4e00\u6b21\u6027\u5c06\u5176\u6307\u793a\u4e3a\u5b83\u4eec\u7684ID\uff1a</p> <pre><code>&gt;&gt;&gt; from xml.dom.minidom import parse, Node\n\n&gt;&gt;&gt; def set_id_attribute(parent, attribute_name=\"id\"):\n...     if parent.nodeType == Node.ELEMENT_NODE:\n...         if parent.hasAttribute(attribute_name):\n...             parent.setIdAttribute(attribute_name)\n...     for child in parent.childNodes:\n...         set_id_attribute(child, attribute_name)\n...\n&gt;&gt;&gt; document = parse(\"smiley.svg\")\n&gt;&gt;&gt; set_id_attribute(document)\n</code></pre> <p>\u60a8\u7684\u81ea\u5b9a\u4e49 <code>set_id_attribute()</code> \u51fd\u6570\u91c7\u7528\u7236\u5143\u7d20\u548c\u8eab\u4efd\u5c5e\u6027\u7684\u53ef\u9009\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3a <code>id</code>\u3002 \u5f53\u60a8\u5728 SVG \u6587\u6863\u4e0a\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u6240\u6709\u5177\u6709 <code>id</code> \u5c5e\u6027\u7684\u5b50\u5143\u7d20\u90fd\u5c06\u53ef\u4ee5\u901a\u8fc7 DOM API \u8fdb\u884c\u8bbf\u95ee\uff1a</p> <pre><code>&gt;&gt;&gt; document.getElementById(\"skin\")\n&lt;DOM Element: linearGradient at 0x7f82247703a0&gt;\n\n&gt;&gt;&gt; document.getElementById(\"smiley\")\n&lt;DOM Element: g at 0x7f8224770940&gt;\n</code></pre> <p>\u73b0\u5728\uff0c\u60a8\u5c06\u83b7\u5f97\u4e0e <code>id</code> \u5c5e\u6027\u503c\u76f8\u5bf9\u5e94\u7684\u9884\u671f XML \u5143\u7d20\u3002</p> <p>\u4f7f\u7528 ID \u6700\u591a\u53ef\u4ee5\u67e5\u627e\u4e00\u4e2a\u552f\u4e00\u5143\u7d20\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6807\u7b7e\u540d\u79f0\u67e5\u627e\u76f8\u4f3c\u5143\u7d20\u7684\u96c6\u5408\u3002 \u4e0e <code>.getElementById()</code> \u65b9\u6cd5\u4e0d\u540c\uff0c\u60a8\u53ef\u4ee5\u5728\u6587\u6863\u6216\u7279\u5b9a\u7236\u5143\u7d20\u4e0a\u8c03\u7528 <code>.getElementsByTagName()</code> \u6765\u7f29\u5c0f\u641c\u7d22\u8303\u56f4\uff1a</p> <pre><code>&gt;&gt;&gt; document.getElementsByTagName(\"ellipse\")\n[\n    &lt;DOM Element: ellipse at 0x7fa2c944f430&gt;,\n    &lt;DOM Element: ellipse at 0x7fa2c944f4c0&gt;\n]\n\n&gt;&gt;&gt; root = document.documentElement\n&gt;&gt;&gt; root.getElementsByTagName(\"ellipse\")\n[\n    &lt;DOM Element: ellipse at 0x7fa2c944f430&gt;,\n    &lt;DOM Element: ellipse at 0x7fa2c944f4c0&gt;\n]\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c<code>.getElementsByTagName()</code> \u59cb\u7ec8\u8fd4\u56de\u5143\u7d20\u7684\u5217\u8868\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u5143\u7d20\u6216 <code>None</code>\u3002 \u5728\u4e24\u79cd\u65b9\u6cd5\u4e4b\u95f4\u5207\u6362\u65f6\u5fd8\u8bb0\u8fd9\u4e00\u70b9\u662f\u5e38\u89c1\u7684\u9519\u8bef\u6765\u6e90\u3002</p> <p>\u4e0d\u5e78\u7684\u662f\uff0c\u50cf <code>&lt;inkscape:custom&gt;</code> \u8fd9\u6837\u5e26\u6709\u547d\u540d\u7a7a\u95f4\u6807\u8bc6\u7b26\u524d\u7f00\u7684\u5143\u7d20\u4e0d\u4f1a\u88ab\u5305\u542b\u5728\u5185\u3002 \u5fc5\u987b\u4f7f\u7528 <code>.getElementsByTagNameNS()</code> \u6765\u641c\u7d22\u5b83\u4eec\uff0c\u5b83\u9700\u8981\u4e0d\u540c\u7684\u53c2\u6570\uff1a</p> <pre><code>&gt;&gt;&gt; document.getElementsByTagNameNS(\n...     \"http://www.inkscape.org/namespaces/inkscape\",\n...     \"custom\"\n... )\n...\n[&lt;DOM Element: inkscape:custom at 0x7f97e3f2a3a0&gt;]\n\n&gt;&gt;&gt; document.getElementsByTagNameNS(\"*\", \"custom\")\n[&lt;DOM Element: inkscape:custom at 0x7f97e3f2a3a0&gt;]\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f XML \u547d\u540d\u7a7a\u95f4\uff0c\u901a\u5e38\u91c7\u7528 \u57df\u540d \u7684\u5f62\u5f0f\uff0c\u800c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6807\u7b7e\u540d\u79f0\u3002 \u8bf7\u6ce8\u610f\uff0c\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u662f\u65e0\u5173\u7d27\u8981\u7684\uff01 \u8981\u641c\u7d22\u6240\u6709\u547d\u540d\u7a7a\u95f4\uff0c\u60a8\u53ef\u4ee5\u63d0\u4f9b\u901a\u914d\u7b26 (*)\u3002</p> <p>Note</p> <p>Note: \u8981\u67e5\u627e XML \u6587\u6863\u4e2d\u58f0\u660e\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u6839\u5143\u7d20\u7684\u5c5e\u6027\u3002 \u7406\u8bba\u4e0a\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u5143\u7d20\u4e0a\u58f0\u660e\uff0c\u4f46\u60a8\u901a\u5e38\u4f1a\u5728\u9876\u5c42\u5143\u7d20\u4e2d\u627e\u5230\u5b83\u4eec\u3002</p> <p>\u4e00\u65e6\u627e\u5230\u60a8\u611f\u5174\u8da3\u7684\u5143\u7d20\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u5728\u6811\u4e0a\u884c\u8d70\u3002 \u7136\u800c\uff0cminidom \u7684\u53e6\u4e00\u4e2a\u4ee4\u4eba\u4e0d\u5b89\u7684\u602a\u7656\u662f\u5b83\u5982\u4f55\u5904\u7406\u5143\u7d20\u4e4b\u95f4\u7684\u7a7a\u767d\u5b57\u7b26\uff1a</p> <pre><code>&gt;&gt;&gt; element = document.getElementById(\"smiley\")\n\n&gt;&gt;&gt; element.parentNode\n&lt;DOM Element: svg at 0x7fc78c62d790&gt;\n\n&gt;&gt;&gt; element.firstChild\n&lt;DOM Text node \"'\\n    '\"&gt;\n\n&gt;&gt;&gt; element.lastChild\n&lt;DOM Text node \"'\\n  '\"&gt;\n\n&gt;&gt;&gt; element.nextSibling\n&lt;DOM Text node \"'\\n  '\"&gt;\n\n&gt;&gt;&gt; element.previousSibling\n&lt;DOM Text node \"'\\n  '\"&gt;\n</code></pre> <p>\u6362\u884c\u7b26\u548c\u524d\u5bfc\u7f29\u8fdb\u88ab\u6355\u83b7\u4e3a\u5355\u72ec\u7684\u6811\u5143\u7d20\uff0c\u8fd9\u662f\u89c4\u8303\u6240\u8981\u6c42\u7684\u3002 \u6709\u4e9b\u89e3\u6790\u5668\u53ef\u4ee5\u8ba9\u4f60\u5ffd\u7565\u8fd9\u4e9b\uff0c\u4f46 Python \u4e0d\u884c\u3002 \u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u505a\u7684\u662f\u624b\u52a8\u6298\u53e0\u6b64\u7c7b\u8282\u70b9\u4e2d\u7684\u7a7a\u767d\uff1a</p> <pre><code>&gt;&gt;&gt; def remove_whitespace(node):\n...     if node.nodeType == Node.TEXT_NODE:\n...         if node.nodeValue.strip() == \"\":\n...             node.nodeValue = \"\"\n...     for child in node.childNodes:\n...         remove_whitespace(child)\n...\n&gt;&gt;&gt; document = parse(\"smiley.svg\")\n&gt;&gt;&gt; set_id_attribute(document)\n&gt;&gt;&gt; remove_whitespace(document)\n&gt;&gt;&gt; document.normalize()\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u60a8\u8fd8\u5fc5\u987b\u8c03\u7528 <code>.normalize()</code> \u6587\u6863\u6765\u7ec4\u5408\u76f8\u90bb\u7684\u6587\u672c\u8282\u70b9 \u3002 \u5426\u5219\uff0c\u60a8\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u5806\u53ea\u6709\u7a7a\u683c\u7684\u5197\u4f59 XML \u5143\u7d20\u3002 \u540c\u6837\uff0c\u9012\u5f52\u662f\u8bbf\u95ee\u6811\u5143\u7d20\u7684\u552f\u4e00\u65b9\u6cd5\uff0c\u56e0\u4e3a\u60a8\u65e0\u6cd5\u4f7f\u7528\u5faa\u73af\u8fed\u4ee3\u6587\u6863\u53ca\u5176\u5143\u7d20\u3002 \u6700\u540e\uff0c\u8fd9\u5e94\u8be5\u4f1a\u7ed9\u4f60\u9884\u671f\u7684\u7ed3\u679c\uff1a</p> <pre><code>&gt;&gt;&gt; element = document.getElementById(\"smiley\")\n\n&gt;&gt;&gt; element.parentNode\n&lt;DOM Element: svg at 0x7fc78c62d790&gt;\n\n&gt;&gt;&gt; element.firstChild\n&lt;DOM Comment node \"' Head '\"&gt;\n\n&gt;&gt;&gt; element.lastChild\n&lt;DOM Element: path at 0x7f8beea0f670&gt;\n\n&gt;&gt;&gt; element.nextSibling\n&lt;DOM Element: text at 0x7f8beea0f700&gt;\n\n&gt;&gt;&gt; element.previousSibling\n&lt;DOM Element: defs at 0x7f8beea0f160&gt;\n\n&gt;&gt;&gt; element.childNodes\n[\n    &lt;DOM Comment node \"' Head '\"&gt;,\n    &lt;DOM Element: circle at 0x7f8beea0f4c0&gt;,\n    &lt;DOM Comment node \"' Eyes '\"&gt;,\n    &lt;DOM Element: ellipse at 0x7fa2c944f430&gt;,\n    &lt;DOM Element: ellipse at 0x7fa2c944f4c0&gt;,\n    &lt;DOM Comment node \"' Mouth '\"&gt;,\n    &lt;DOM Element: path at 0x7f8beea0f670&gt;\n]\n</code></pre> <p>\u5143\u7d20\u516c\u5f00\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u4ee5\u4fbf\u60a8\u67e5\u8be2\u5176\u8be6\u7ec6\u4fe1\u606f\uff1a</p> <pre><code>&gt;&gt;&gt; element = document.getElementsByTagNameNS(\"*\", \"custom\")[0]\n\n&gt;&gt;&gt; element.prefix\n'inkscape'\n\n&gt;&gt;&gt; element.tagName\n'inkscape:custom'\n\n&gt;&gt;&gt; element.attributes\n&lt;xml.dom.minidom.NamedNodeMap object at 0x7f6c9d83ba80&gt;\n\n&gt;&gt;&gt; dict(element.attributes.items())\n{'x': '42', 'inkscape:z': '555'}\n\n&gt;&gt;&gt; element.hasChildNodes()\nTrue\n\n&gt;&gt;&gt; element.hasAttributes()\nTrue\n\n&gt;&gt;&gt; element.hasAttribute(\"x\")\nTrue\n\n&gt;&gt;&gt; element.getAttribute(\"x\")\n'42'\n\n&gt;&gt;&gt; element.getAttributeNode(\"x\")\n&lt;xml.dom.minidom.Attr object at 0x7f82244a05f0&gt;\n\n&gt;&gt;&gt; element.getAttribute(\"missing-attribute\")\n''\n</code></pre> <p>\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u5143\u7d20\u7684\u540d\u79f0\u7a7a\u95f4\u3001\u6807\u7b7e\u540d\u79f0\u6216\u5c5e\u6027\u3002 \u5982\u679c\u60a8\u8981\u6c42\u7f3a\u5c11\u5c5e\u6027\uff0c\u90a3\u4e48\u60a8\u5c06\u5f97\u5230\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 ('')\u3002</p> <p>\u5904\u7406\u547d\u540d\u7a7a\u95f4\u5c5e\u6027\u6ca1\u6709\u592a\u5927\u4e0d\u540c\u3002 \u60a8\u53ea\u9700\u8bb0\u4f4f\u76f8\u5e94\u5730\u4e3a\u5c5e\u6027\u540d\u79f0\u6dfb\u52a0\u524d\u7f00\u6216\u63d0\u4f9b\u57df\u540d\uff1a</p> <pre><code>&gt;&gt;&gt; element.hasAttribute(\"z\")\nFalse\n\n&gt;&gt;&gt; element.hasAttribute(\"inkscape:z\")\nTrue\n\n&gt;&gt;&gt; element.hasAttributeNS(\n...     \"http://www.inkscape.org/namespaces/inkscape\",\n...     \"z\"\n... )\n...\nTrue\n\n&gt;&gt;&gt; element.hasAttributeNS(\"*\", \"z\")\nFalse\n</code></pre> <p>\u5947\u602a\u7684\u662f\uff0c\u901a\u914d\u7b26 (*) \u5728\u8fd9\u91cc\u4e0d\u8d77\u4f5c\u7528\uff0c\u5c31\u50cf\u4e4b\u524d\u4f7f\u7528 <code>.getElementsByTagNameNS()</code> \u65b9\u6cd5\u4e00\u6837\u3002</p> <p>\u7531\u4e8e\u672c\u6559\u7a0b\u4ec5\u6d89\u53ca XML \u89e3\u6790\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u68c0\u67e5\u201cminidom\u201d\u6587\u6863\u4ee5\u83b7\u53d6\u4fee\u6539 DOM \u6811\u7684\u65b9\u6cd5\u3002 \u5b83\u4eec\u5927\u591a\u9075\u5faa W3C \u89c4\u8303\u3002</p> <p>\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c<code>minidom</code> \u6a21\u5757\u5e76\u4e0d\u662f\u5f88\u65b9\u4fbf\u3002 \u5b83\u7684\u4e3b\u8981\u4f18\u70b9\u6765\u81ea\u4e8e\u5b83\u662f\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u65e0\u9700\u5728\u9879\u76ee\u4e2d\u5b89\u88c5\u4efb\u4f55\u5916\u90e8\u4f9d\u8d56\u9879\u5373\u53ef\u4f7f\u7528 DOM\u3002</p> <p>Considering that parsing XML documents using the DOM is arguably the most straightforward, you won\u2019t be that surprised to find a DOM parser in the Python standard library. What is surprising, though, is that there are actually two DOM parsers.</p> <p>The xml.dom package houses two modules to work with DOM in Python:</p> <ol> <li>xml.dom.minidom</li> <li>xml.dom.pulldom</li> </ol> <p>The first is a stripped-down implementation of the DOM interface conforming to a relatively old version of the W3C specification. It provides common objects defined by the DOM API such as Document, Element, and Attr. This module is poorly documented and has quite limited usefulness, as you\u2019re about to find out.</p> <p>The second module has a slightly misleading name because it defines a streaming pull parser, which can optionally produce a DOM representation of the current node in the document tree. You\u2019ll find more information about the pulldom parser later.</p> <p>There are two functions in minidom that let you parse XML data from various data sources. One accepts either a filename or a file object, while another one expects a Python string:</p> <pre><code>&gt;&gt;&gt; from xml.dom.minidom import parse, parseString\n\n&gt;&gt;&gt; # Parse XML from a filename\n&gt;&gt;&gt; document = parse(\"smiley.svg\")\n\n&gt;&gt;&gt; # Parse XML from a file object\n&gt;&gt;&gt; with open(\"smiley.svg\") as file:\n...     document = parse(file)\n...\n\n&gt;&gt;&gt; # Parse XML from a Python string\n&gt;&gt;&gt; document = parseString(\"\"\"\\\n... &lt;svg viewBox=\"-105 -100 210 270\"&gt;\n...   &lt;!-- More content goes here... --&gt;\n... &lt;/svg&gt;\n... \"\"\")\n</code></pre> <p>The triple-quoted string helps embed a multiline string literal without using the continuation character () at the end of each line. In any case, you\u2019ll end up with a Document instance, which exhibits the familiar DOM interface, letting you traverse the tree.</p> <p>Apart from that, you\u2019ll be able to access the XML declaration, DTD, and the root element:</p> <pre><code>&gt;&gt;&gt; document = parse(\"smiley.svg\")\n\n&gt;&gt;&gt; # XML Declaration\n&gt;&gt;&gt; document.version, document.encoding, document.standalone\n('1.0', 'UTF-8', False)\n\n&gt;&gt;&gt; # Document Type Definition (DTD)\n&gt;&gt;&gt; dtd = document.doctype\n&gt;&gt;&gt; dtd.entities[\"custom_entity\"].childNodes\n[&lt;DOM Text node \"'Hello'\"&gt;]\n\n&gt;&gt;&gt; # Document Root\n&gt;&gt;&gt; document.documentElement\n&lt;DOM Element: svg at 0x7fc78c62d790&gt;\n</code></pre> <p>As you can see, even though the default XML parser in Python can\u2019t validate documents, it still lets you inspect .doctype, the DTD, if it\u2019s present. Note that the XML declaration and DTD are optional. If the XML declaration or a given XML attribute is missing, then the corresponding Python attributes will be None.</p> <p>To find an element by ID, you must use the Document instance rather than a specific parent Element. The sample SVG image has two nodes with an id attribute, but you can\u2019t find either of them:</p> <pre><code>&gt;&gt;&gt; document.getElementById(\"skin\") is None\nTrue\n&gt;&gt;&gt; document.getElementById(\"smiley\") is None\nTrue\n</code></pre> <p>That may be surprising for someone who has only worked with HTML and JavaScript but hasn\u2019t worked with XML before. While HTML defines the semantics for certain elements and attributes such as  or id, XML doesn\u2019t attach any meaning to its building blocks. You need to mark an attribute as an ID explicitly using DTD or by calling .setIdAttribute() in Python, for example: Definition Style Implementation DTD &lt;!ATTLIST linearGradient id ID #IMPLIED&gt; Python linearGradient.setIdAttribute(\"id\") <p>However, using a DTD isn\u2019t enough to fix the problem if your document has a default namespace, which is the case for the sample SVG image. To address this, you can visit all elements recursively in Python, check whether they have the id attribute, and indicate it as their ID in one go:</p> <pre><code>&gt;&gt;&gt; from xml.dom.minidom import parse, Node\n\n&gt;&gt;&gt; def set_id_attribute(parent, attribute_name=\"id\"):\n...     if parent.nodeType == Node.ELEMENT_NODE:\n...         if parent.hasAttribute(attribute_name):\n...             parent.setIdAttribute(attribute_name)\n...     for child in parent.childNodes:\n...         set_id_attribute(child, attribute_name)\n...\n&gt;&gt;&gt; document = parse(\"smiley.svg\")\n&gt;&gt;&gt; set_id_attribute(document)\n</code></pre> <p>Your custom set_id_attribute() function takes a parent element and an optional name for the identity attribute, which defaults to \"id\". When you call that function on your SVG document, then all children elements that have an id attribute will become accessible through the DOM API:</p> <pre><code>&gt;&gt;&gt; document.getElementById(\"skin\")\n&lt;DOM Element: linearGradient at 0x7f82247703a0&gt;\n\n&gt;&gt;&gt; document.getElementById(\"smiley\")\n&lt;DOM Element: g at 0x7f8224770940&gt;\n</code></pre> <p>Now, you\u2019re getting the expected XML element corresponding to the id attribute\u2019s value.</p> <p>Using an ID allows for finding at most one unique element, but you can also find a collection of similar elements by their tag name. Unlike the .getElementById() method, you can call <code>.getElementsByTagName()</code> on the document or a particular parent element to reduce the search scope:</p> <pre><code>&gt;&gt;&gt; document.getElementsByTagName(\"ellipse\")\n[\n    &lt;DOM Element: ellipse at 0x7fa2c944f430&gt;,\n    &lt;DOM Element: ellipse at 0x7fa2c944f4c0&gt;\n]\n\n&gt;&gt;&gt; root = document.documentElement\n&gt;&gt;&gt; root.getElementsByTagName(\"ellipse\")\n[\n    &lt;DOM Element: ellipse at 0x7fa2c944f430&gt;,\n    &lt;DOM Element: ellipse at 0x7fa2c944f4c0&gt;\n]\n</code></pre> <p>Notice that <code>.getElementsByTagName()</code> always returns a list of elements instead of a single element or None. Forgetting about it when you switch between both methods is a common source of errors.</p> <p>Unfortunately, elements like <code>&lt;inkscape:custom&gt;</code> that are prefixed with a namespace identifier won\u2019t be included. They must be searched using <code>.getElementsByTagNameNS()</code>, which expects different arguments:</p> <pre><code>&gt;&gt;&gt; document.getElementsByTagNameNS(\n...     \"http://www.inkscape.org/namespaces/inkscape\",\n...     \"custom\"\n... )\n...\n[&lt;DOM Element: inkscape:custom at 0x7f97e3f2a3a0&gt;]\n\n&gt;&gt;&gt; document.getElementsByTagNameNS(\"*\", \"custom\")\n[&lt;DOM Element: inkscape:custom at 0x7f97e3f2a3a0&gt;]\n</code></pre> <p>The first argument must be the XML namespace, which typically has the form of a domain name, while the second argument is the tag name. Notice that the namespace prefix is irrelevant! To search all namespaces, you can provide a wildcard character (*).</p> <p>Note</p> <p>Note: To find the namespaces declared in your XML document, you can check out the root element\u2019s attributes. In theory, they could be declared on any element, but the top-level one is where you\u2019d usually find them.</p> <p>Once you locate the element you\u2019re interested in, you may use it to walk over the tree. However, another jarring quirk with minidom is how it handles whitespace characters between elements:</p> <pre><code>&gt;&gt;&gt; element = document.getElementById(\"smiley\")\n\n&gt;&gt;&gt; element.parentNode\n&lt;DOM Element: svg at 0x7fc78c62d790&gt;\n\n&gt;&gt;&gt; element.firstChild\n&lt;DOM Text node \"'\\n    '\"&gt;\n\n&gt;&gt;&gt; element.lastChild\n&lt;DOM Text node \"'\\n  '\"&gt;\n\n&gt;&gt;&gt; element.nextSibling\n&lt;DOM Text node \"'\\n  '\"&gt;\n\n&gt;&gt;&gt; element.previousSibling\n&lt;DOM Text node \"'\\n  '\"&gt;\n</code></pre> <p>The newline characters and leading indentation are captured as separate tree elements, which is what the specification requires. Some parsers let you ignore these, but not the Python one. What you can do, however, is collapse whitespace in such nodes manually:</p> <pre><code>&gt;&gt;&gt; def remove_whitespace(node):\n...     if node.nodeType == Node.TEXT_NODE:\n...         if node.nodeValue.strip() == \"\":\n...             node.nodeValue = \"\"\n...     for child in node.childNodes:\n...         remove_whitespace(child)\n...\n&gt;&gt;&gt; document = parse(\"smiley.svg\")\n&gt;&gt;&gt; set_id_attribute(document)\n&gt;&gt;&gt; remove_whitespace(document)\n&gt;&gt;&gt; document.normalize()\n</code></pre> <p>Note that you also have to <code>.normalize()</code> the document to combine adjacent text nodes. Otherwise, you could end up with a bunch of redundant XML elements with just whitespace. Again, recursion is the only way to visit tree elements since you can\u2019t iterate over the document and its elements with a loop. Finally, this should give you the expected result:</p> <pre><code>&gt;&gt;&gt; element = document.getElementById(\"smiley\")\n\n&gt;&gt;&gt; element.parentNode\n&lt;DOM Element: svg at 0x7fc78c62d790&gt;\n\n&gt;&gt;&gt; element.firstChild\n&lt;DOM Comment node \"' Head '\"&gt;\n\n&gt;&gt;&gt; element.lastChild\n&lt;DOM Element: path at 0x7f8beea0f670&gt;\n\n&gt;&gt;&gt; element.nextSibling\n&lt;DOM Element: text at 0x7f8beea0f700&gt;\n\n&gt;&gt;&gt; element.previousSibling\n&lt;DOM Element: defs at 0x7f8beea0f160&gt;\n\n&gt;&gt;&gt; element.childNodes\n[\n    &lt;DOM Comment node \"' Head '\"&gt;,\n    &lt;DOM Element: circle at 0x7f8beea0f4c0&gt;,\n    &lt;DOM Comment node \"' Eyes '\"&gt;,\n    &lt;DOM Element: ellipse at 0x7fa2c944f430&gt;,\n    &lt;DOM Element: ellipse at 0x7fa2c944f4c0&gt;,\n    &lt;DOM Comment node \"' Mouth '\"&gt;,\n    &lt;DOM Element: path at 0x7f8beea0f670&gt;\n]\n</code></pre> <p>Elements expose a few helpful methods and properties to let you query their details:</p> <pre><code>&gt;&gt;&gt; element = document.getElementsByTagNameNS(\"*\", \"custom\")[0]\n\n&gt;&gt;&gt; element.prefix\n'inkscape'\n\n&gt;&gt;&gt; element.tagName\n'inkscape:custom'\n\n&gt;&gt;&gt; element.attributes\n&lt;xml.dom.minidom.NamedNodeMap object at 0x7f6c9d83ba80&gt;\n\n&gt;&gt;&gt; dict(element.attributes.items())\n{'x': '42', 'inkscape:z': '555'}\n\n&gt;&gt;&gt; element.hasChildNodes()\nTrue\n\n&gt;&gt;&gt; element.hasAttributes()\nTrue\n\n&gt;&gt;&gt; element.hasAttribute(\"x\")\nTrue\n\n&gt;&gt;&gt; element.getAttribute(\"x\")\n'42'\n\n&gt;&gt;&gt; element.getAttributeNode(\"x\")\n&lt;xml.dom.minidom.Attr object at 0x7f82244a05f0&gt;\n\n&gt;&gt;&gt; element.getAttribute(\"missing-attribute\")\n''\n</code></pre> <p>For instance, you can check an element\u2019s namespace, tag name, or attributes. If you ask for a missing attribute, then you\u2019ll get an empty string ('').</p> <p>Dealing with namespaced attributes isn\u2019t much different. You just have to remember to prefix the attribute name accordingly or provide the domain name:</p> <pre><code>&gt;&gt;&gt; element.hasAttribute(\"z\")\nFalse\n\n&gt;&gt;&gt; element.hasAttribute(\"inkscape:z\")\nTrue\n\n&gt;&gt;&gt; element.hasAttributeNS(\n...     \"http://www.inkscape.org/namespaces/inkscape\",\n...     \"z\"\n... )\n...\nTrue\n\n&gt;&gt;&gt; element.hasAttributeNS(\"*\", \"z\")\nFalse\n</code></pre> <p>Strangely enough, the wildcard character (*) doesn\u2019t work here as it did with the <code>.getElementsByTagNameNS()</code> method before.</p> <p>Since this tutorial is only about XML parsing, you\u2019ll need to check the <code>minidom</code> documentation for methods that modify the DOM tree. They mostly follow the W3C specification.</p> <p>As you can see, the <code>minidom</code> module isn\u2019t terribly convenient. Its main advantage comes from being part of the standard library, which means you don\u2019t have to install any external dependencies in your project to work with the DOM.</p>"},{"location":"xml/#xmlsax-python-\u7684-sax-\u63a5\u53e3","title":"xml.sax: Python \u7684 SAX \u63a5\u53e3","text":"\u4e2d\u6587\u539f\u6587 <p>\u8981\u5f00\u59cb\u5728 Python \u4e2d\u4f7f\u7528 SAX\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0e\u4ee5\u524d\u76f8\u540c\u7684 parse() \u548c parseString() \u4fbf\u5229\u51fd\u6570\uff0c\u4f46\u4f7f\u7528 xml.sax \u5305\u4e2d\u7684\u51fd\u6570\u3002 \u60a8\u8fd8\u5fc5\u987b\u81f3\u5c11\u63d0\u4f9b\u4e00\u4e2a\u5fc5\u9700\u7684\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5185\u5bb9\u5904\u7406\u7a0b\u5e8f\u5b9e\u4f8b\u3002 \u672c\u7740 Java \u7684\u7cbe\u795e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b50\u7c7b\u5316\u7279\u5b9a\u57fa\u7c7b\u6765\u63d0\u4f9b\u4e00\u4e2a\u57fa\u7c7b\uff1a</p> <pre><code>from xml.sax import parse\nfrom xml.sax.handler import ContentHandler\n\nclass SVGHandler(ContentHandler):\n    pass\n\nparse(\"smiley.svg\", SVGHandler())\n</code></pre> <p>\u5185\u5bb9\u5904\u7406\u7a0b\u5e8f\u5728\u89e3\u6790\u6587\u6863\u65f6\u63a5\u6536\u4e0e\u6587\u6863\u4e2d\u7684\u5143\u7d20\u76f8\u5bf9\u5e94\u7684\u4e8b\u4ef6\u6d41\u3002 \u8fd0\u884c\u6b64\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u6709\u7528\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u60a8\u7684\u5904\u7406\u7a0b\u5e8f\u7c7b\u662f\u7a7a\u7684\u3002 \u4e3a\u4e86\u4f7f\u5176\u5de5\u4f5c\uff0c\u60a8\u9700\u8981\u4ece\u8d85\u7c7b\u91cd\u8f7d\u4e00\u4e2a\u6216\u591a\u4e2a\u56de\u8c03\u65b9\u6cd5\u3002</p> <p>\u542f\u52a8\u60a8\u6700\u559c\u6b22\u7684\u7f16\u8f91\u5668\uff0c\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5e76\u5c06\u5176\u4fdd\u5b58\u5728\u540d\u4e3a\u201csvg_handler.py\u201d\u7684\u6587\u4ef6\u4e2d\uff1a</p> <pre><code># svg_handler.py\n\nfrom xml.sax.handler import ContentHandler\n\nclass SVGHandler(ContentHandler):\n\n    def startElement(self, name, attrs):\n        print(f\"BEGIN: &lt;{name}&gt;, {attrs.keys()}\")\n\n    def endElement(self, name):\n        print(f\"END: &lt;/{name}&gt;\")\n\n    def characters(self, content):\n        if content.strip() != \"\":\n            print(\"CONTENT:\", repr(content))\n</code></pre> <p>\u8fd9\u4e2a\u4fee\u6539\u540e\u7684\u5185\u5bb9\u5904\u7406\u7a0b\u5e8f\u5c06\u4e00\u4e9b\u4e8b\u4ef6\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u4e0a\u3002 SAX \u89e3\u6790\u5668\u5c06\u4e3a\u60a8\u8c03\u7528\u8fd9\u4e09\u4e2a\u65b9\u6cd5\u6765\u54cd\u5e94\u67e5\u627e\u5f00\u59cb\u6807\u8bb0\u3001\u7ed3\u675f\u6807\u8bb0\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u4e00\u4e9b\u6587\u672c\u3002 \u5f53\u60a8\u6253\u5f00 Python \u89e3\u91ca\u5668\u7684\u4ea4\u4e92\u5f0f\u4f1a\u8bdd\u65f6\uff0c\u5bfc\u5165\u60a8\u7684\u5185\u5bb9\u5904\u7406\u7a0b\u5e8f\u5e76\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\u3002 \u5b83\u5e94\u8be5\u4ea7\u751f\u4ee5\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>&gt;&gt;&gt; from xml.sax import parse\n&gt;&gt;&gt; from svg_handler import SVGHandler\n&gt;&gt;&gt; parse(\"smiley.svg\", SVGHandler())\nBEGIN: &lt;svg&gt;, ['xmlns', 'xmlns:inkscape', 'viewBox', 'width', 'height']\nBEGIN: &lt;inkscape:custom&gt;, ['x', 'inkscape:z']\nCONTENT: 'Some value'\nEND: &lt;/inkscape:custom&gt;\nBEGIN: &lt;defs&gt;, []\nBEGIN: &lt;linearGradient&gt;, ['id', 'x1', 'x2', 'y1', 'y2']\nBEGIN: &lt;stop&gt;, ['offset', 'stop-color', 'stop-opacity']\nEND: &lt;/stop&gt;\n\u22ee\n</code></pre> <p>\u8fd9\u672c\u8d28\u4e0a\u662f\u89c2\u5bdf\u8005\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5b83\u5141\u8bb8\u60a8\u5c06 XML \u9010\u6b65\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u5206\u5c42\u683c\u5f0f\u3002 \u5047\u8bbe\u60a8\u60f3\u5c06\u8be5 SVG \u6587\u4ef6\u8f6c\u6362\u4e3a\u7b80\u5316\u7684 JSON \u8868\u793a\u5f62\u5f0f\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u5c06\u5185\u5bb9\u5904\u7406\u7a0b\u5e8f\u5bf9\u8c61\u5b58\u50a8\u5728\u5355\u72ec\u7684\u53d8\u91cf\u4e2d\uff0c\u4ee5\u4fbf\u7a0d\u540e\u4ece\u4e2d\u63d0\u53d6\u4fe1\u606f\uff1a</p> <pre><code>&gt;&gt;&gt; from xml.sax import parse\n&gt;&gt;&gt; from svg_handler import SVGHandler\n&gt;&gt;&gt; handler = SVGHandler()\n&gt;&gt;&gt; parse(\"smiley.svg\", handler)\n</code></pre> <p>\u7531\u4e8e SAX \u89e3\u6790\u5668\u53d1\u51fa\u4e8b\u4ef6\u65f6\u4e0d\u63d0\u4f9b\u6709\u5173\u5176\u627e\u5230\u7684\u5143\u7d20\u7684\u4efb\u4f55\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u8ddf\u8e2a\u60a8\u5728\u6811\u4e2d\u7684\u4f4d\u7f6e\u3002 \u56e0\u6b64\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u548c\u5f39\u51fa\u5230\u5806\u6808\u662f\u6709\u610f\u4e49\u7684\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5e38\u89c4Python\u5217\u8868\u3002 \u60a8\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u8f85\u52a9\u5c5e\u6027 <code>.current_element</code> \uff0c\u5b83\u5c06\u8fd4\u56de\u653e\u7f6e\u5728\u5806\u6808\u9876\u90e8\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1a</p> <pre><code># svg_handler.py\n\n# ...\n\nclass SVGHandler(ContentHandler):\n\n    def __init__(self):\n        super().__init__()\n        self.element_stack = []\n\n    @property\n    def current_element(self):\n        return self.element_stack[-1]\n\n    # ...\n</code></pre> <p>\u5f53 SAX \u89e3\u6790\u5668\u53d1\u73b0\u65b0\u5143\u7d20\u65f6\uff0c\u60a8\u53ef\u4ee5\u7acb\u5373\u6355\u83b7\u5176\u6807\u8bb0\u540d\u79f0\u548c\u5c5e\u6027\uff0c\u540c\u65f6\u4e3a\u5b50\u5143\u7d20\u548c\u503c\u521b\u5efa\u5360\u4f4d\u7b26\uff0c\u8fd9\u4e24\u8005\u90fd\u662f\u53ef\u9009\u7684\u3002 \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5143\u7d20\u5b58\u50a8\u4e3a<code>dict</code>\u5bf9\u8c61\u3002 \u5c06\u73b0\u6709\u7684 <code>.startElement()</code> \u65b9\u6cd5\u66ff\u6362\u4e3a\u65b0\u7684\u5b9e\u73b0\uff1a</p> <pre><code># svg_handler.py\n\n# ...\n\nclass SVGHandler(ContentHandler):\n\n    # ...\n\n    def startElement(self, name, attrs):\n        self.element_stack.append({\n            \"name\": name,\n            \"attributes\": dict(attrs),\n            \"children\": [],\n            \"value\": \"\"\n        })\n</code></pre> <p>SAX \u89e3\u6790\u5668\u4e3a\u60a8\u63d0\u4f9b\u5c5e\u6027\u4f5c\u4e3a\u6620\u5c04\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a\u666e\u901a\u7684Python \u5b57\u5178 \u5e76\u8c03\u7528 <code>dict()</code> \u51fd\u6570\u3002 \u5143\u7d20\u503c\u901a\u5e38\u5206\u5e03\u5728\u591a\u4e2a\u90e8\u5206\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u52a0\u53f7\u8fd0\u7b97\u7b26 (+) \u6216\u76f8\u5e94\u7684\u589e\u5f3a\u8d4b\u503c\u8bed\u53e5\u5c06\u8fd9\u4e9b\u90e8\u5206\u8fde\u63a5\u8d77\u6765\uff1a</p> <pre><code># svg_handler.py\n\n# ...\n\nclass SVGHandler(ContentHandler):\n\n    # ...\n\n    def characters(self, content):\n        self.current_element[\"value\"] += content\n</code></pre> <p>\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u805a\u5408\u6587\u672c\u5c06\u786e\u4fdd\u591a\u884c\u5185\u5bb9\u6700\u7ec8\u51fa\u73b0\u5728\u5f53\u524d\u5143\u7d20\u4e2d\u3002 \u4f8b\u5982\uff0c\u793a\u4f8b SVG \u6587\u4ef6\u4e2d\u7684<code>&lt;script&gt;</code>\u6807\u8bb0\u5305\u542b\u516d\u884c JavaScript \u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5206\u522b\u89e6\u53d1\u5bf9<code>characters()</code> \u56de\u8c03\u7684\u8c03\u7528\u3002</p> <p>\u6700\u540e\uff0c\u4e00\u65e6\u89e3\u6790\u5668\u5076\u7136\u53d1\u73b0\u7ed3\u675f\u6807\u8bb0\uff0c\u60a8\u5c31\u53ef\u4ee5\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u5f53\u524d\u5143\u7d20\u5e76\u5c06\u5176\u9644\u52a0\u5230\u5176\u7236\u5143\u7d20\u7684\u5b50\u5143\u7d20\u4e2d\u3002 \u5982\u679c\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5b83\u5c06\u662f\u60a8\u5e94\u8be5\u4fdd\u7559\u4ee5\u4f9b\u4ee5\u540e\u4f7f\u7528\u7684\u6587\u6863\u7684\u6839\u5143\u7d20\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u901a\u8fc7\u5220\u9664\u5177\u6709\u7a7a\u503c\u7684\u952e\u6765\u6e05\u7406\u5f53\u524d\u5143\u7d20\uff1a</p> <pre><code># svg_handler.py\n\n# ...\n\nclass SVGHandler(ContentHandler):\n\n    # ...\n\n    def endElement(self, name):\n        clean(self.current_element)\n        if len(self.element_stack) &gt; 1:\n            child = self.element_stack.pop()\n            self.current_element[\"children\"].append(child)\n\ndef clean(element):\n    element[\"value\"] = element[\"value\"].strip()\n    for key in (\"attributes\", \"children\", \"value\"):\n        if not element[key]:\n            del element[key]\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c<code>clean()</code>\u662f\u5728\u7c7b\u4e3b\u4f53\u4e4b\u5916\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u6e05\u7406\u5fc5\u987b\u5728\u6700\u540e\u5b8c\u6210\uff0c\u56e0\u4e3a\u65e0\u6cd5\u9884\u5148\u77e5\u9053\u53ef\u80fd\u6709\u591a\u5c11\u6587\u672c\u7247\u6bb5\u9700\u8981\u8fde\u63a5\u3002 \u60a8\u53ef\u4ee5\u5c55\u5f00\u4e0b\u9762\u7684\u53ef\u6298\u53e0\u90e8\u5206\u4ee5\u83b7\u53d6\u5b8c\u6574\u7684\u5185\u5bb9\u5904\u7406\u7a0b\u5e8f\u4ee3\u7801\u3002</p> <p>\u7528\u4e8e SVG \u5230 JSON \u8f6c\u6362\u7684 SAX \u5904\u7406\u7a0b\u5e8f</p> <pre><code># svg_handler.py\n\nfrom xml.sax.handler import ContentHandler\n\nclass SVGHandler(ContentHandler):\n\n    def __init__(self):\n        super().__init__()\n        self.element_stack = []\n\n    @property\n    def current_element(self):\n        return self.element_stack[-1]\n\n    def startElement(self, name, attrs):\n        self.element_stack.append({\n            \"name\": name,\n            \"attributes\": dict(attrs),\n            \"children\": [],\n            \"value\": \"\"\n        })\n\n    def endElement(self, name):\n        clean(self.current_element)\n        if len(self.element_stack) &gt; 1:\n            child = self.element_stack.pop()\n            self.current_element[\"children\"].append(child)\n\n    def characters(self, content):\n        self.current_element[\"value\"] += content\n\ndef clean(element):\n    element[\"value\"] = element[\"value\"].strip()\n    for key in (\"attributes\", \"children\", \"value\"):\n        if not element[key]:\n            del element[key]\n</code></pre> <p>\u73b0\u5728\uff0c\u662f\u65f6\u5019\u901a\u8fc7\u89e3\u6790 XML\u3001\u4ece\u5185\u5bb9\u5904\u7406\u7a0b\u5e8f\u4e2d\u63d0\u53d6\u6839\u5143\u7d20\u5e76\u5c06\u5176\u8f6c\u50a8\u5230 JSON \u5b57\u7b26\u4e32\u6765\u6d4b\u8bd5\u6240\u6709\u5185\u5bb9\u4e86\uff1a</p> <pre><code>&gt;&gt;&gt; from xml.sax import parse\n&gt;&gt;&gt; from svg_handler import SVGHandler\n&gt;&gt;&gt; handler = SVGHandler()\n&gt;&gt;&gt; parse(\"smiley.svg\", handler)\n&gt;&gt;&gt; root = handler.current_element\n\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; print(json.dumps(root, indent=4))\n{\n    \"name\": \"svg\",\n    \"attributes\": {\n        \"xmlns\": \"http://www.w3.org/2000/svg\",\n        \"xmlns:inkscape\": \"http://www.inkscape.org/namespaces/inkscape\",\n        \"viewBox\": \"-105 -100 210 270\",\n        \"width\": \"210\",\n        \"height\": \"270\"\n    },\n    \"children\": [\n        {\n            \"name\": \"inkscape:custom\",\n            \"attributes\": {\n                \"x\": \"42\",\n                \"inkscape:z\": \"555\"\n            },\n            \"value\": \"Some value\"\n        },\n\u22ee\n</code></pre> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0e DOM \u76f8\u6bd4\uff0c\u6b64\u5b9e\u73b0\u6ca1\u6709\u5185\u5b58\u589e\u76ca\uff0c\u56e0\u4e3a\u5b83\u50cf\u4ee5\u524d\u4e00\u6837\u6784\u5efa\u4e86\u6574\u4e2a\u6587\u6863\u7684\u62bd\u8c61\u8868\u793a\u3002 \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u60a8\u5236\u4f5c\u4e86\u81ea\u5b9a\u4e49\u5b57\u5178\u8868\u793a\u800c\u4e0d\u662f\u6807\u51c6 DOM \u6811\u3002 \u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u60f3\u8c61\u5728\u63a5\u6536 SAX \u4e8b\u4ef6\u65f6\u76f4\u63a5\u5199\u5165\u6587\u4ef6\u6216\u6570\u636e\u5e93\u800c\u4e0d\u662f\u5185\u5b58\u3002 \u8fd9\u5c06\u6709\u6548\u5730\u63d0\u9ad8\u60a8\u7684\u8ba1\u7b97\u673a\u5185\u5b58\u9650\u5236\u3002</p> <p>\u5982\u679c\u60a8\u60f3\u89e3\u6790 XML \u547d\u540d\u7a7a\u95f4\uff0c\u90a3\u4e48\u60a8\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u6837\u677f\u4ee3\u7801\u81ea\u884c\u521b\u5efa\u548c\u914d\u7f6e SAX \u89e3\u6790\u5668\uff0c\u5e76\u5b9e\u73b0\u7565\u6709\u4e0d\u540c\u7684\u56de\u8c03\uff1a</p> <pre><code># svg_handler.py\n\nfrom xml.sax.handler import ContentHandler\n\nclass SVGHandler(ContentHandler):\n\n    def startPrefixMapping(self, prefix, uri):\n        print(f\"startPrefixMapping: {prefix=}, {uri=}\")\n\n    def endPrefixMapping(self, prefix):\n        print(f\"endPrefixMapping: {prefix=}\")\n\n    def startElementNS(self, name, qname, attrs):\n        print(f\"startElementNS: {name=}\")\n\n    def endElementNS(self, name, qname):\n        print(f\"endElementNS: {name=}\")\n</code></pre> <p>\u8fd9\u4e9b\u56de\u8c03\u63a5\u6536\u6709\u5173\u5143\u7d20\u540d\u79f0\u7a7a\u95f4\u7684\u9644\u52a0\u53c2\u6570\u3002 \u8981\u4f7f SAX \u89e3\u6790\u5668\u5b9e\u9645\u89e6\u53d1\u8fd9\u4e9b\u56de\u8c03\u800c\u4e0d\u662f\u67d0\u4e9b\u65e9\u671f\u7684\u56de\u8c03\uff0c\u60a8\u5fc5\u987b\u663e\u5f0f\u542f\u7528 XML \u547d\u540d\u7a7a\u95f4 \u652f\u6301\uff1a</p> <pre><code>&gt;&gt;&gt; from xml.sax import make_parser\n&gt;&gt;&gt; from xml.sax.handler import feature_namespaces\n&gt;&gt;&gt; from svg_handler import SVGHandler\n\n&gt;&gt;&gt; parser = make_parser()\n&gt;&gt;&gt; parser.setFeature(feature_namespaces, True)\n&gt;&gt;&gt; parser.setContentHandler(SVGHandler())\n\n&gt;&gt;&gt; parser.parse(\"smiley.svg\")\nstartPrefixMapping: prefix=None, uri='http://www.w3.org/2000/svg'\nstartPrefixMapping: prefix='inkscape', uri='http://www.inkscape.org/namespaces/inkscape'\nstartElementNS: name=('http://www.w3.org/2000/svg', 'svg')\n\u22ee\nendElementNS: name=('http://www.w3.org/2000/svg', 'svg')\nendPrefixMapping: prefix='inkscape'\nendPrefixMapping: prefix=None\n</code></pre> <p>\u8bbe\u7f6e\u6b64\u529f\u80fd\u4f1a\u5c06\u5143\u7d20\u540d\u79f0\u8f6c\u6362\u4e3a\u7531\u547d\u540d\u7a7a\u95f4\u7684\u57df\u540d\u548c\u6807\u7b7e\u540d\u79f0\u7ec4\u6210\u7684\u5143\u7ec4\u3002</p> <p><code>xml.sax</code> \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u4e8e\u4e8b\u4ef6\u7684 XML \u89e3\u6790\u5668\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4ee5\u539f\u59cb Java API \u4e3a\u6a21\u578b\u3002 \u4e0e DOM \u76f8\u6bd4\uff0c\u5b83\u6709\u4e9b\u9650\u5236\uff0c\u4f46\u5e94\u8be5\u8db3\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684 XML \u6d41\u63a8\u9001\u89e3\u6790\u5668\uff0c\u800c\u65e0\u9700\u6c42\u52a9\u4e8e\u7b2c\u4e09\u65b9\u5e93\u3002 \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0cPython \u4e2d\u6709\u4e00\u4e2a\u4e0d\u592a\u5197\u957f\u7684\u62c9\u89e3\u6790\u5668\uff0c\u60a8\u63a5\u4e0b\u6765\u5c06\u63a2\u7d22\u5b83\u3002</p> <p>xml.sax: The SAX Interface for Python</p> <p>To start working with SAX in Python, you can use the same parse() and parseString() convenience functions as before, but from the xml.sax package instead. You also have to provide at least one more required argument, which must be a content handler instance. In the spirit of Java, you provide one by subclassing a specific base class:</p> <pre><code>from xml.sax import parse\nfrom xml.sax.handler import ContentHandler\n\nclass SVGHandler(ContentHandler):\n    pass\n\nparse(\"smiley.svg\", SVGHandler())\n</code></pre> <p>The content handler receives a stream of events corresponding to elements in your document as it\u2019s being parsed. Running this code won\u2019t do anything useful yet because your handler class is empty. To make it work, you\u2019ll need to overload one or more callback methods from the superclass.</p> <p>Fire up your favorite editor, type the following code, and save it in a file named <code>svg_handler.py</code>:</p> <pre><code># svg_handler.py\n\nfrom xml.sax.handler import ContentHandler\n\nclass SVGHandler(ContentHandler):\n\n    def startElement(self, name, attrs):\n        print(f\"BEGIN: &lt;{name}&gt;, {attrs.keys()}\")\n\n    def endElement(self, name):\n        print(f\"END: &lt;/{name}&gt;\")\n\n    def characters(self, content):\n        if content.strip() != \"\":\n            print(\"CONTENT:\", repr(content))\n</code></pre> <p>This modified content handler prints out a few events onto the standard output. The SAX parser will call these three methods for you in response to finding the start tag, end tag, and some text between them. When you open an interactive session of the Python interpreter, import your content handler and give it a test drive. It should produce the following output:</p> <pre><code>&gt;&gt;&gt; from xml.sax import parse\n&gt;&gt;&gt; from svg_handler import SVGHandler\n&gt;&gt;&gt; parse(\"smiley.svg\", SVGHandler())\nBEGIN: &lt;svg&gt;, ['xmlns', 'xmlns:inkscape', 'viewBox', 'width', 'height']\nBEGIN: &lt;inkscape:custom&gt;, ['x', 'inkscape:z']\nCONTENT: 'Some value'\nEND: &lt;/inkscape:custom&gt;\nBEGIN: &lt;defs&gt;, []\nBEGIN: &lt;linearGradient&gt;, ['id', 'x1', 'x2', 'y1', 'y2']\nBEGIN: &lt;stop&gt;, ['offset', 'stop-color', 'stop-opacity']\nEND: &lt;/stop&gt;\n\u22ee\n</code></pre> <p>That\u2019s essentially the observer design pattern, which lets you translate XML into another hierarchical format incrementally. Say you wanted to convert that SVG file into a simplified JSON representation. First, you\u2019ll want to store your content handler object in a separate variable to extract information from it later:</p> <pre><code>&gt;&gt;&gt; from xml.sax import parse\n&gt;&gt;&gt; from svg_handler import SVGHandler\n&gt;&gt;&gt; handler = SVGHandler()\n&gt;&gt;&gt; parse(\"smiley.svg\", handler)\n</code></pre> <p>Since the SAX parser emits events without providing any context about the element it\u2019s found, you need to keep track of where you are in the tree. Therefore, it makes sense to push and pop the current element onto a stack, which you can simulate through a regular Python list. You may also define a helper property .current_element that will return the last element placed on the top of the stack:</p> <pre><code># svg_handler.py\n\n# ...\n\nclass SVGHandler(ContentHandler):\n\n    def __init__(self):\n        super().__init__()\n        self.element_stack = []\n\n    @property\n    def current_element(self):\n        return self.element_stack[-1]\n\n    # ...\n</code></pre> <p>When the SAX parser finds a new element, you can immediately capture its tag name and attributes while making placeholders for children elements and the value, both of which are optional. For now, you can store every element as a <code>dict</code> object. Replace your existing <code>.startElement()</code> method with a new implementation:</p> <pre><code># svg_handler.py\n\n# ...\n\nclass SVGHandler(ContentHandler):\n\n    # ...\n\n    def startElement(self, name, attrs):\n        self.element_stack.append({\n            \"name\": name,\n            \"attributes\": dict(attrs),\n            \"children\": [],\n            \"value\": \"\"\n        })\n</code></pre> <p>The SAX parser gives you attributes as a mapping that you can convert to a plain Python dictionary with a call to the dict() function. The element value is often spread over multiple pieces that you can concatenate using the plus operator (+) or a corresponding augmented assignment statement:</p> <pre><code># svg_handler.py\n\n# ...\n\nclass SVGHandler(ContentHandler):\n\n    # ...\n\n    def characters(self, content):\n        self.current_element[\"value\"] += content\n</code></pre> <p>Aggregating text in such a way will ensure that multiline content ends up in the current element. For example, the <code>&lt;script&gt;</code> tag in the sample SVG file contains six lines of JavaScript code, which trigger separate calls to the <code>characters()</code> callback.</p> <p>Finally, once the parser stumbles on a closing tag, you can pop the current element from the stack and append it to its parent\u2019s children. If there\u2019s only one element left, then it will be your document\u2019s root that you should keep for later. Other than that, you might want to clean the current element by removing keys with empty values:</p> <pre><code># svg_handler.py\n\n# ...\n\nclass SVGHandler(ContentHandler):\n\n    # ...\n\n    def endElement(self, name):\n        clean(self.current_element)\n        if len(self.element_stack) &gt; 1:\n            child = self.element_stack.pop()\n            self.current_element[\"children\"].append(child)\n\ndef clean(element):\n    element[\"value\"] = element[\"value\"].strip()\n    for key in (\"attributes\", \"children\", \"value\"):\n        if not element[key]:\n            del element[key]\n</code></pre> <p>Note that <code>clean()</code> is a function defined outside of the class body. Cleaning must be done at the end since there\u2019s no way of knowing up front how many text pieces to concatenate there might be. You can expand the collapsible section below for a complete content handler\u2019s code.</p> <p>SAX Hanlder for SVG to JSON Convert</p> <pre><code># svg_handler.py\n\nfrom xml.sax.handler import ContentHandler\n\nclass SVGHandler(ContentHandler):\n\n    def __init__(self):\n        super().__init__()\n        self.element_stack = []\n\n    @property\n    def current_element(self):\n        return self.element_stack[-1]\n\n    def startElement(self, name, attrs):\n        self.element_stack.append({\n            \"name\": name,\n            \"attributes\": dict(attrs),\n            \"children\": [],\n            \"value\": \"\"\n        })\n\n    def endElement(self, name):\n        clean(self.current_element)\n        if len(self.element_stack) &gt; 1:\n            child = self.element_stack.pop()\n            self.current_element[\"children\"].append(child)\n\n    def characters(self, content):\n        self.current_element[\"value\"] += content\n\ndef clean(element):\n    element[\"value\"] = element[\"value\"].strip()\n    for key in (\"attributes\", \"children\", \"value\"):\n        if not element[key]:\n            del element[key]\n</code></pre> <p>Now, it\u2019s time to put everything to the test by parsing the XML, extracting the root element from your content handler, and dumping it to a JSON string:</p> <pre><code>&gt;&gt;&gt; from xml.sax import parse\n&gt;&gt;&gt; from svg_handler import SVGHandler\n&gt;&gt;&gt; handler = SVGHandler()\n&gt;&gt;&gt; parse(\"smiley.svg\", handler)\n&gt;&gt;&gt; root = handler.current_element\n\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; print(json.dumps(root, indent=4))\n{\n    \"name\": \"svg\",\n    \"attributes\": {\n        \"xmlns\": \"http://www.w3.org/2000/svg\",\n        \"xmlns:inkscape\": \"http://www.inkscape.org/namespaces/inkscape\",\n        \"viewBox\": \"-105 -100 210 270\",\n        \"width\": \"210\",\n        \"height\": \"270\"\n    },\n    \"children\": [\n        {\n            \"name\": \"inkscape:custom\",\n            \"attributes\": {\n                \"x\": \"42\",\n                \"inkscape:z\": \"555\"\n            },\n            \"value\": \"Some value\"\n        },\n\u22ee\n</code></pre> <p>It\u2019s worth noting that this implementation has no memory gain over DOM because it builds an abstract representation of the whole document just as before. The difference is that you\u2019ve made a custom dictionary representation instead of the standard DOM tree. However, you could imagine writing directly to a file or a database instead of memory while receiving SAX events. That would effectively lift your computer memory limit.</p> <p>If you want to parse XML namespaces, then you\u2019ll need to create and configure the SAX parser yourself with a bit of boilerplate code and also implement slightly different callbacks:</p> <pre><code># svg_handler.py\n\nfrom xml.sax.handler import ContentHandler\n\nclass SVGHandler(ContentHandler):\n\n    def startPrefixMapping(self, prefix, uri):\n        print(f\"startPrefixMapping: {prefix=}, {uri=}\")\n\n    def endPrefixMapping(self, prefix):\n        print(f\"endPrefixMapping: {prefix=}\")\n\n    def startElementNS(self, name, qname, attrs):\n        print(f\"startElementNS: {name=}\")\n\n    def endElementNS(self, name, qname):\n        print(f\"endElementNS: {name=}\")\n</code></pre> <p>These callbacks receive additional parameters about the element\u2019s namespace. To make the SAX parser actually trigger those callbacks instead of some of the earlier ones, you must explicitly enable XML namespace support:</p> <pre><code>&gt;&gt;&gt; from xml.sax import make_parser\n&gt;&gt;&gt; from xml.sax.handler import feature_namespaces\n&gt;&gt;&gt; from svg_handler import SVGHandler\n\n&gt;&gt;&gt; parser = make_parser()\n&gt;&gt;&gt; parser.setFeature(feature_namespaces, True)\n&gt;&gt;&gt; parser.setContentHandler(SVGHandler())\n\n&gt;&gt;&gt; parser.parse(\"smiley.svg\")\nstartPrefixMapping: prefix=None, uri='http://www.w3.org/2000/svg'\nstartPrefixMapping: prefix='inkscape', uri='http://www.inkscape.org/namespaces/inkscape'\nstartElementNS: name=('http://www.w3.org/2000/svg', 'svg')\n\u22ee\nendElementNS: name=('http://www.w3.org/2000/svg', 'svg')\nendPrefixMapping: prefix='inkscape'\nendPrefixMapping: prefix=None\n</code></pre> <p>Setting this feature turns the element name into a tuple comprised of the namespace\u2019s domain name and the tag name.</p> <p>The xml.sax package offers a decent event-based XML parser interface modeled after the original Java API. It\u2019s somewhat limited compared to the DOM but should be enough to implement a basic XML streaming push parser without resorting to third-party libraries. With this in mind, there\u2019s a less verbose pull parser available in Python, which you\u2019ll explore next.</p>"},{"location":"xml/#xmldompulldom-\u6d41\u5f0f\u62c9\u53d6\u89e3\u6790\u5668","title":"xml.dom.pulldom: \u6d41\u5f0f\u62c9\u53d6\u89e3\u6790\u5668","text":"\u4e2d\u6587\u539f\u6587 <p>Python \u6807\u51c6\u5e93\u4e2d\u7684\u89e3\u6790\u5668\u7ecf\u5e38\u4e00\u8d77\u5de5\u4f5c\u3002 \u4f8b\u5982\uff0c<code>xml.dom.pulldom</code> \u6a21\u5757\u5305\u88c5\u4e86 <code>xml.sax</code> \u4e2d\u7684\u89e3\u6790\u5668\uff0c\u4ee5\u5229\u7528\u7f13\u51b2\u5e76\u4ee5\u5757\u7684\u5f62\u5f0f\u8bfb\u53d6\u6587\u6863\u3002 \u540c\u65f6\uff0c\u5b83\u4f7f\u7528 <code>xml.dom.minidom</code> \u4e2d\u7684\u9ed8\u8ba4 DOM \u5b9e\u73b0\u6765\u8868\u793a\u6587\u6863\u5143\u7d20\u3002 \u7136\u800c\uff0c\u8fd9\u4e9b\u5143\u7d20\u4e00\u6b21\u5904\u7406\u4e00\u4e2a\uff0c\u4e0d\u5177\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u76f4\u5230\u60a8\u660e\u786e\u8981\u6c42\u4e3a\u6b62\u3002</p> <p>Note</p> <p>XML \u547d\u540d\u7a7a\u95f4\u652f\u6301\u5728 xml.dom.pulldom \u4e2d\u9ed8\u8ba4\u542f\u7528\u3002</p> <p>\u867d\u7136 SAX \u6a21\u578b\u9075\u5faa\u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u4f46\u60a8\u53ef\u4ee5\u5c06 StAX \u89c6\u4e3a\u8fed\u4ee3\u5668\u8bbe\u8ba1 \u6a21\u5f0f\uff0c\u5b83\u5141\u8bb8\u60a8\u5faa\u73af\u4e8b\u4ef6\u7684\u5e73\u5766\u6d41\u3002 \u518d\u6b21\uff0c\u60a8\u53ef\u4ee5\u8c03\u7528\u4ece\u6a21\u5757\u5bfc\u5165\u7684\u719f\u6089\u7684 <code>parse()</code> \u6216<code>parseString()</code>\u51fd\u6570\u6765\u89e3\u6790 SVG \u56fe\u50cf\uff1a</p> <pre><code>&gt;&gt;&gt; from xml.dom.pulldom import parse\n&gt;&gt;&gt; event_stream = parse(\"smiley.svg\")\n&gt;&gt;&gt; for event, node in event_stream:\n...     print(event, node)\n...\nSTART_DOCUMENT &lt;xml.dom.minidom.Document object at 0x7f74f9283e80&gt;\nSTART_ELEMENT &lt;DOM Element: svg at 0x7f74fde18040&gt;\nCHARACTERS &lt;DOM Text node \"'\\n'\"&gt;\n\u22ee\nEND_ELEMENT &lt;DOM Element: script at 0x7f74f92b3c10&gt;\nCHARACTERS &lt;DOM Text node \"'\\n'\"&gt;\nEND_ELEMENT &lt;DOM Element: svg at 0x7f74fde18040&gt;\n</code></pre> <p>\u53ea\u9700\u51e0\u884c\u4ee3\u7801\u5373\u53ef\u89e3\u6790\u6587\u6863\u3002 <code>xml.sax</code> \u548c <code>xml.dom</code>.pulldom \u4e4b\u95f4\u6700\u663e\u7740\u7684\u533a\u522b\u662f\u7f3a\u5c11\u56de\u8c03\uff0c\u56e0\u4e3a\u60a8\u9a71\u52a8\u6574\u4e2a\u8fc7\u7a0b\u3002 \u60a8\u5728\u6784\u5efa\u4ee3\u7801\u65f6\u6709\u66f4\u591a\u7684\u81ea\u7531\uff0c\u5982\u679c\u60a8\u4e0d\u60f3\uff0c\u5219\u65e0\u9700\u4f7f\u7528\u7c7b\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4ece\u6d41\u4e2d\u63d0\u53d6\u7684 XML \u8282\u70b9\u5177\u6709\u5728<code>xml.dom.minidom</code>\u4e2d\u5b9a\u4e49\u7684\u7c7b\u578b\u3002 \u4f46\u5982\u679c\u4f60\u53bb\u68c0\u67e5\u4ed6\u4eec\u7684\u7236\u7ea7\u3001\u5144\u5f1f\u8282\u70b9\u548c\u5b50\u8282\u70b9\uff0c\u4f60\u4f1a\u53d1\u73b0\u4ed6\u4eec\u5f7c\u6b64\u4e00\u65e0\u6240\u77e5\uff1a</p> <pre><code>&gt;&gt;&gt; from xml.dom.pulldom import parse, START_ELEMENT\n&gt;&gt;&gt; event_stream = parse(\"smiley.svg\")\n&gt;&gt;&gt; for event, node in event_stream:\n...     if event == START_ELEMENT:\n...         print(node.parentNode, node.previousSibling, node.childNodes)\n&lt;xml.dom.minidom.Document object at 0x7f90864f6e80&gt; None []\nNone None []\nNone None []\nNone None []\n\u22ee\n</code></pre> <p>\u76f8\u5173\u5c5e\u6027\u4e3a\u7a7a\u3002 \u65e0\u8bba\u5982\u4f55\uff0cpull \u89e3\u6790\u5668\u53ef\u4ee5\u5e2e\u52a9\u91c7\u7528\u6df7\u5408\u65b9\u6cd5\u5feb\u901f\u67e5\u627e\u67d0\u4e9b\u7236\u5143\u7d20\u5e76\u4ec5\u4e3a\u4ee5\u5b83\u4e3a\u6839\u7684\u5206\u652f\u6784\u5efa DOM \u6811\uff1a</p> <pre><code>from xml.dom.pulldom import parse, START_ELEMENT\n\ndef process_group(parent):\n    left_eye, right_eye = parent.getElementsByTagName(\"ellipse\")\n    # ...\n\nevent_stream = parse(\"smiley.svg\")\nfor event, node in event_stream:\n    if event == START_ELEMENT:\n        if node.tagName == \"g\":\n            event_stream.expandNode(node)\n            process_group(node)\n</code></pre> <p>\u901a\u8fc7\u5728\u4e8b\u4ef6\u6d41\u4e0a\u8c03\u7528 <code>.expandNode()</code> \uff0c\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5411\u524d\u79fb\u52a8\u8fed\u4ee3\u5668\u5e76\u9012\u5f52\u5730\u89e3\u6790 XML \u8282\u70b9\uff0c\u76f4\u5230\u627e\u5230\u7236\u5143\u7d20\u7684\u5339\u914d\u7ed3\u675f\u6807\u8bb0\u3002 \u751f\u6210\u7684\u8282\u70b9\u5c06\u5177\u6709\u5177\u6709\u6b63\u786e\u521d\u59cb\u5316\u5c5e\u6027\u7684\u5b50\u8282\u70b9\u3002 \u6b64\u5916\uff0c\u60a8\u5c06\u80fd\u591f\u5bf9\u5b83\u4eec\u4f7f\u7528 DOM \u65b9\u6cd5\u3002</p> <p>Pull \u89e3\u6790\u5668\u7ed3\u5408\u4e86 DOM \u548c SAX \u7684\u4f18\u70b9\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u66ff\u4ee3\u65b9\u6848\u3002 \u5b83\u9ad8\u6548\u3001\u7075\u6d3b\u4e14\u6613\u4e8e\u4f7f\u7528\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u66f4\u52a0\u7d27\u51d1\u548c\u53ef\u8bfb\u3002 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b83\u66f4\u8f7b\u677e\u5730\u540c\u65f6\u5904\u7406\u591a\u4e2a XML \u6587\u4ef6\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u63d0\u5230\u7684 XML \u89e3\u6790\u5668\u90fd\u65e0\u6cd5\u4e0e Python \u6807\u51c6\u5e93\u4e2d\u6700\u540e\u4e00\u4e2a\u89e3\u6790\u5668\u7684\u4f18\u96c5\u3001\u7b80\u5355\u548c\u5b8c\u6574\u6027\u76f8\u5ab2\u7f8e\u3002</p> <p>The parsers in the Python standard library often work together. For example, the <code>xml.dom.pulldom</code> module wraps the parser from <code>xml.sax</code> to take advantage of buffering and read the document in chunks. At the same time, it uses the default DOM implementation from <code>xml.dom.minidom</code> for representing document elements. However, those elements are processed one at a time without bearing any relationship until you ask for it explicitly.</p> <p>Note</p> <p>The XML namespace support is enabled by default in xml.dom.pulldom.</p> <p>While the SAX model follows the observer pattern, you can think of StAX as the iterator design pattern, which lets you loop over a flat stream of events. Once again, you can call the familiar <code>parse()</code> or <code>parseString()</code> functions imported from the module to parse the SVG image:</p> <pre><code>&gt;&gt;&gt; from xml.dom.pulldom import parse\n&gt;&gt;&gt; event_stream = parse(\"smiley.svg\")\n&gt;&gt;&gt; for event, node in event_stream:\n...     print(event, node)\n...\nSTART_DOCUMENT &lt;xml.dom.minidom.Document object at 0x7f74f9283e80&gt;\nSTART_ELEMENT &lt;DOM Element: svg at 0x7f74fde18040&gt;\nCHARACTERS &lt;DOM Text node \"'\\n'\"&gt;\n\u22ee\nEND_ELEMENT &lt;DOM Element: script at 0x7f74f92b3c10&gt;\nCHARACTERS &lt;DOM Text node \"'\\n'\"&gt;\nEND_ELEMENT &lt;DOM Element: svg at 0x7f74fde18040&gt;\n</code></pre> <p>It takes only a few lines of code to parse the document. The most striking difference between <code>xml.sax</code> and <code>xml.dom</code>.pulldom is the lack of callbacks since you drive the whole process. You have a lot more freedom in structuring your code, and you don\u2019t need to use classes if you don\u2019t want to.</p> <p>Notice that the XML nodes pulled from the stream have types defined in <code>xml.dom.minidom</code>. But if you were to check their parents, siblings, and children, then you\u2019d find out they know nothing about each other:</p> <pre><code>&gt;&gt;&gt; from xml.dom.pulldom import parse, START_ELEMENT\n&gt;&gt;&gt; event_stream = parse(\"smiley.svg\")\n&gt;&gt;&gt; for event, node in event_stream:\n...     if event == START_ELEMENT:\n...         print(node.parentNode, node.previousSibling, node.childNodes)\n&lt;xml.dom.minidom.Document object at 0x7f90864f6e80&gt; None []\nNone None []\nNone None []\nNone None []\n\u22ee\n</code></pre> <p>The relevant attributes are empty. Anyway, the pull parser can help in a hybrid approach to quickly look up some parent element and build a DOM tree only for the branch rooted in it:</p> <pre><code>from xml.dom.pulldom import parse, START_ELEMENT\n\ndef process_group(parent):\n    left_eye, right_eye = parent.getElementsByTagName(\"ellipse\")\n    # ...\n\nevent_stream = parse(\"smiley.svg\")\nfor event, node in event_stream:\n    if event == START_ELEMENT:\n        if node.tagName == \"g\":\n            event_stream.expandNode(node)\n            process_group(node)\n</code></pre> <p>By calling <code>.expandNode()</code> on the event stream, you essentially move the iterator forward and parse XML nodes recursively until finding the matching closing tag of the parent element. The resulting node will have children with properly initialized attributes. Moreover, you\u2019ll be able to use the DOM methods on them.</p> <p>The pull parser offers an interesting alternative to DOM and SAX by combining the best of both worlds. It\u2019s efficient, flexible, and straightforward to use, leading to more compact and readable code. You could also use it to process multiple XML files at the same time more easily. That said, none of the XML parsers mentioned so far can match the elegance, simplicity, and completeness of the last one to arrive in Python\u2019s standard library.</p>"},{"location":"xml/#xmletreeelementtree-\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u66f4-pythonic-\u7684\u66ff\u4ee3\u65b9\u6848","title":"xml.etree.ElementTree: \u4e00\u4e2a\u8f7b\u91cf\u7ea7\u3001\u66f4 Pythonic \u7684\u66ff\u4ee3\u65b9\u6848","text":"\u4e2d\u6587\u539f\u6587 <p>\u5230\u76ee\u524d\u4e3a\u6b62\u60a8\u6240\u4e86\u89e3\u7684 XML \u89e3\u6790\u5668\u53ef\u4ee5\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002 \u7136\u800c\uff0c\u5b83\u4eec\u4e0d\u592a\u7b26\u5408 Python \u7684\u54f2\u5b66\uff0c\u8fd9\u5e76\u975e\u5076\u7136\u3002 \u867d\u7136 DOM \u9075\u5faa W3C \u89c4\u8303\uff0c\u800c SAX \u662f\u6839\u636e Java API \u5efa\u6a21\u7684\uff0c\u4f46\u4e24\u8005\u90fd\u4e0d\u7ed9\u4eba\u4e00\u79cd Pythonic \u7684\u611f\u89c9\u3002</p> <p>\u66f4\u7cdf\u7cd5\u7684\u662f\uff0cDOM \u548c SAX \u89e3\u6790\u5668\u90fd\u611f\u89c9\u8fc7\u65f6\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728 CPython \u89e3\u91ca\u5668\u4e2d\u7684\u4e00\u4e9b\u4ee3\u7801\u5df2\u7ecf\u4e8c\u5341\u591a\u5e74\u6ca1\u6709\u6539\u53d8\u4e86\uff01 \u5728\u64b0\u5199\u672c\u6587\u65f6\uff0c\u5b83\u4eec\u7684\u5b9e\u73b0\u4ecd\u7136\u4e0d\u5b8c\u6574\uff0c\u5e76\u4e14\u7f3a\u5c11 typeshed \u5b58\u6839\uff0c\u8fd9\u4f1a\u7834\u574f\u4ee3\u7801\u7f16\u8f91\u5668\u4e2d\u7684\u4ee3\u7801\u5b8c\u6210 /realpython.com/python-ides-code-editors-guide/\uff09\u3002</p> <p>\u540c\u65f6\uff0cPython 2.5 \u5e26\u6765\u4e86\u89e3\u6790\u548c\u7f16\u5199 XML \u6587\u6863\u7684\u5168\u65b0\u89c6\u89d2 \u2014 ElementTree API\u3002 \u5b83\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u3001\u9ad8\u6548\u3001\u4f18\u96c5\u4e14\u529f\u80fd\u4e30\u5bcc\u7684\u754c\u9762\uff0c\u751a\u81f3\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5e93\u4e5f\u53ef\u4ee5\u5728\u5176\u4e0a\u6784\u5efa\u3002 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u60a8\u5fc5\u987b\u5bfc\u5165 <code>xml.etree.ElementTree</code> \u6a21\u5757\uff0c\u8fd9\u6709\u70b9\u62d7\u53e3\u3002 \u56e0\u6b64\uff0c\u4e60\u60ef\u4e0a\u5b9a\u4e49\u4e00\u4e2a\u522b\u540d\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>import xml.etree.ElementTree as ET\n</code></pre> <p>\u5728\u7a0d\u65e7\u7684\u4ee3\u7801\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u770b\u5230\u5bfc\u5165\u4e86 <code>cElementTree</code> \u6a21\u5757\u3002 \u5b83\u7684\u5b9e\u73b0\u901f\u5ea6\u6bd4\u7528 C \u7f16\u5199\u7684\u76f8\u540c\u63a5\u53e3\u5feb\u51e0\u500d\u3002\u5982\u4eca\uff0c\u5e38\u89c4\u6a21\u5757\u5c3d\u53ef\u80fd\u4f7f\u7528\u5feb\u901f\u5b9e\u73b0\uff0c\u56e0\u6b64\u60a8\u65e0\u9700\u518d\u70e6\u607c\u3002</p> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u91c7\u7528\u4e0d\u540c\u7684\u89e3\u6790\u7b56\u7565\u6765\u4f7f\u7528 ElementTree API\uff1a</p> - \u975e\u589e\u91cf\u5f0f \u589e\u91cf\u5f0f (\u963b\u585e) \u589e\u91cf\u5f0f (\u975e\u963b\u585e) ET.parse() \u2714\ufe0f ET.fromstring() \u2714\ufe0f ET.iterparse() \u2714\ufe0f ET.XMLPullParser \u2714\ufe0f <p>\u975e\u589e\u91cf\u7b56\u7565\u4ee5\u7c7b\u4f3c DOM \u7684\u65b9\u5f0f\u5c06\u6574\u4e2a\u6587\u6863\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002 \u6a21\u5757\u4e2d\u6709\u4e24\u4e2a\u9002\u5f53\u547d\u540d\u7684\u51fd\u6570\uff0c\u5141\u8bb8\u89e3\u6790\u5177\u6709 XML \u5185\u5bb9\u7684\u6587\u4ef6\u6216 Python \u5b57\u7b26\u4e32\uff1a</p> <pre><code>&gt;&gt;&gt; import xml.etree.ElementTree as ET\n\n&gt;&gt;&gt; # \u4ece\u6587\u4ef6\u540d\u89e3\u6790 XML\n&gt;&gt;&gt; ET.parse(\"smiley.svg\")\n&lt;xml.etree.ElementTree.ElementTree object at 0x7fa4c980a6a0&gt;\n\n&gt;&gt;&gt; # \u4ece\u6587\u4ef6\u5bf9\u8c61\u4e2d\u89e3\u6790 XML\n&gt;&gt;&gt; with open(\"smiley.svg\") as file:\n...     ET.parse(file)\n...\n&lt;xml.etree.ElementTree.ElementTree object at 0x7fa4c96df340&gt;\n\n&gt;&gt;&gt; # \u4ece Python \u5b57\u7b26\u4e32\u89e3\u6790 XML\n&gt;&gt;&gt; ET.fromstring(\"\"\"\\\n... &lt;svg viewBox=\"-105 -100 210 270\"&gt;\n...   &lt;!-- More content goes here... --&gt;\n... &lt;/svg&gt;\n... \"\"\")\n&lt;Element 'svg' at 0x7fa4c987a1d0&gt;\n</code></pre> <p>\u4f7f\u7528 <code>parse()</code> \u89e3\u6790\u6587\u4ef6\u5bf9\u8c61\u6216\u6587\u4ef6\u540d\u4f1a\u8fd4\u56de ET.ElementTree \u7c7b\uff0c\u4ee3\u8868\u6574\u4e2a\u5143\u7d20\u5c42\u6b21\u7ed3\u6784\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4f7f\u7528 <code>fromstring()</code> \u89e3\u6790\u5b57\u7b26\u4e32\u5c06\u8fd4\u56de\u7279\u5b9a\u7684\u6839ET.Element\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6d41\u5f0f \u62c9\u5f0f\u89e3\u6790\u5668 \u589e\u91cf\u8bfb\u53d6 XML \u6587\u6863\uff0c\u8fd9\u4f1a\u751f\u6210\u4e00\u7cfb\u5217\u4e8b\u4ef6\u548c\u5143\u7d20\uff1a</p> <pre><code>&gt;&gt;&gt; for event, element in ET.iterparse(\"smiley.svg\"):\n...     print(event, element.tag)\n...\nend {&lt;http://www.inkscape.org/namespaces/inkscape}custom&gt;\nend {&lt;http://www.w3.org/2000/svg}stop&gt;\nend {&lt;http://www.w3.org/2000/svg}stop&gt;\nend {&lt;http://www.w3.org/2000/svg}stop&gt;\nend {&lt;http://www.w3.org/2000/svg}linearGradient&gt;\n\u22ee\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>iterparse()</code>\u4ec5\u53d1\u51fa\u4e0e\u7ed3\u675f XML \u6807\u8bb0\u5173\u8054\u7684\u7ed3\u675f\u4e8b\u4ef6\u3002 \u4f46\u662f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u8ba2\u9605\u5176\u4ed6\u4e8b\u4ef6\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u5e38\u91cf\uff08\u4f8b\u5982 <code>comment</code> \uff09\u627e\u5230\u5b83\u4eec\uff1a</p> <pre><code>&gt;&gt;&gt; import xml.etree.ElementTree as ET\n&gt;&gt;&gt; for event, element in ET.iterparse(\"smiley.svg\", [\"comment\"]):\n...     print(element.text.strip())\n...\nHead\nEyes\nMouth\n</code></pre> <p>\u4ee5\u4e0b\u662f\u6240\u6709\u53ef\u7528\u4e8b\u4ef6\u7c7b\u578b\u7684\u5217\u8868\uff1a</p> <ul> <li>start: \u5143\u7d20\u7684\u5f00\u59cb</li> <li>end: \u5143\u7d20\u7ed3\u675f</li> <li>comment: \u6ce8\u91ca\u5143\u7d20</li> <li>pi: \u5904\u7406\u6307\u4ee4\uff0c\u5982 XSL \u4e2d</li> <li>start-ns: \u547d\u540d\u7a7a\u95f4\u7684\u5f00\u59cb</li> <li>end-ns: \u547d\u540d\u7a7a\u95f4\u7684\u7ed3\u5c3e</li> </ul> <p><code>iterparse()</code> \u7684\u7f3a\u70b9\u662f\u5b83\u4f7f\u7528\u963b\u585e\u8c03\u7528\u6765\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u6570\u636e\u5757\uff0c\u8fd9\u53ef\u80fd\u4e0d\u9002\u5408\u5f02\u6b65\u4ee3\u7801\u5728\u5355\u4e2a\u6267\u884c\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u3002 \u4e3a\u4e86\u7f13\u89e3\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u53ef\u4ee5\u67e5\u770bXMLPullParser\uff0c\u8fd9\u4e00\u4e2a\u66f4\u8be6\u7ec6\u4e00\u70b9\uff1a</p> <pre><code>import xml.etree.ElementTree as ET\n\nasync def receive_data(url):\n    \"\"\"\u4ece URL \u5f02\u6b65\u4e0b\u8f7d\u5b57\u8282\u5757\u3002\"\"\"\n    yield b\"&lt;svg \"\n    yield b\"viewBox=\\\"-105 -100 210 270\\\"\"\n    yield b\"&gt;&lt;/svg&gt;\"\n\nasync def parse(url, events=None):\n    parser = ET.XMLPullParser(events)\n    async for chunk in receive_data(url):\n        parser.feed(chunk)\n        for event, element in parser.read_events():\n            yield event, element\n</code></pre> <p>\u8fd9\u4e2a\u5047\u8bbe\u7684\u793a\u4f8b\u5411\u89e3\u6790\u5668\u63d0\u4f9b XML \u5757\uff0c\u8fd9\u4e9b XML \u5757\u53ef\u80fd\u4f1a\u76f8\u9694\u51e0\u79d2\u949f\u5230\u8fbe\u3002 \u4e00\u65e6\u6709\u8db3\u591f\u7684\u5185\u5bb9\uff0c\u60a8\u5c31\u53ef\u4ee5\u8fed\u4ee3\u89e3\u6790\u5668\u7f13\u51b2\u7684\u4e00\u7cfb\u5217\u4e8b\u4ef6\u548c\u5143\u7d20\u3002 \u8fd9\u79cd\u975e\u963b\u585e\u589e\u91cf\u89e3\u6790\u7b56\u7565\u5141\u8bb8\u5728\u4e0b\u8f7d\u591a\u4e2a XML \u6587\u6863\u65f6\u771f\u6b63\u5e76\u53d1\u89e3\u6790\u5b83\u4eec\u3002</p> <p>\u6811\u4e2d\u7684\u5143\u7d20\u662f\u53ef\u53d8\u7684\u3001\u53ef\u8fed\u4ee3\u7684\u548c\u53ef\u7d22\u5f15\u7684\u5e8f\u5217\u3002 \u5b83\u4eec\u7684\u957f\u5ea6\u4e0e\u5176\u76f4\u7cfb\u5b50\u4ee3\u7684\u6570\u91cf\u76f8\u5bf9\u5e94\uff1a</p> <pre><code>&gt;&gt;&gt; import xml.etree.ElementTree as ET\n&gt;&gt;&gt; tree = ET.parse(\"smiley.svg\")\n&gt;&gt;&gt; root = tree.getroot()\n\n&gt;&gt;&gt; # \u5143\u7d20\u7684\u957f\u5ea6\u7b49\u4e8e\u5176\u5b50\u5143\u7d20\u7684\u6570\u91cf\u3002\n&gt;&gt;&gt; len(root)\n5\n\n&gt;&gt;&gt; # \u65b9\u62ec\u53f7\u5141\u8bb8\u60a8\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\u5b50\u9879\u3002\n&gt;&gt;&gt; root[1]\n&lt;Element '{http://www.w3.org/2000/svg}defs' at 0x7fe05d2e8860&gt;\n&gt;&gt;&gt; root[2]\n&lt;Element '{http://www.w3.org/2000/svg}g' at 0x7fa4c9848400&gt;\n\n&gt;&gt;&gt; # \u5143\u7d20\u662f\u53ef\u53d8\u7684\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4ea4\u6362\u4ed6\u4eec\u7684\u5b50\u8282\u70b9\u3002\n&gt;&gt;&gt; root[2], root[1] = root[1], root[2]\n\n&gt;&gt;&gt; # \u60a8\u53ef\u4ee5\u8fed\u4ee3\u5143\u7d20\u7684\u5b50\u5143\u7d20\u3002\n&gt;&gt;&gt; for child in root:\n...     print(child.tag)\n...\n{http://www.inkscape.org/namespaces/inkscape}custom\n{http://www.w3.org/2000/svg}g\n{http://www.w3.org/2000/svg}defs\n{http://www.w3.org/2000/svg}text\n{http://www.w3.org/2000/svg}script\n</code></pre> <p>\u6807\u8bb0\u540d\u79f0\u53ef\u80fd\u4ee5\u53ef\u9009\u7684\u547d\u540d\u7a7a\u95f4\u4e3a\u524d\u7f00\uff0c\u8be5\u547d\u540d\u7a7a\u95f4\u62ec\u5728\u4e00\u5bf9\u5927\u62ec\u53f7 (<code>{}</code>) \u4e2d\u3002 \u5b9a\u4e49\u65f6\uff0c\u9ed8\u8ba4\u7684 XML \u547d\u540d\u7a7a\u95f4\u4e5f\u4f1a\u51fa\u73b0\u5728\u90a3\u91cc\u3002 \u8bf7\u6ce8\u610f\u7a81\u51fa\u663e\u793a\u7684\u884c\u4e2d\u7684\u4ea4\u6362\u5206\u914d\u5982\u4f55\u4f7f <code>&lt;g&gt;</code> \u5143\u7d20\u51fa\u73b0\u5728 <code>&lt;defs&gt;</code> \u4e4b\u524d\u3002 \u8fd9\u663e\u793a\u4e86\u5e8f\u5217\u7684\u53ef\u53d8\u6027\u8d28\u3002</p> <p>\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u503c\u5f97\u4e00\u63d0\u7684\u5143\u7d20\u5c5e\u6027\u548c\u65b9\u6cd5\uff1a</p> <pre><code>&gt;&gt;&gt; element = root[0]\n\n&gt;&gt;&gt; element.tag\n'{&lt;http://www.inkscape.org/namespaces/inkscape}custom&gt;'\n\n&gt;&gt;&gt; element.text\n'Some value'\n\n&gt;&gt;&gt; element.attrib\n{'x': '42', '{&lt;http://www.inkscape.org/namespaces/inkscape}z&gt;': '555'}\n\n&gt;&gt;&gt; element.get(\"x\")\n'42'\n</code></pre> <p>\u8be5 API \u7684\u597d\u5904\u4e4b\u4e00\u662f\u5b83\u4f7f\u7528 Python \u7684\u539f\u751f\u6570\u636e\u7c7b\u578b\u3002 \u4e0a\u9762\uff0c\u5b83\u4f7f\u7528 Python \u5b57\u5178\u4f5c\u4e3a\u5143\u7d20\u7684\u5c5e\u6027\u3002 \u5728\u4e4b\u524d\u7684\u6a21\u5757\u4e2d\uff0c\u8fd9\u4e9b\u6a21\u5757\u88ab\u5c01\u88c5\u5728\u4e0d\u592a\u65b9\u4fbf\u7684\u9002\u914d\u5668\u4e2d\u3002 \u4e0e DOM \u4e0d\u540c\uff0cElementTree API \u4e0d\u516c\u5f00\u7528\u4e8e\u5728\u4efb\u4f55\u65b9\u5411\u4e0a\u904d\u5386\u6811\u7684\u65b9\u6cd5\u6216\u5c5e\u6027\uff0c\u4f46\u6709\u4e00\u4e9b\u66f4\u597d\u7684\u66ff\u4ee3\u65b9\u6848\u3002</p> <p>\u6b63\u5982\u60a8\u4e4b\u524d\u6240\u89c1\uff0cElement \u7c7b\u7684\u5b9e\u4f8b\u5b9e\u73b0\u4e86 \u5e8f\u5217\u534f\u8bae\uff0c\u8ba9\u60a8\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u8fed\u4ee3\u5b83\u4eec\u7684\u76f4\u63a5\u5b50\u7ea7\uff1a</p> <pre><code>&gt;&gt;&gt; for child in root:\n...     print(child.tag)\n...\n{&lt;http://www.inkscape.org/namespaces/inkscape}custom&gt;\n{&lt;http://www.w3.org/2000/svg}defs&gt;\n{&lt;http://www.w3.org/2000/svg}g&gt;\n{&lt;http://www.w3.org/2000/svg}text&gt;\n{&lt;http://www.w3.org/2000/svg}script&gt;\n</code></pre> <p>\u60a8\u5c06\u83b7\u5f97\u6839\u7684\u76f4\u63a5\u5b50\u7ea7\u7684\u5e8f\u5217\u3002 \u7136\u800c\uff0c\u8981\u6df1\u5165\u4e86\u89e3\u5d4c\u5957\u540e\u4ee3\uff0c\u60a8\u5fc5\u987b\u5728\u7956\u5148\u5143\u7d20\u4e0a\u8c03\u7528 <code>.iter()</code> \u65b9\u6cd5\uff1a</p> <p><pre><code>&gt;&gt;&gt; for descendant in root.iter():\n...     print(descendant.tag)\n...\n{http://www.w3.org/2000/svg}svg\n{http://www.inkscape.org/namespaces/inkscape}custom\n{http://www.w3.org/2000/svg}defs\n{http://www.w3.org/2000/svg}linearGradient\n{http://www.w3.org/2000/svg}stop\n{http://www.w3.org/2000/svg}stop\n{http://www.w3.org/2000/svg}stop\n{http://www.w3.org/2000/svg}g\n{http://www.w3.org/2000/svg}circle\n{http://www.w3.org/2000/svg}ellipse\n{http://www.w3.org/2000/svg}ellipse\n{http://www.w3.org/2000/svg}path\n{http://www.w3.org/2000/svg}text\n{http://www.w3.org/2000/svg}script\n</code></pre> \u6839\u5143\u7d20\u53ea\u6709\u4e94\u4e2a\u5b50\u8282\u70b9\uff0c\u4f46\u603b\u5171\u6709\u5341\u4e09\u4e2a\u540e\u4ee3\u5143\u7d20\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u53ef\u9009\u6807\u7b7e\u53c2\u6570\u4ec5\u8fc7\u6ee4\u7279\u5b9a\u6807\u7b7e\u540d\u79f0\u6765\u7f29\u5c0f\u540e\u4ee3\u8303\u56f4\uff1a</p> <pre><code>&gt;&gt;&gt; tag_name = \"{http://www.w3.org/2000/svg}ellipse\"\n&gt;&gt;&gt; for descendant in root.iter(tag_name):\n...     print(descendant)\n...\n&lt;Element '{http://www.w3.org/2000/svg}ellipse' at 0x7f430baa03b0&gt;\n&lt;Element '{http://www.w3.org/2000/svg}ellipse' at 0x7f430baa0450&gt;\n</code></pre> <p>\u8fd9\u6b21\uff0c\u60a8\u53ea\u6709\u4e24\u4e2a <code>&lt;ellipse&gt;</code> \u5143\u7d20\u3002 \u8bf7\u8bb0\u4f4f\u5728\u6807\u7b7e\u540d\u79f0\u4e2d\u5305\u542b XML \u547d\u540d\u7a7a\u95f4\uff0c\u4f8b\u5982 {<code>http://www.w3.org/2000/svg</code>} - \u53ea\u8981\u5b83\u5df2\u5b9a\u4e49\u5373\u53ef\u3002 \u5426\u5219\uff0c\u5982\u679c\u60a8\u4ec5\u63d0\u4f9b\u6807\u7b7e\u540d\u79f0\u800c\u6ca1\u6709\u6b63\u786e\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5219\u6700\u7ec8\u53ef\u80fd\u4f1a\u5f97\u5230\u6bd4\u6700\u521d\u9884\u671f\u66f4\u5c11\u6216\u66f4\u591a\u7684\u540e\u4ee3\u5143\u7d20\u3002</p> <p>\u4f7f\u7528 <code>.iterfind()</code> \u5904\u7406\u547d\u540d\u7a7a\u95f4\u4f1a\u66f4\u65b9\u4fbf\uff0c\u5b83\u63a5\u53d7\u524d\u7f00\u5230\u57df\u540d\u7684\u53ef\u9009\u6620\u5c04\u3002 \u8981\u6307\u793a \u9ed8\u8ba4\u547d\u540d\u7a7a\u95f4\uff0c\u60a8\u53ef\u4ee5\u5c06\u952e\u7559\u7a7a\u6216\u5206\u914d\u4efb\u610f\u524d\u7f00\uff0c\u7a0d\u540e\u5fc5\u987b\u5728\u6807\u7b7e\u540d\u79f0\u4e2d\u4f7f\u7528\u8be5\u524d\u7f00\uff1a</p> <pre><code>&gt;&gt;&gt; namespaces = {\n...     \"\": \"&lt;http://www.w3.org/2000/svg&gt;\",\n...     \"custom\": \"&lt;http://www.w3.org/2000/svg&gt;\"\n... }\n\n&gt;&gt;&gt; for descendant in root.iterfind(\"g\", namespaces):\n...     print(descendant)\n...\n&lt;Element '{&lt;http://www.w3.org/2000/svg}g&gt;' at 0x7f430baa0270&gt;\n\n&gt;&gt;&gt; for descendant in root.iterfind(\"custom:g\", namespaces):\n...     print(descendant)\n...\n&lt;Element '{&lt;http://www.w3.org/2000/svg}g&gt;' at 0x7f430baa0270&gt;\n</code></pre> <p>\u547d\u540d\u7a7a\u95f4\u6620\u5c04\u5141\u8bb8\u60a8\u4f7f\u7528\u4e0d\u540c\u7684\u524d\u7f00\u5f15\u7528\u76f8\u540c\u7684\u5143\u7d20\u3002 \u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5982\u679c\u60a8\u5c1d\u8bd5\u50cf\u4ee5\u524d\u4e00\u6837\u67e5\u627e\u90a3\u4e9b\u5d4c\u5957\u7684 <code>&lt;ellipse&gt;</code> \u5143\u7d20\uff0c\u90a3\u4e48 <code>.iterfind()</code> \u5c06\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u4e00\u4e2aXPath\u8868\u8fbe\u5f0f\u800c\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6807\u7b7e\u540d\u79f0\uff1a</p> <pre><code>&gt;&gt;&gt; for descendant in root.iterfind(\"ellipse\", namespaces):\n...     print(descendant)\n...\n\n&gt;&gt;&gt; for descendant in root.iterfind(\"g/ellipse\", namespaces):\n...     print(descendant)\n...\n&lt;Element '{&lt;http://www.w3.org/2000/svg}ellipse&gt;' at 0x7f430baa03b0&gt;\n&lt;Element '{&lt;http://www.w3.org/2000/svg}ellipse&gt;' at 0x7f430baa0450&gt;\n</code></pre> <p>\u5de7\u5408\u7684\u662f\uff0c\u5b57\u7b26\u4e32<code>g</code>\u6070\u597d\u662f\u76f8\u5bf9\u4e8e\u5f53\u524d\u6839\u5143\u7d20\u7684\u6709\u6548\u8def\u5f84\uff0c\u8fd9\u5c31\u662f\u51fd\u6570\u4e4b\u524d\u8fd4\u56de\u975e\u7a7a\u7ed3\u679c\u7684\u539f\u56e0\u3002 \u4f46\u662f\uff0c\u8981\u67e5\u627e XML \u5c42\u6b21\u7ed3\u6784\u4e2d\u66f4\u6df1\u4e00\u5c42\u5d4c\u5957\u7684\u7701\u7565\u53f7\uff0c\u60a8\u9700\u8981\u66f4\u8be6\u7ec6\u7684\u8def\u5f84\u8868\u8fbe\u5f0f\u3002</p> <p>ElementTree \u5bf9 XPath \u8ff7\u4f60\u8bed\u8a00\u6709\u6709\u9650\u7684\u8bed\u6cd5\u652f\u6301\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u67e5\u8be2 XML \u4e2d\u7684\u5143\u7d20\uff0c\u7c7b\u4f3c\u4e8e HTML \u4e2d\u7684 CSS \u9009\u62e9\u5668\u3002 \u8fd8\u6709\u5176\u4ed6\u63a5\u53d7\u6b64\u7c7b\u8868\u8fbe\u5f0f\u7684\u65b9\u6cd5\uff1a</p> <pre><code>&gt;&gt;&gt; namespaces = {\"\": \"http://www.w3.org/2000/svg\"}\n\n&gt;&gt;&gt; root.iterfind(\"defs\", namespaces)\n&lt;generator object prepare_child.&lt;locals&gt;.select at 0x7f430ba6d190&gt;\n\n&gt;&gt;&gt; root.findall(\"defs\", namespaces)\n[&lt;Element '{http://www.w3.org/2000/svg}defs' at 0x7f430ba09e00&gt;]\n\n&gt;&gt;&gt; root.find(\"defs\", namespaces)\n&lt;Element '{&lt;http://www.w3.org/2000/svg}defs&gt;' at 0x7f430ba09e00&gt;\n</code></pre> <p>\u867d\u7136 <code>.iterfind()</code> \u5ef6\u8fdf\u5730\u751f\u6210\u5339\u914d\u5143\u7d20\uff0c\u4f46 <code>.findall()</code> \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u800c <code>.find()</code> \u4ec5\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u5143\u7d20\u3002 \u7c7b\u4f3c\u5730\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528<code>.findtext()</code> \u63d0\u53d6\u5143\u7d20\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u6807\u8bb0\u4e4b\u95f4\u7684\u6587\u672c\uff0c\u6216\u8005\u4f7f\u7528<code>.itertext()</code>\u83b7\u53d6\u6574\u4e2a\u6587\u6863\u7684\u5185\u90e8\u6587\u672c\uff1a</p> <pre><code>&gt;&gt;&gt; namespaces = {\"i\": \"http://www.inkscape.org/namespaces/inkscape\"}\n\n&gt;&gt;&gt; root.findtext(\"i:custom\", namespaces=namespaces)\n'Some value'\n\n&gt;&gt;&gt; for text in root.itertext():\n...     if text.strip() != \"\":\n...         print(text.strip())\n...\nSome value\nHello &lt;svg&gt;!\nconsole.log(\"CDATA disables XML parsing: &lt;svg&gt;\")\n\u22ee\n</code></pre> <p>\u60a8\u9996\u5148\u67e5\u627e\u5d4c\u5165\u5728\u7279\u5b9a XML \u5143\u7d20\u4e2d\u7684\u6587\u672c\uff0c\u7136\u540e\u67e5\u627e\u6574\u4e2a\u6587\u6863\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e\u3002 \u6309\u6587\u672c\u641c\u7d22\u662f ElementTree API \u7684\u4e00\u9879\u5f3a\u5927\u529f\u80fd\u3002 \u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u5185\u7f6e\u89e3\u6790\u5668\u6765\u590d\u5236\u5b83\uff0c\u4f46\u4ee3\u4ef7\u662f\u589e\u52a0\u4ee3\u7801\u590d\u6742\u6027\u548c\u964d\u4f4e\u4fbf\u5229\u6027\u3002</p> <p>ElementTree API \u53ef\u80fd\u662f\u5176\u4e2d\u6700\u76f4\u89c2\u7684\u4e00\u4e2a\u3002 \u5b83\u5177\u6709 Python \u98ce\u683c\u3001\u9ad8\u6548\u3001\u5065\u58ee\u4e14\u901a\u7528\u3002 \u9664\u975e\u60a8\u6709\u7279\u5b9a\u539f\u56e0\u4f7f\u7528 DOM \u6216 SAX\uff0c\u5426\u5219\u8fd9\u5e94\u8be5\u662f\u60a8\u7684\u9ed8\u8ba4\u9009\u62e9\u3002</p> <p>The XML parsers you\u2019ve come to know so far get the job done. However, they don\u2019t fit Python\u2019s philosophy very well, and that\u2019s no accident. While DOM follows the W3C specification and SAX was modeled after a Java API, neither feels particularly Pythonic.</p> <p>Even worse, both DOM and SAX parsers feel antiquated as some of their code in the CPython interpreter hasn\u2019t changed for more than two decades! At the time of writing this, their implementation is still incomplete and has missing typeshed stubs, which breaks code completion in code editors.</p> <p>Meanwhile, Python 2.5 brought a fresh perspective on parsing and writing XML documents\u2014the ElementTree API. It\u2019s a lightweight, efficient, elegant, and feature-rich interface that even some third-party libraries build on. To get started with it, you must import the <code>xml.etree.ElementTree</code> module, which is a bit of a mouthful. Therefore, it\u2019s customary to define an alias like this:</p> <pre><code>import xml.etree.ElementTree as ET\n</code></pre> <p>In slightly older code, you may have seen the <code>cElementTree</code> module imported instead. It was an implementation several times faster than the same interface written in C. Today, the regular module uses the fast implementation whenever possible, so you don\u2019t need to bother anymore.</p> <p>You can use the ElementTree API by employing different parsing strategies:</p> - Non-incremental Incremental (Blocking) Incremental (Non-blocking) ET.parse() \u2714\ufe0f ET.fromstring() \u2714\ufe0f ET.iterparse() \u2714\ufe0f ET.XMLPullParser \u2714\ufe0f <p>The non-incremental strategy loads up the entire document into memory in a DOM-like fashion. There are two appropriately named functions in the module that allow for parsing a file or a Python string with XML content:</p> <pre><code>&gt;&gt;&gt; import xml.etree.ElementTree as ET\n\n&gt;&gt;&gt; # Parse XML from a filename\n&gt;&gt;&gt; ET.parse(\"smiley.svg\")\n&lt;xml.etree.ElementTree.ElementTree object at 0x7fa4c980a6a0&gt;\n\n&gt;&gt;&gt; # Parse XML from a file object\n&gt;&gt;&gt; with open(\"smiley.svg\") as file:\n...     ET.parse(file)\n...\n&lt;xml.etree.ElementTree.ElementTree object at 0x7fa4c96df340&gt;\n\n&gt;&gt;&gt; # Parse XML from a Python string\n&gt;&gt;&gt; ET.fromstring(\"\"\"\\\n... &lt;svg viewBox=\"-105 -100 210 270\"&gt;\n...   &lt;!-- More content goes here... --&gt;\n... &lt;/svg&gt;\n... \"\"\")\n&lt;Element 'svg' at 0x7fa4c987a1d0&gt;\n</code></pre> <p>Parsing a file object or a filename with parse() returns an instance of the ET.ElementTree class, which represents the whole element hierarchy. On the other hand, parsing a string with <code>fromstring()</code> will return the specific root ET.Element.</p> <p>Alternatively, you can read the XML document incrementally with a streaming pull parser, which yields a sequence of events and elements:</p> <pre><code>&gt;&gt;&gt; for event, element in ET.iterparse(\"smiley.svg\"):\n...     print(event, element.tag)\n...\nend {&lt;http://www.inkscape.org/namespaces/inkscape}custom&gt;\nend {&lt;http://www.w3.org/2000/svg}stop&gt;\nend {&lt;http://www.w3.org/2000/svg}stop&gt;\nend {&lt;http://www.w3.org/2000/svg}stop&gt;\nend {&lt;http://www.w3.org/2000/svg}linearGradient&gt;\n\u22ee\n</code></pre> <p>By default, <code>iterparse()</code> emits only the end events associated with the closing XML tag. However, you can subscribe to other events as well. You can find them with string constants such as <code>\"comment\"</code>:</p> <pre><code>&gt;&gt;&gt; import xml.etree.ElementTree as ET\n&gt;&gt;&gt; for event, element in ET.iterparse(\"smiley.svg\", [\"comment\"]):\n...     print(element.text.strip())\n...\nHead\nEyes\nMouth\n</code></pre> <p>Here\u2019s a list of all the available event types:</p> <ul> <li>start: Start of an element</li> <li>end: End of an element</li> <li>comment: Comment element</li> <li>pi: Processing instruction, as in XSL</li> <li>start-ns: Start of a namespace</li> <li>end-ns: End of a namespace</li> </ul> <p>The downside of <code>iterparse()</code> is that it uses blocking calls to read the next chunk of data, which might be unsuitable for asynchronous code running on a single thread of execution. To alleviate that, you can look into XMLPullParser, which is a little bit more verbose:</p> <pre><code>import xml.etree.ElementTree as ET\n\nasync def receive_data(url):\n    \"\"\"Download chunks of bytes from the URL asynchronously.\"\"\"\n    yield b\"&lt;svg \"\n    yield b\"viewBox=\\\"-105 -100 210 270\\\"\"\n    yield b\"&gt;&lt;/svg&gt;\"\n\nasync def parse(url, events=None):\n    parser = ET.XMLPullParser(events)\n    async for chunk in receive_data(url):\n        parser.feed(chunk)\n        for event, element in parser.read_events():\n            yield event, element\n</code></pre> <p>This hypothetical example feeds the parser with chunks of XML that can arrive a few seconds apart. Once there\u2019s enough content, you can iterate over a sequence of events and elements buffered by the parser. This non-blocking incremental parsing strategy allows for a truly concurrent parsing of multiple XML documents on the fly while you download them.</p> <p>Elements in the tree are mutable, iterable, and indexable sequences. They have a length corresponding to the number of their immediate children:</p> <pre><code>&gt;&gt;&gt; import xml.etree.ElementTree as ET\n&gt;&gt;&gt; tree = ET.parse(\"smiley.svg\")\n&gt;&gt;&gt; root = tree.getroot()\n\n&gt;&gt;&gt; # The length of an element equals the number of its children.\n&gt;&gt;&gt; len(root)\n5\n\n&gt;&gt;&gt; # The square brackets let you access a child by an index.\n&gt;&gt;&gt; root[1]\n&lt;Element '{http://www.w3.org/2000/svg}defs' at 0x7fe05d2e8860&gt;\n&gt;&gt;&gt; root[2]\n&lt;Element '{http://www.w3.org/2000/svg}g' at 0x7fa4c9848400&gt;\n\n&gt;&gt;&gt; # Elements are mutable. For example, you can swap their children.\n&gt;&gt;&gt; root[2], root[1] = root[1], root[2]\n\n&gt;&gt;&gt; # You can iterate over an element's children.\n&gt;&gt;&gt; for child in root:\n...     print(child.tag)\n...\n{http://www.inkscape.org/namespaces/inkscape}custom\n{http://www.w3.org/2000/svg}g\n{http://www.w3.org/2000/svg}defs\n{http://www.w3.org/2000/svg}text\n{http://www.w3.org/2000/svg}script\n</code></pre> <p>Tag names might be prefixed with an optional namespace enclosed in a pair of curly braces (<code>{}</code>). The default XML namespace appears there, too, when defined. Notice how the swap assignment in the highlighted line made the <code>&lt;g&gt;</code> element come before <code>&lt;defs&gt;</code>. This shows the mutable nature of the sequence.</p> <p>Here are a few more element attributes and methods that are worth mentioning:</p> <pre><code>&gt;&gt;&gt; element = root[0]\n\n&gt;&gt;&gt; element.tag\n'{&lt;http://www.inkscape.org/namespaces/inkscape}custom&gt;'\n\n&gt;&gt;&gt; element.text\n'Some value'\n\n&gt;&gt;&gt; element.attrib\n{'x': '42', '{&lt;http://www.inkscape.org/namespaces/inkscape}z&gt;': '555'}\n\n&gt;&gt;&gt; element.get(\"x\")\n'42'\n</code></pre> <p>One of the benefits of this API is how it uses Python\u2019s native data types. Above, it uses a Python dictionary for the element\u2019s attributes. In the previous modules, those were wrapped in less convenient adapters. Unlike the DOM, the ElementTree API doesn\u2019t expose methods or properties for walking over the tree in any direction, but there are a couple of better alternatives.</p> <p>As you\u2019ve seen before, instances of the Element class implement the sequence protocol, letting you iterate over their direct children with a loop:</p> <pre><code>&gt;&gt;&gt; for child in root:\n...     print(child.tag)\n...\n{&lt;http://www.inkscape.org/namespaces/inkscape}custom&gt;\n{&lt;http://www.w3.org/2000/svg}defs&gt;\n{&lt;http://www.w3.org/2000/svg}g&gt;\n{&lt;http://www.w3.org/2000/svg}text&gt;\n{&lt;http://www.w3.org/2000/svg}script&gt;\n</code></pre> <p>You get the sequence of the root\u2019s immediate children. To go deeper into nested descendants, however, you\u2019ll have to call the <code>.iter()</code> method on the ancestor element:</p> <p><pre><code>&gt;&gt;&gt; for descendant in root.iter():\n...     print(descendant.tag)\n...\n{http://www.w3.org/2000/svg}svg\n{http://www.inkscape.org/namespaces/inkscape}custom\n{http://www.w3.org/2000/svg}defs\n{http://www.w3.org/2000/svg}linearGradient\n{http://www.w3.org/2000/svg}stop\n{http://www.w3.org/2000/svg}stop\n{http://www.w3.org/2000/svg}stop\n{http://www.w3.org/2000/svg}g\n{http://www.w3.org/2000/svg}circle\n{http://www.w3.org/2000/svg}ellipse\n{http://www.w3.org/2000/svg}ellipse\n{http://www.w3.org/2000/svg}path\n{http://www.w3.org/2000/svg}text\n{http://www.w3.org/2000/svg}script\n</code></pre> The root element has only five children but thirteen descendants in total. It\u2019s also possible to narrow down the descendants by filtering only specific tag names using an optional tag argument:</p> <pre><code>&gt;&gt;&gt; tag_name = \"{http://www.w3.org/2000/svg}ellipse\"\n&gt;&gt;&gt; for descendant in root.iter(tag_name):\n...     print(descendant)\n...\n&lt;Element '{http://www.w3.org/2000/svg}ellipse' at 0x7f430baa03b0&gt;\n&lt;Element '{http://www.w3.org/2000/svg}ellipse' at 0x7f430baa0450&gt;\n</code></pre> <p>This time, you only got two <code>&lt;ellipse&gt;</code> elements. Remember to include the XML namespace, such as {<code>http://www.w3.org/2000/svg</code>}, in your tag name\u2014as long as it\u2019s been defined. Otherwise, if you only provide the tag name without the right namespace, you could end up with fewer or more descendant elements than initially anticipated.</p> <p>Dealing with namespaces is more convenient when using <code>.iterfind()</code>, which accepts an optional mapping of prefixes to domain names. To indicate the default namespace, you can leave the key blank or assign an arbitrary prefix, which must be used in the tag name later:</p> <pre><code>&gt;&gt;&gt; namespaces = {\n...     \"\": \"&lt;http://www.w3.org/2000/svg&gt;\",\n...     \"custom\": \"&lt;http://www.w3.org/2000/svg&gt;\"\n... }\n\n&gt;&gt;&gt; for descendant in root.iterfind(\"g\", namespaces):\n...     print(descendant)\n...\n&lt;Element '{&lt;http://www.w3.org/2000/svg}g&gt;' at 0x7f430baa0270&gt;\n\n&gt;&gt;&gt; for descendant in root.iterfind(\"custom:g\", namespaces):\n...     print(descendant)\n...\n&lt;Element '{&lt;http://www.w3.org/2000/svg}g&gt;' at 0x7f430baa0270&gt;\n</code></pre> <p>The namespace mapping lets you refer to the same element with different prefixes. Surprisingly, if you try to find those nested <code>&lt;ellipse&gt;</code> elements like before, then <code>.iterfind()</code> won\u2019t return anything because it expects an XPath expression rather than a simple tag name:</p> <pre><code>&gt;&gt;&gt; for descendant in root.iterfind(\"ellipse\", namespaces):\n...     print(descendant)\n...\n\n&gt;&gt;&gt; for descendant in root.iterfind(\"g/ellipse\", namespaces):\n...     print(descendant)\n...\n&lt;Element '{&lt;http://www.w3.org/2000/svg}ellipse&gt;' at 0x7f430baa03b0&gt;\n&lt;Element '{&lt;http://www.w3.org/2000/svg}ellipse&gt;' at 0x7f430baa0450&gt;\n</code></pre> <p>By coincidence, the string \"g\" happens to be a valid path relative to the current root element, which is why the function returned a non-empty result before. However, to find the ellipses nested one level deeper in the XML hierarchy, you need a more verbose path expression.</p> <p>ElementTree has limited syntax support for the XPath mini-language, which you can use to query elements in XML, similar to CSS selectors in HTML. There are other methods that accept such an expression:</p> <pre><code>&gt;&gt;&gt; namespaces = {\"\": \"http://www.w3.org/2000/svg\"}\n\n&gt;&gt;&gt; root.iterfind(\"defs\", namespaces)\n&lt;generator object prepare_child.&lt;locals&gt;.select at 0x7f430ba6d190&gt;\n\n&gt;&gt;&gt; root.findall(\"defs\", namespaces)\n[&lt;Element '{http://www.w3.org/2000/svg}defs' at 0x7f430ba09e00&gt;]\n\n&gt;&gt;&gt; root.find(\"defs\", namespaces)\n&lt;Element '{&lt;http://www.w3.org/2000/svg}defs&gt;' at 0x7f430ba09e00&gt;\n</code></pre> <p>While <code>.iterfind()</code> yields matching elements lazily, <code>.findall()</code> returns a list, and <code>.find()</code> returns only the first matching element. Similarly, you can extract text enclosed between the opening and closing tags of elements using <code>.findtext()</code> or get the inner text of the entire document with <code>.itertext()</code>:</p> <pre><code>&gt;&gt;&gt; namespaces = {\"i\": \"http://www.inkscape.org/namespaces/inkscape\"}\n\n&gt;&gt;&gt; root.findtext(\"i:custom\", namespaces=namespaces)\n'Some value'\n\n&gt;&gt;&gt; for text in root.itertext():\n...     if text.strip() != \"\":\n...         print(text.strip())\n...\nSome value\nHello &lt;svg&gt;!\nconsole.log(\"CDATA disables XML parsing: &lt;svg&gt;\")\n\u22ee\n</code></pre> <p>You look for text embedded in a specific XML element first, then everywhere in the whole document. Searching by text is a powerful feature of the ElementTree API. It\u2019s possible to replicate it using other built-in parsers, but at the cost of increased code complexity and less convenience.</p> <p>The ElementTree API is probably the most intuitive one of them all. It\u2019s Pythonic, efficient, robust, and universal. Unless you have a specific reason to use DOM or SAX, this should be your default choice.</p>"},{"location":"xml/#\u63a2\u7d22\u7b2c\u4e09\u65b9-xml-\u89e3\u6790\u5668\u5e93","title":"\u63a2\u7d22\u7b2c\u4e09\u65b9 XML \u89e3\u6790\u5668\u5e93","text":"\u4e2d\u6587\u539f\u6587 <p>\u6709\u65f6\uff0c\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684 XML \u89e3\u6790\u5668\u53ef\u80fd\u4f1a\u8ba9\u4eba\u611f\u89c9\u50cf\u662f\u62ff\u8d77\u5927\u9524\u6765\u7834\u89e3\u575a\u679c\u3002 \u5728\u5176\u4ed6\u65f6\u5019\uff0c\u60c5\u51b5\u6070\u6070\u76f8\u53cd\uff0c\u60a8\u5e0c\u671b\u89e3\u6790\u5668\u53ef\u4ee5\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u67b6\u6784\u9a8c\u8bc1 XML \u6216\u4f7f\u7528\u9ad8\u7ea7 XPath \u8868\u8fbe\u5f0f\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u67e5\u770b PyPI \u4e0a\u53ef\u7528\u7684\u5916\u90e8\u5e93\u3002</p> <p>\u4e0b\u9762\uff0c\u60a8\u5c06\u627e\u5230\u4e00\u7cfb\u5217\u5177\u6709\u4e0d\u540c\u590d\u6742\u7a0b\u5ea6\u548c\u590d\u6742\u7a0b\u5ea6\u7684\u5916\u90e8\u5e93\u3002</p> <p>Occasionally, reaching for the XML parsers in the standard library might feel like picking up a sledgehammer to crack a nut. At other times, it\u2019s the opposite, and you wish for a parser that could do much more. For example, you might want to validate XML against a schema or use advanced XPath expressions. In those situations, it\u2019s best to check out the external libraries available on PyPI.</p> <p>Below, you\u2019ll find a selection of external libraries with varying degrees of complexity and sophistication.</p>"},{"location":"xml/#untangle-\u5c06-xml-\u8f6c\u6362\u4e3a-python-\u5bf9\u8c61","title":"untangle: \u5c06 XML \u8f6c\u6362\u4e3a Python \u5bf9\u8c61","text":"\u4e2d\u6587\u539f\u6587 <p>\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u4e00\u79cd\u53ef\u4ee5\u5c06 XML \u6587\u6863\u8f6c\u6362\u4e3a Python \u5bf9\u8c61\u7684\u5355\u884c\u4ee3\u7801\uff0c\u90a3\u4e48\u60a8\u5c31\u4e0d\u7528\u518d\u72b9\u8c6b\u4e86\u3002 \u867d\u7136 untangle \u5e93\u5df2\u7ecf\u51e0\u5e74\u6ca1\u6709\u66f4\u65b0\u4e86\uff0c\u4f46\u5b83\u53ef\u80fd\u5f88\u5feb\u5c31\u4f1a\u6210\u4e3a\u60a8\u5728 Python \u4e2d\u89e3\u6790 XML \u7684\u6700\u559c\u6b22\u7684\u65b9\u5f0f\u3002 \u53ea\u9700\u8bb0\u4f4f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u53d7 URL\u3001\u6587\u4ef6\u540d\u3001\u6587\u4ef6\u5bf9\u8c61\u6216 XML \u5b57\u7b26\u4e32\uff1a</p> <pre><code>&gt;&gt;&gt; import untangle\n\n&gt;&gt;&gt; # Parse XML from a URL\n&gt;&gt;&gt; untangle.parse(\"http://localhost:8000/smiley.svg\")\nElement(name = None, attributes = None, cdata = )\n\n&gt;&gt;&gt; # Parse XML from a filename\n&gt;&gt;&gt; untangle.parse(\"smiley.svg\")\nElement(name = None, attributes = None, cdata = )\n\n&gt;&gt;&gt; # Parse XML from a file object\n&gt;&gt;&gt; with open(\"smiley.svg\") as file:\n...     untangle.parse(file)\n...\nElement(name = None, attributes = None, cdata = )\n\n&gt;&gt;&gt; # Parse XML from a Python string\n&gt;&gt;&gt; untangle.parse(\"\"\"\\\n... &lt;svg viewBox=\"-105 -100 210 270\"&gt;\n...   &lt;!-- More content goes here... --&gt;\n... &lt;/svg&gt;\n... \"\"\")\nElement(name = None, attributes = None, cdata = )\n</code></pre> <p>\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u90fd\u4f1a\u8fd4\u56de <code>Element</code> \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 \u70b9\u8fd0\u7b97\u7b26 \u6765\u8bbf\u95ee\u5176\u5b50\u8282\u70b9\uff0c\u5e76\u4f7f\u7528 \u65b9\u62ec\u53f7 \u8bed\u6cd5\u6765\u6309\u7d22\u5f15\u83b7\u53d6 XML \u5c5e\u6027\u6216\u5b50\u8282\u70b9\u4e4b\u4e00\u3002 \u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u6587\u6863\u7684\u6839\u5143\u7d20\uff0c\u60a8\u53ef\u4ee5\u50cf\u8bbf\u95ee\u5bf9\u8c61\u7684\u5c5e\u6027\u4e00\u6837\u8bbf\u95ee\u5b83\u3002 \u8981\u83b7\u53d6\u5143\u7d20\u7684 XML \u5c5e\u6027\u4e4b\u4e00\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u540d\u79f0\u4f5c\u4e3a\u5b57\u5178\u952e\u4f20\u9012\uff1a</p> <pre><code>&gt;&gt;&gt; import untangle\n&gt;&gt;&gt; document = untangle.parse(\"smiley.svg\")\n\n&gt;&gt;&gt; document.svg\nElement(name = svg, attributes = {'xmlns': ...}, ...)\n\n&gt;&gt;&gt; document.svg[\"viewBox\"]\n'-105 -100 210 270'\n</code></pre> <p>\u6ca1\u6709\u9700\u8981\u8bb0\u4f4f\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u540d\u79f0\u3002 \u76f8\u53cd\uff0c\u6bcf\u4e2a\u89e3\u6790\u7684\u5bf9\u8c61\u90fd\u662f\u552f\u4e00\u7684\uff0c\u56e0\u6b64\u60a8\u786e\u5b9e\u9700\u8981\u4e86\u89e3\u5e95\u5c42 XML \u6587\u6863\u7684\u7ed3\u6784\u624d\u80fd\u4f7f\u7528 <code>untangle</code> \u904d\u5386\u5b83\u3002</p> <p>\u8981\u627e\u51fa\u6839\u5143\u7d20\u7684\u540d\u79f0\uff0c\u8bf7\u5728\u6587\u6863\u4e0a\u8c03\u7528 <code>dir()</code> \uff1a</p> <pre><code>&gt;&gt;&gt; dir(document)\n['svg']\n</code></pre> <p>\u8fd9\u63ed\u793a\u4e86\u8be5\u5143\u7d20\u7684\u76f4\u63a5\u5b50\u5143\u7d20\u7684\u540d\u79f0\u3002 \u8bf7\u6ce8\u610f\uff0c<code>untangle</code> \u4e3a\u5176\u89e3\u6790\u7684\u6587\u6863\u91cd\u65b0\u5b9a\u4e49\u4e86 <code>dir()</code> \u7684\u542b\u4e49\u3002 \u901a\u5e38\uff0c\u60a8\u8c03\u7528\u6b64\u5185\u7f6e\u51fd\u6570\u6765\u68c0\u67e5\u7c7b\u6216 Python \u6a21\u5757\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u5c06\u8fd4\u56de\u5c5e\u6027\u540d\u79f0\u5217\u8868\uff0c\u800c\u4e0d\u662f XML \u6587\u6863\u7684\u5b50\u5143\u7d20\u3002</p> <p>\u5982\u679c\u6709\u591a\u4e2a\u5b50\u7ea7\u5177\u6709\u7ed9\u5b9a\u7684\u6807\u7b7e\u540d\u79f0\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u8fed\u4ee3\u5b83\u4eec\u6216\u901a\u8fc7\u7d22\u5f15\u5f15\u7528\u5176\u4e2d\u4e00\u4e2a\uff1a</p> <pre><code>&gt;&gt;&gt; dir(document.svg)\n['defs', 'g', 'inkscape_custom', 'script', 'text']\n\n&gt;&gt;&gt; dir(document.svg.defs.linearGradient)\n['stop', 'stop', 'stop']\n\n&gt;&gt;&gt; for stop in document.svg.defs.linearGradient.stop:\n...     print(stop)\n...\nElement &lt;stop&gt; with attributes {'offset': ...}, ...\nElement &lt;stop&gt; with attributes {'offset': ...}, ...\nElement &lt;stop&gt; with attributes {'offset': ...}, ...\n\n&gt;&gt;&gt; document.svg.defs.linearGradient.stop[1]\nElement(name = stop, attributes = {'offset': ...}, ...)\n</code></pre> <p>\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c<code>&lt;inkscape:custom&gt;</code> \u5143\u7d20\u5df2\u91cd\u547d\u540d\u4e3a <code>inkscape_custom</code>\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u8be5\u5e93\u65e0\u6cd5\u5f88\u597d\u5730\u5904\u7406 XML \u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u9700\u8981\u4f9d\u8d56\u5b83\uff0c\u90a3\u4e48\u60a8\u5fc5\u987b\u5bfb\u627e\u5176\u4ed6\u5730\u65b9\u3002</p> <p>\u7531\u4e8e\u70b9\u8868\u793a\u6cd5\uff0cXML \u6587\u6863\u4e2d\u7684\u5143\u7d20\u540d\u79f0\u5fc5\u987b\u662f\u6709\u6548\u7684 Python \u6807\u8bc6\u7b26\u3002 \u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48 <code>untangle</code> \u4f1a\u81ea\u52a8\u91cd\u5199\u5b83\u4eec\u7684\u540d\u79f0\uff0c\u7528\u4e0b\u5212\u7ebf\u66ff\u6362\u7981\u6b62\u7684\u5b57\u7b26\uff1a</p> <pre><code>&gt;&gt;&gt; dir(untangle.parse(\"&lt;com:company.web-app&gt;&lt;/com:company.web-app&gt;\"))\n['com_company_web_app']\n</code></pre> <p>\u5b50\u6807\u7b7e\u540d\u79f0\u5e76\u4e0d\u662f\u60a8\u53ef\u4ee5\u8bbf\u95ee\u7684\u552f\u4e00\u5bf9\u8c61\u5c5e\u6027\u3002 \u5143\u7d20\u6709\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u5bf9\u8c61\u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>vars()</code> \u6765\u663e\u793a\uff1a</p> <pre><code>&gt;&gt;&gt; element = document.svg.text\n\n&gt;&gt;&gt; list(vars(element).keys())\n['_name', '_attributes', 'children', 'is_root', 'cdata']\n\n&gt;&gt;&gt; element._name\n'text'\n\n&gt;&gt;&gt; element._attributes\n{'x': '-40', 'y': '75'}\n\n&gt;&gt;&gt; element.children\n[]\n\n&gt;&gt;&gt; element.is_root\nFalse\n\n&gt;&gt;&gt; element.cdata\n'Hello &lt;svg&gt;!'\n</code></pre> <p>\u5728\u5e55\u540e\uff0c<code>untangle</code> \u4f7f\u7528\u5185\u7f6e\u7684 SAX \u89e3\u6790\u5668\uff0c\u4f46\u7531\u4e8e\u8be5\u5e93\u662f\u7528\u7eaf Python \u5b9e\u73b0\u7684\uff0c\u5e76\u521b\u5efa\u4e86\u5927\u91cf\u91cd\u91cf\u7ea7\u5bf9\u8c61\uff0c\u56e0\u6b64\u5b83\u7684\u6027\u80fd\u76f8\u5f53\u5dee\u3002 \u867d\u7136\u5b83\u65e8\u5728\u8bfb\u53d6\u5c0f\u578b\u6587\u6863\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\u5c06\u5176\u4e0e\u53e6\u4e00\u79cd\u65b9\u6cd5\u7ed3\u5408\u8d77\u6765\u8bfb\u53d6\u6570 GB XML \u6587\u4ef6\u3002</p> <p>\u5c31\u662f\u8fd9\u6837\u3002 \u5982\u679c\u60a8\u524d\u5f80\u7ef4\u57fa\u767e\u79d1\u6863\u6848\uff0c\u60a8\u53ef\u4ee5\u4e0b\u8f7d\u5176\u4e2d\u4e00\u4e2a\u538b\u7f29\u7684 XML \u6587\u4ef6\u3002 \u9876\u90e8\u7684\u5185\u5bb9\u5e94\u5305\u542b\u6587\u7ae0\u6458\u8981\u7684\u5feb\u7167\uff1a</p> <pre><code>&lt;feed&gt;\n  &lt;doc&gt;\n    &lt;title&gt;Wikipedia: Anarchism&lt;/title&gt;\n    &lt;url&gt;https://en.wikipedia.org/wiki/Anarchism&lt;/url&gt;\n    &lt;abstract&gt;Anarchism is a political philosophy...&lt;/abstract&gt;\n    &lt;links&gt;\n      &lt;sublink linktype=\"nav\"&gt;\n        &lt;anchor&gt;Etymology, terminology and definition&lt;/anchor&gt;\n        &lt;link&gt;https://en.wikipedia.org/wiki/Anarchism#Etymology...&lt;/link&gt;\n      &lt;/sublink&gt;\n      &lt;sublink linktype=\"nav\"&gt;\n        &lt;anchor&gt;History&lt;/anchor&gt;\n        &lt;link&gt;https://en.wikipedia.org/wiki/Anarchism#History&lt;/link&gt;\n      &lt;/sublink&gt;\n      \u22ee\n    &lt;/links&gt;\n  &lt;/doc&gt;\n  \u22ee\n&lt;/feed&gt;\n</code></pre> <p>\u4e0b\u8f7d\u540e\u5927\u5c0f\u8d85\u8fc7 6 GB\uff0c\u975e\u5e38\u9002\u5408\u672c\u7ec3\u4e60\u3002 \u8fd9\u4e2a\u7ec3\u4e60\u662f\u626b\u63cf\u6587\u4ef6\u4ee5\u67e5\u627e\u8fde\u7eed\u7684\u5f00\u59cb\u548c\u7ed3\u675f <code>&lt;doc&gt;</code> \u6807\u8bb0\uff0c\u7136\u540e\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\u4f7f\u7528 <code>untangle</code> \u89e3\u6790\u5b83\u4eec\u4e4b\u95f4\u7684 XML \u7247\u6bb5\u3002</p> <p>\u5185\u7f6e\u7684 mmap \u6a21\u5757\u53ef\u8ba9\u60a8\u521b\u5efa\u6587\u4ef6\u5185\u5bb9\u7684\u865a\u62df\u89c6\u56fe\uff0c\u5373\u4f7f\u5b83\u4e0d\u9002\u5408\u53ef\u7528\u5185\u5b58\u3002 \u8fd9\u7ed9\u4eba\u4e00\u79cd\u4f7f\u7528\u652f\u6301\u641c\u7d22\u548c\u5e38\u89c4\u5207\u7247\u8bed\u6cd5\u7684\u5de8\u5927\u5b57\u8282\u5b57\u7b26\u4e32\u7684\u5370\u8c61\u3002 \u5982\u679c\u60a8\u5bf9\u5982\u4f55\u5c06\u6b64\u903b\u8f91\u5c01\u88c5\u5728 Python \u7c7b \u4e2d\u5e76\u5229\u7528 \u751f\u6210\u5668 \u8fdb\u884c\u60f0\u6027\u8bc4\u4f30\uff0c\u7136\u540e\u5c55\u5f00\u4e0b\u9762\u7684\u53ef\u6298\u53e0\u90e8\u5206\u3002</p> A Hybrid Approach to Parsing XML <p>Here\u2019s the complete code of the XMLTagStream class:</p> <pre><code>import mmap\nimport untangle\n\nclass XMLTagStream:\n    def __init__(self, path, tag_name, encoding=\"utf-8\"):\n        self.file = open(path)\n        self.stream = mmap.mmap(\n            self.file.fileno(), 0, access=mmap.ACCESS_READ\n        )\n        self.tag_name = tag_name\n        self.encoding = encoding\n        self.start_tag = f\"&lt;{tag_name}&gt;\".encode(encoding)\n        self.end_tag = f\"&lt;/{tag_name}&gt;\".encode(encoding)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.stream.close()\n        self.file.close()\n\n    def __iter__(self):\n        end = 0\n        while (begin := self.stream.find(self.start_tag, end)) != -1:\n            end = self.stream.find(self.end_tag, begin)\n            yield self.parse(self.stream[begin: end + len(self.end_tag)])\n\n    def parse(self, chunk):\n        document = untangle.parse(chunk.decode(self.encoding))\n        return getattr(document, self.tag_name)\n</code></pre> <p>\u5b83\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5b83\u4f7f\u7528\u5b9a\u4e49\u4e3a\u5185\u8054\u751f\u6210\u5668\u51fd\u6570\u7684\u8fed\u4ee3\u5668\u534f\u8bae\u3002 \u751f\u6210\u7684\u751f\u6210\u5668\u5bf9\u8c61\u5728 XML \u6587\u6863\u4e0a\u5faa\u73af\uff0c\u5c31\u597d\u50cf\u5b83\u662f\u4e00\u957f\u4e32\u5b57\u7b26\u4e00\u6837\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cwhile \u5faa\u73af\u5229\u7528\u4e86\u76f8\u5f53\u65b0\u7684 Python \u8bed\u6cd5\uff0c\u5373 walrus \u8fd0\u7b97\u7b26 (:=) \u6765\u7b80\u5316\u4ee3\u7801\u3002 \u60a8\u53ef\u4ee5\u5728\u8d4b\u503c\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u6b64\u8fd0\u7b97\u7b26\uff0c\u5176\u4e2d\u53ef\u4ee5\u8ba1\u7b97\u8868\u8fbe\u5f0f\u5e76\u5c06\u5176\u5206\u914d\u7ed9\u53d8\u91cf\u3002</p> <p>\u5728\u4e0d\u6df1\u5165\u8ba8\u8bba\u5177\u4f53\u7ec6\u8282\u7684\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u81ea\u5b9a\u4e49\u7c7b\u5feb\u901f\u6d4f\u89c8\u5927\u578b XML \u6587\u4ef6\uff0c\u540c\u65f6\u901a\u8fc7 untangle \u66f4\u5f7b\u5e95\u5730\u68c0\u67e5\u7279\u5b9a\u5143\u7d20\uff1a</p> <pre><code>&gt;&gt;&gt; with XMLTagStream(\"abstract.xml\", \"doc\") as stream:\n...     for doc in stream:\n...         print(doc.title.cdata.center(50, \"=\"))\n...         for sublink in doc.links.sublink:\n...             print(\"-\", sublink.anchor.cdata)\n...         if \"q\" == input(\"Press [q] to exit or any key to continue...\"):\n...             break\n...\n===============Wikipedia: Anarchism===============\n- Etymology, terminology and definition\n- History\n- Pre-modern era\n\u22ee\nPress [q] to exit or any key to continue...\n================Wikipedia: Autism=================\n- Characteristics\n- Social development\n- Communication\n\u22ee\nPress [q] to exit or any key to continue...\n</code></pre> <p>\u9996\u5148\uff0c\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c\u8bfb\u53d6\u5e76\u6307\u51fa\u8981\u67e5\u627e\u7684\u6807\u7b7e\u540d\u79f0\u3002 \u7136\u540e\uff0c\u60a8\u8fed\u4ee3\u8fd9\u4e9b\u5143\u7d20\u5e76\u63a5\u6536 XML \u6587\u6863\u7684\u5df2\u89e3\u6790\u7247\u6bb5\u3002 \u8fd9\u51e0\u4e4e\u5c31\u50cf\u900f\u8fc7\u4e00\u4e2a\u5c0f\u7a97\u53e3\u5728\u4e00\u5f20\u65e0\u9650\u957f\u7684\u7eb8\u4e0a\u79fb\u52a8\u4e00\u6837\u3002 \u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u6d45\u663e\u7684\u793a\u4f8b\uff0c\u5ffd\u7565\u4e86\u4e00\u4e9b\u7ec6\u8282\uff0c\u4f46\u5b83\u5e94\u8be5\u8ba9\u60a8\u5927\u81f4\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u8fd9\u79cd\u6df7\u5408\u89e3\u6790\u7b56\u7565\u3002</p> <p>If you\u2019re looking for a one-liner that could turn your XML document into a Python object, then look no further. While it hasn\u2019t been updated in a few years, the untangle library might soon become your favorite way of parsing XML in Python. There\u2019s only one function to remember, and it accepts a URL, a filename, a file object, or an XML string:</p> <pre><code>&gt;&gt;&gt; import untangle\n\n&gt;&gt;&gt; # Parse XML from a URL\n&gt;&gt;&gt; untangle.parse(\"http://localhost:8000/smiley.svg\")\nElement(name = None, attributes = None, cdata = )\n\n&gt;&gt;&gt; # Parse XML from a filename\n&gt;&gt;&gt; untangle.parse(\"smiley.svg\")\nElement(name = None, attributes = None, cdata = )\n\n&gt;&gt;&gt; # Parse XML from a file object\n&gt;&gt;&gt; with open(\"smiley.svg\") as file:\n...     untangle.parse(file)\n...\nElement(name = None, attributes = None, cdata = )\n\n&gt;&gt;&gt; # Parse XML from a Python string\n&gt;&gt;&gt; untangle.parse(\"\"\"\\\n... &lt;svg viewBox=\"-105 -100 210 270\"&gt;\n...   &lt;!-- More content goes here... --&gt;\n... &lt;/svg&gt;\n... \"\"\")\nElement(name = None, attributes = None, cdata = )\n</code></pre> <p>In each case, it returns an instance of the Element class. You can use the dot operator to access its children and the square bracket syntax to get XML attributes or one of the child nodes by index. To get the document\u2019s root element, for example, you can access it as if it was the object\u2019s property. To get one of the element\u2019s XML attributes, you may pass its name as a dictionary key:</p> <pre><code>&gt;&gt;&gt; import untangle\n&gt;&gt;&gt; document = untangle.parse(\"smiley.svg\")\n\n&gt;&gt;&gt; document.svg\nElement(name = svg, attributes = {'xmlns': ...}, ...)\n\n&gt;&gt;&gt; document.svg[\"viewBox\"]\n'-105 -100 210 270'\n</code></pre> <p>There are no function or method names to remember. Instead, each parsed object is unique, so you really need to know the underlying XML document\u2019s structure to traverse it with untangle.</p> <p>To find out what the root element\u2019s name is, call <code>dir()</code> on the document:</p> <pre><code>&gt;&gt;&gt; dir(document)\n['svg']\n</code></pre> <p>This reveals the names of the element\u2019s immediate children. Note that <code>untangle</code> redefines the meaning of <code>dir()</code> for its parsed documents. Usually, you call this built-in function to inspect a class or a Python module. The default implementation would return a list of attribute names rather than the child elements of an XML document.</p> <p>If there\u2019s more than one child with the given tag name, then you can iterate over them with a loop or refer to one by index:</p> <pre><code>&gt;&gt;&gt; dir(document.svg)\n['defs', 'g', 'inkscape_custom', 'script', 'text']\n\n&gt;&gt;&gt; dir(document.svg.defs.linearGradient)\n['stop', 'stop', 'stop']\n\n&gt;&gt;&gt; for stop in document.svg.defs.linearGradient.stop:\n...     print(stop)\n...\nElement &lt;stop&gt; with attributes {'offset': ...}, ...\nElement &lt;stop&gt; with attributes {'offset': ...}, ...\nElement &lt;stop&gt; with attributes {'offset': ...}, ...\n\n&gt;&gt;&gt; document.svg.defs.linearGradient.stop[1]\nElement(name = stop, attributes = {'offset': ...}, ...)\n</code></pre> <p>You might have noticed that the <code>&lt;inkscape:custom&gt;</code> element was renamed to <code>inkscape_custom</code>. Unfortunately, the library can\u2019t handle XML namespaces well, so if that\u2019s something you need to rely on, then you must look elsewhere.</p> <p>Because of the dot notation, element names in XML documents must be valid Python identifiers. If they\u2019re not, then untangle will automatically rewrite their names by replacing forbidden characters with an underscore:</p> <pre><code>&gt;&gt;&gt; dir(untangle.parse(\"&lt;com:company.web-app&gt;&lt;/com:company.web-app&gt;\"))\n['com_company_web_app']\n</code></pre> <p>Children\u2019s tag names aren\u2019t the only object properties you can access. Elements have a few predefined object attributes that might be shown by calling <code>vars()</code>:</p> <pre><code>&gt;&gt;&gt; element = document.svg.text\n\n&gt;&gt;&gt; list(vars(element).keys())\n['_name', '_attributes', 'children', 'is_root', 'cdata']\n\n&gt;&gt;&gt; element._name\n'text'\n\n&gt;&gt;&gt; element._attributes\n{'x': '-40', 'y': '75'}\n\n&gt;&gt;&gt; element.children\n[]\n\n&gt;&gt;&gt; element.is_root\nFalse\n\n&gt;&gt;&gt; element.cdata\n'Hello &lt;svg&gt;!'\n</code></pre> <p>Behind the scenes, untangle uses the built-in SAX parser, but because the library is implemented in pure Python and creates lots of heavyweight objects, it has considerably poor performance. While it\u2019s intended for reading tiny documents, you can still combine it with another approach to read multi-gigabyte XML files.</p> <p>Here\u2019s how. If you head over to Wikipedia archives, you can download one of their compressed XML files. The one at the top should contain a snapshot of the articles\u2019 abstracts:</p> <pre><code>&lt;feed&gt;\n  &lt;doc&gt;\n    &lt;title&gt;Wikipedia: Anarchism&lt;/title&gt;\n    &lt;url&gt;https://en.wikipedia.org/wiki/Anarchism&lt;/url&gt;\n    &lt;abstract&gt;Anarchism is a political philosophy...&lt;/abstract&gt;\n    &lt;links&gt;\n      &lt;sublink linktype=\"nav\"&gt;\n        &lt;anchor&gt;Etymology, terminology and definition&lt;/anchor&gt;\n        &lt;link&gt;https://en.wikipedia.org/wiki/Anarchism#Etymology...&lt;/link&gt;\n      &lt;/sublink&gt;\n      &lt;sublink linktype=\"nav\"&gt;\n        &lt;anchor&gt;History&lt;/anchor&gt;\n        &lt;link&gt;https://en.wikipedia.org/wiki/Anarchism#History&lt;/link&gt;\n      &lt;/sublink&gt;\n      \u22ee\n    &lt;/links&gt;\n  &lt;/doc&gt;\n  \u22ee\n&lt;/feed&gt;\n</code></pre> <p>It\u2019s over 6 GB in size after download, which is perfect for this exercise. The idea is to scan the file to find the consecutive opening and closing  tags and then parse the XML fragment between them using untangle for convenience. <p>The built-in mmap module lets you create a virtual view of the file contents, even when it doesn\u2019t fit the available memory. This gives an impression of working with a huge string of bytes that supports searching and the regular slicing syntax. If you\u2019re interested in how to encapsulate this logic in a Python class and take advantage of a generator for lazy evaluation, then expand the collapsible section below.</p> A Hybrid Approach to Parsing XML <p>Here\u2019s the complete code of the XMLTagStream class:</p> <pre><code>import mmap\nimport untangle\n\nclass XMLTagStream:\n    def __init__(self, path, tag_name, encoding=\"utf-8\"):\n        self.file = open(path)\n        self.stream = mmap.mmap(\n            self.file.fileno(), 0, access=mmap.ACCESS_READ\n        )\n        self.tag_name = tag_name\n        self.encoding = encoding\n        self.start_tag = f\"&lt;{tag_name}&gt;\".encode(encoding)\n        self.end_tag = f\"&lt;/{tag_name}&gt;\".encode(encoding)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.stream.close()\n        self.file.close()\n\n    def __iter__(self):\n        end = 0\n        while (begin := self.stream.find(self.start_tag, end)) != -1:\n            end = self.stream.find(self.end_tag, begin)\n            yield self.parse(self.stream[begin: end + len(self.end_tag)])\n\n    def parse(self, chunk):\n        document = untangle.parse(chunk.decode(self.encoding))\n        return getattr(document, self.tag_name)\n</code></pre> <p>It\u2019s a custom context manager, which uses the iterator protocol defined as an inline generator function. The resulting generator object loops over the XML document as if it was a long stream of characters.</p> <p>Note that the while loop takes advantage of fairly new Python syntax, the walrus operator (:=), to simplify the code. You can use this operator in assignment expressions, where an expression can be evaluated and assigned to a variable.</p> <p>Without getting into the nitty-gritty details, here\u2019s how you can use this custom class to go through a big XML file quickly while inspecting specific elements more thoroughly with untangle:</p> <pre><code>&gt;&gt;&gt; with XMLTagStream(\"abstract.xml\", \"doc\") as stream:\n...     for doc in stream:\n...         print(doc.title.cdata.center(50, \"=\"))\n...         for sublink in doc.links.sublink:\n...             print(\"-\", sublink.anchor.cdata)\n...         if \"q\" == input(\"Press [q] to exit or any key to continue...\"):\n...             break\n...\n===============Wikipedia: Anarchism===============\n- Etymology, terminology and definition\n- History\n- Pre-modern era\n\u22ee\nPress [q] to exit or any key to continue...\n================Wikipedia: Autism=================\n- Characteristics\n- Social development\n- Communication\n\u22ee\nPress [q] to exit or any key to continue...\n</code></pre> <p>First, you open a file for reading and indicate the tag name that you want to find. Then, you iterate over those elements and receive a parsed fragment of the XML document. It\u2019s almost like looking through a tiny window moving over an infinitely long sheet of paper. That\u2019s a relatively surface-level example that ignores a few details, but it should give you a general idea of how to use such a hybrid parsing strategy.</p>"},{"location":"xml/#xmltodict-\u5c06-xml-\u8f6c\u6362\u4e3a-python-\u5b57\u5178","title":"xmltodict: \u5c06 XML \u8f6c\u6362\u4e3a Python \u5b57\u5178","text":"\u4e2d\u6587\u539f\u6587 <p>\u5982\u679c\u60a8\u559c\u6b22 JSON \u4f46\u4e0d\u559c\u6b22 XML\uff0c\u90a3\u4e48\u8bf7\u67e5\u770b xmltodict\uff0c\u5b83\u8bd5\u56fe\u5f25\u5408\u4e24\u79cd\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002 \u987e\u540d\u601d\u4e49\uff0c\u8be5\u5e93\u53ef\u4ee5\u89e3\u6790 XML \u6587\u6863\u5e76\u5c06\u5176\u8868\u793a\u4e3a Python \u5b57\u5178\uff0c\u8fd9\u4e5f\u6070\u597d\u662f Python \u4e2d JSON \u6587\u6863\u7684\u76ee\u6807\u6570\u636e\u7c7b\u578b\u3002 \u8fd9\u4f7f\u5f97 XML \u548c JSON \u4e4b\u95f4\u7684\u8f6c\u6362\u6210\u4e3a\u53ef\u80fd\u3002</p> <p>Note</p> <p>Note: \u5b57\u5178\u662f\u7531\u952e\u503c\u5bf9\u7ec4\u6210\u7684\uff0c\u800cXML\u6587\u6863\u672c\u8d28\u4e0a\u662f\u5206\u5c42\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u4e22\u5931\u4e00\u4e9b\u4fe1\u606f\u3002 \u9664\u6b64\u4e4b\u5916\uff0cXML \u8fd8\u5177\u6709\u5c5e\u6027\u3001\u6ce8\u91ca\u3001\u5904\u7406\u6307\u4ee4\u4ee5\u53ca\u5b57\u5178\u4e2d\u4e0d\u53ef\u7528\u7684\u5176\u4ed6\u5b9a\u4e49\u5143\u6570\u636e\u7684\u65b9\u6cd5\u3002</p> <p>\u4e0e\u8fc4\u4eca\u4e3a\u6b62\u7684\u5176\u4ed6 XML \u89e3\u6790\u5668\u4e0d\u540c\uff0c\u8fd9\u4e2a\u89e3\u6790\u5668\u9700\u8981\u4e00\u4e2a Python \u5b57\u7b26\u4e32\u6216\u4e00\u4e2a\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\uff0c\u4ee5\u4e8c\u8fdb\u5236\u6a21\u5f0f\u6253\u5f00\u4ee5\u4f9b\u8bfb\u53d6\uff1a</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; xmltodict.parse(\"\"\"\\\n... &lt;svg viewBox=\"-105 -100 210 270\"&gt;\n...   &lt;!-- More content goes here... --&gt;\n... &lt;/svg&gt;\n... \"\"\")\nOrderedDict([('svg', OrderedDict([('@viewBox', '-105 -100 210 270')]))])\n\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     xmltodict.parse(file)\n...\nOrderedDict([('svg', ...)])\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u5e93\u8fd4\u56de OrderedDict \u96c6\u5408\u7684\u5b9e\u4f8b\u4ee5\u4fdd\u7559\u5143\u7d20\u987a\u5e8f\u3002 \u7136\u800c\uff0c\u4ecePython 3.6\u5f00\u59cb\uff0c\u666e\u901a\u5b57\u5178\u4e5f\u4fdd\u7559\u63d2\u5165\u987a\u5e8f\u3002 \u5982\u679c\u60a8\u60f3\u4f7f\u7528\u5e38\u89c4\u5b57\u5178\uff0c\u8bf7\u5c06 dict \u4f5c\u4e3a <code>dict_constructor</code> \u53c2\u6570\u4f20\u9012\u7ed9 <code>parse()</code> \u51fd\u6570\uff1a</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     xmltodict.parse(file, dict_constructor=dict)\n...\n{'svg': ...}\n</code></pre> <p>\u73b0\u5728\uff0c<code>parse()</code> \u8fd4\u56de\u4e00\u4e2a\u666e\u901a\u7684\u65e7\u5b57\u5178\uff0c\u5177\u6709\u719f\u6089\u7684\u6587\u672c\u8868\u793a\u5f62\u5f0f\u3002</p> <p>\u4e3a\u4e86\u907f\u514d XML \u5143\u7d20\u53ca\u5176\u5c5e\u6027\u4e4b\u95f4\u7684\u540d\u79f0\u51b2\u7a81\uff0c\u5e93\u4f1a\u81ea\u52a8\u4e3a\u540e\u8005\u6dfb\u52a0 <code>@</code> \u5b57\u7b26\u4f5c\u4e3a\u524d\u7f00\u3002 \u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u9002\u5f53\u8bbe\u7f6e <code>xml_attribs</code> \u6807\u5fd7\u6765\u5b8c\u5168\u5ffd\u7565\u5c5e\u6027\uff1a</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; # \u9ed8\u8ba4\u91cd\u547d\u540d\u5c5e\u6027\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file)\n...     print([x for x in document[\"svg\"] if x.startswith(\"@\")])\n...\n['@xmlns', '@xmlns:inkscape', '@viewBox', '@width', '@height']\n\n&gt;&gt;&gt; # \u5f53\u8bf7\u6c42\u65f6\u5ffd\u7565\u5c5e\u6027\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file, xml_attribs=False)\n...     print([x for x in document[\"svg\"] if x.startswith(\"@\")])\n...\n[]\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5ffd\u7565\u7684\u53e6\u4e00\u6761\u4fe1\u606f\u662f XML \u547d\u540d\u7a7a\u95f4 \u58f0\u660e\u3002 \u8fd9\u4e9b\u88ab\u89c6\u4e3a\u5e38\u89c4\u5c5e\u6027\uff0c\u800c\u76f8\u5e94\u7684\u524d\u7f00\u5219\u6210\u4e3a\u6807\u7b7e\u540d\u79f0\u7684\u4e00\u90e8\u5206\u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u613f\u610f\uff0c\u53ef\u4ee5\u6269\u5c55\u3001\u91cd\u547d\u540d\u6216\u8df3\u8fc7\u67d0\u4e9b\u547d\u540d\u7a7a\u95f4\uff1a</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; # \u9ed8\u8ba4\u5ffd\u7565\u547d\u540d\u7a7a\u95f4\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file)\n...     print(document.keys())\n...\nodict_keys(['svg'])\n\n&gt;&gt;&gt; # \u6839\u636e\u8bf7\u6c42\u5904\u7406\u547d\u540d\u7a7a\u95f4\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file, process_namespaces=True)\n...     print(document.keys())\n...\nodict_keys(['http://www.w3.org/2000/svg:svg'])\n\n&gt;&gt;&gt; # \u91cd\u547d\u540d\u5e76\u8df3\u8fc7\u4e00\u4e9b\u547d\u540d\u7a7a\u95f4\n&gt;&gt;&gt; namespaces = {\n...     \"http://www.w3.org/2000/svg\": \"svg\",\n...     \"http://www.inkscape.org/namespaces/inkscape\": None,\n... }\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(\n...         file, process_namespaces=True, namespaces=namespaces\n...     )\n...     print(document.keys())\n...     print(\"custom\" in document[\"svg:svg\"])\n...     print(\"inkscape:custom\" in document[\"svg:svg\"])\n...\nodict_keys(['svg:svg'])\nTrue\nFalse\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6807\u7b7e\u540d\u79f0\u4e0d\u5305\u542b XML \u547d\u540d\u7a7a\u95f4\u524d\u7f00\u3002 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u5b83\u4eec\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u60a8\u8bf7\u6c42\u5904\u7406\u5b83\u4eec\u3002 \u6700\u540e\uff0c\u5728\u7b2c\u4e09\u4e2a\u793a\u4f8b\u4e2d\uff0c\u60a8\u5c06\u9ed8\u8ba4\u547d\u540d\u7a7a\u95f4\u6298\u53e0\u4e3a svg\uff0c\u540c\u65f6\u4f7f\u7528 None \u6291\u5236 Inkscape \u7684\u547d\u540d\u7a7a\u95f4\u3002</p> <p>Python \u5b57\u5178\u7684\u9ed8\u8ba4\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u53ef\u80fd\u4e0d\u591f\u6e05\u6670\u3002 \u8981\u6539\u8fdb\u5176\u5448\u73b0\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c pretty-print \u6216\u5c06\u5176\u8f6c\u6362\u4e3a\u5176\u4ed6\u683c\u5f0f\uff0c\u4f8b\u5982 JSON \u6216 YAML\uff1a</p> <pre><code>&gt;&gt;&gt; import xmltodict\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file, dict_constructor=dict)\n...\n\n&gt;&gt;&gt; from pprint import pprint as pp\n&gt;&gt;&gt; pp(document)\n{'svg': {'@height': '270',\n         '@viewBox': '-105 -100 210 270',\n         '@width': '210',\n         '@xmlns': '&lt;http://www.w3.org/2000/svg&gt;',\n         '@xmlns:inkscape': '&lt;http://www.inkscape.org/namespaces/inkscape&gt;',\n         'defs': {'linearGradient': {'@id': 'skin',\n         \u22ee\n\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; print(json.dumps(document, indent=4, sort_keys=True))\n{\n    \"svg\": {\n        \"@height\": \"270\",\n        \"@viewBox\": \"-105 -100 210 270\",\n        \"@width\": \"210\",\n        \"@xmlns\": \"&lt;http://www.w3.org/2000/svg&gt;\",\n        \"@xmlns:inkscape\": \"&lt;http://www.inkscape.org/namespaces/inkscape&gt;\",\n        \"defs\": {\n            \"linearGradient\": {\n             \u22ee\n\n&gt;&gt;&gt; import yaml  # Install first with 'pip install PyYAML'\n&gt;&gt;&gt; print(yaml.dump(document))\nsvg:\n  '@height': '270'\n  '@viewBox': -105 -100 210 270\n  '@width': '210'\n  '@xmlns': &lt;http://www.w3.org/2000/svg&gt;\n  '@xmlns:inkscape': &lt;http://www.inkscape.org/namespaces/inkscape&gt;\n  defs:\n    linearGradient:\n\u22ee\n</code></pre> <p><code>xmltodict</code> \u5e93\u5141\u8bb8\u4ee5\u76f8\u53cd\u7684\u65b9\u5f0f\u8f6c\u6362\u6587\u6863\uff0c\u5373\u4ece Python \u5b57\u5178\u8f6c\u6362\u56de XML \u5b57\u7b26\u4e32\uff1a</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file, dict_constructor=dict)\n...\n\n&gt;&gt;&gt; xmltodict.unparse(document)\n'&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\\n&lt;svg...'\n</code></pre> <p>\u5f53\u9700\u8981\u5c06\u6570\u636e\u4ece JSON \u6216 YAML \u8f6c\u6362\u4e3a XML \u65f6\uff0c\u5b57\u5178\u53ef\u4ee5\u4f5c\u4e3a\u4e2d\u95f4\u683c\u5f0f\u6d3e\u4e0a\u7528\u573a\u3002</p> <p><code>xmltodict</code> \u5e93\u4e2d\u8fd8\u6709\u66f4\u591a\u529f\u80fd\uff0c\u4f8b\u5982\u6d41\u5f0f\u4f20\u8f93\uff0c\u56e0\u6b64\u8bf7\u968f\u610f\u81ea\u884c\u63a2\u7d22\u5b83\u4eec\u3002 \u7136\u800c\uff0c\u8fd9\u4e2a\u5e93\u4e5f\u6709\u70b9\u8fc7\u65f6\u4e86\u3002 \u6b64\u5916\uff0c\u5982\u679c\u60a8\u786e\u5b9e\u6b63\u5728\u5bfb\u6c42\u9ad8\u7ea7 XML \u89e3\u6790\u529f\u80fd\uff0c\u90a3\u4e48\u5b83\u662f\u60a8\u5e94\u8be5\u5173\u6ce8\u7684\u4e0b\u4e00\u4e2a\u5e93\u3002</p> <p>If you like JSON but you\u2019re not a fan of XML, then check out xmltodict, which tries to bridge the gap between both data formats. As the name implies, the library can parse an XML document and represent it as a Python dictionary, which also happens to be the target data type for JSON documents in Python. This makes conversion between XML and JSON possible.</p> <p>Note</p> <p>Note: Dictionaries are made up of key-value pairs, while XML documents are inherently hierarchical, which may lead to some information loss during the conversion. On top of that, XML has attributes, comments, processing instructions, and other ways of defining metadata that aren\u2019t available in dictionaries.</p> <p>Unlike the rest of the XML parsers so far, this one expects either a Python string or a file-like object open for reading in binary mode:</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; xmltodict.parse(\"\"\"\\\n... &lt;svg viewBox=\"-105 -100 210 270\"&gt;\n...   &lt;!-- More content goes here... --&gt;\n... &lt;/svg&gt;\n... \"\"\")\nOrderedDict([('svg', OrderedDict([('@viewBox', '-105 -100 210 270')]))])\n\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     xmltodict.parse(file)\n...\nOrderedDict([('svg', ...)])\n</code></pre> <p>By default, the library returns an instance of the OrderedDict collection to retain element order. However, starting from Python 3.6, plain dictionaries also keep the insertion order. If you\u2019d like to work with regular dictionaries instead, then pass dict as the <code>dict_constructor</code> argument to the <code>parse()</code> function:</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     xmltodict.parse(file, dict_constructor=dict)\n...\n{'svg': ...}\n</code></pre> <p>Now, <code>parse()</code> returns a plain old dictionary with a familiar textual representation.</p> <p>To avoid name conflicts between XML elements and their attributes, the library automatically prefixes the latter with an <code>@</code> character. You may also ignore attributes completely by setting the <code>xml_attribs</code> flag appropriately:</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; # Rename attributes by default\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file)\n...     print([x for x in document[\"svg\"] if x.startswith(\"@\")])\n...\n['@xmlns', '@xmlns:inkscape', '@viewBox', '@width', '@height']\n\n&gt;&gt;&gt; # Ignore attributes when requested\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file, xml_attribs=False)\n...     print([x for x in document[\"svg\"] if x.startswith(\"@\")])\n...\n[]\n</code></pre> <p>Yet another piece of information that gets ignored by default is the XML namespace declaration. These are treated like regular attributes, while the corresponding prefixes become part of the tag name. However, you can expand, rename, or skip some of the namespaces if you want to:</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; # Ignore namespaces by default\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file)\n...     print(document.keys())\n...\nodict_keys(['svg'])\n\n&gt;&gt;&gt; # Process namespaces when requested\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file, process_namespaces=True)\n...     print(document.keys())\n...\nodict_keys(['http://www.w3.org/2000/svg:svg'])\n\n&gt;&gt;&gt; # Rename and skip some namespaces\n&gt;&gt;&gt; namespaces = {\n...     \"http://www.w3.org/2000/svg\": \"svg\",\n...     \"http://www.inkscape.org/namespaces/inkscape\": None,\n... }\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(\n...         file, process_namespaces=True, namespaces=namespaces\n...     )\n...     print(document.keys())\n...     print(\"custom\" in document[\"svg:svg\"])\n...     print(\"inkscape:custom\" in document[\"svg:svg\"])\n...\nodict_keys(['svg:svg'])\nTrue\nFalse\n</code></pre> <p>In the first example above, tag names don\u2019t include the XML namespace prefix. In the second example, they do because you requested to process them. Finally, in the third example, you collapsed the default namespace to svg while suppressing Inkscape\u2019s namespace with None.</p> <p>The default string representation of a Python dictionary might not be legible enough. To improve its presentation, you can pretty-print it or convert it to another format such as JSON or YAML:</p> <pre><code>&gt;&gt;&gt; import xmltodict\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file, dict_constructor=dict)\n...\n\n&gt;&gt;&gt; from pprint import pprint as pp\n&gt;&gt;&gt; pp(document)\n{'svg': {'@height': '270',\n         '@viewBox': '-105 -100 210 270',\n         '@width': '210',\n         '@xmlns': '&lt;http://www.w3.org/2000/svg&gt;',\n         '@xmlns:inkscape': '&lt;http://www.inkscape.org/namespaces/inkscape&gt;',\n         'defs': {'linearGradient': {'@id': 'skin',\n         \u22ee\n\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; print(json.dumps(document, indent=4, sort_keys=True))\n{\n    \"svg\": {\n        \"@height\": \"270\",\n        \"@viewBox\": \"-105 -100 210 270\",\n        \"@width\": \"210\",\n        \"@xmlns\": \"&lt;http://www.w3.org/2000/svg&gt;\",\n        \"@xmlns:inkscape\": \"&lt;http://www.inkscape.org/namespaces/inkscape&gt;\",\n        \"defs\": {\n            \"linearGradient\": {\n             \u22ee\n\n&gt;&gt;&gt; import yaml  # Install first with 'pip install PyYAML'\n&gt;&gt;&gt; print(yaml.dump(document))\nsvg:\n  '@height': '270'\n  '@viewBox': -105 -100 210 270\n  '@width': '210'\n  '@xmlns': &lt;http://www.w3.org/2000/svg&gt;\n  '@xmlns:inkscape': &lt;http://www.inkscape.org/namespaces/inkscape&gt;\n  defs:\n    linearGradient:\n\u22ee\n</code></pre> <p>The <code>xmltodict</code> library allows for converting the document the other way around\u2014that is, from a Python dictionary back to an XML string:</p> <pre><code>&gt;&gt;&gt; import xmltodict\n\n&gt;&gt;&gt; with open(\"smiley.svg\", \"rb\") as file:\n...     document = xmltodict.parse(file, dict_constructor=dict)\n...\n\n&gt;&gt;&gt; xmltodict.unparse(document)\n'&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\\n&lt;svg...'\n</code></pre> <p>The dictionary may come in handy as an intermediate format when converting data from JSON or YAML to XML, should there be such a need.</p> <p>There are a bunch more features in the <code>xmltodict</code> library, such as streaming, so feel free to explore them on your own. However, this library is a bit dated too. Besides, it\u2019s the next library that should be on your radar if you\u2019re really seeking advanced XML parsing features.</p>"},{"location":"xml/#lxml-\u4f7f\u7528\u7ecf\u8fc7\u6269\u5145\u7684-elementtree","title":"lxml: \u4f7f\u7528\u7ecf\u8fc7\u6269\u5145\u7684 ElementTree","text":"\u4e2d\u6587\u539f\u6587 <p>\u5982\u679c\u60a8\u60f3\u8981\u5c06\u6700\u4f73\u6027\u80fd\u3001\u6700\u5e7f\u6cdb\u7684\u529f\u80fd\u548c\u6700\u719f\u6089\u7684\u754c\u9762\u5168\u90e8\u5c01\u88c5\u5728\u4e00\u4e2a\u5305\u4e2d\uff0c\u90a3\u4e48\u5b89\u88c5 lxml \u5e76\u5fd8\u8bb0\u5176\u4f59\u7684\u89e3\u6790\u5e93\u3002 \u5b83\u662f C \u5e93 libxml2 \u548c libxslt \u7684 Python \u7ed1\u5b9a\uff0c \u5b83\u652f\u6301\u591a\u79cd\u6807\u51c6\uff0c\u5305\u62ec XPath\u3001XML Schema \u548c XSLT\u3002</p> <p>\u8be5\u5e93\u4e0e Python \u7684 ElementTree API \u517c\u5bb9\uff0c\u60a8\u5728\u672c\u6559\u7a0b\u524d\u9762\u5df2\u7ecf\u4e86\u89e3\u8fc7\u5b83\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ec5\u66ff\u6362\u5355\u4e2a\u5bfc\u5165\u8bed\u53e5\u6765\u91cd\u7528\u73b0\u6709\u4ee3\u7801\uff1a</p> <pre><code>import lxml.etree as ET\n</code></pre> <p>\u8fd9\u5c06\u4e3a\u60a8\u5e26\u6765\u5de8\u5927\u7684\u6027\u80fd\u63d0\u5347\u3002 \u6700\u91cd\u8981\u7684\u662f\uff0clxml \u5e93\u9644\u5e26\u4e86\u4e00\u7ec4\u5e7f\u6cdb\u7684\u529f\u80fd\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u4f7f\u7528\u65b9\u5f0f\u3002 \u4f8b\u5982\uff0c\u5b83\u5141\u8bb8\u60a8\u9488\u5bf9\u591a\u79cd\u6a21\u5f0f\u8bed\u8a00\u9a8c\u8bc1\u60a8\u7684 XML \u6587\u6863\uff0c\u5176\u4e2d\u4e4b\u4e00\u662f XML \u6a21\u5f0f\u5b9a\u4e49\uff1a</p> <pre><code>&gt;&gt;&gt; import lxml.etree as ET\n\n&gt;&gt;&gt; xml_schema = ET.XMLSchema(\n...     ET.fromstring(\"\"\"\\\n...         &lt;xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n...             &lt;xsd:element name=\"parent\"/&gt;\n...             &lt;xsd:complexType name=\"SomeType\"&gt;\n...                 &lt;xsd:sequence&gt;\n...                     &lt;xsd:element name=\"child\" type=\"xsd:string\"/&gt;\n...                 &lt;/xsd:sequence&gt;\n...             &lt;/xsd:complexType&gt;\n...         &lt;/xsd:schema&gt;\"\"\"))\n\n&gt;&gt;&gt; valid = ET.fromstring(\"&lt;parent&gt;&lt;child&gt;&lt;/child&gt;&lt;/parent&gt;\")\n&gt;&gt;&gt; invalid = ET.fromstring(\"&lt;child&gt;&lt;parent&gt;&lt;/parent&gt;&lt;/child&gt;\")\n\n&gt;&gt;&gt; xml_schema.validate(valid)\nTrue\n\n&gt;&gt;&gt; xml_schema.validate(invalid)\nFalse\n</code></pre> <p>Python \u6807\u51c6\u5e93\u4e2d\u7684 XML \u89e3\u6790\u5668\u90fd\u6ca1\u6709\u9a8c\u8bc1\u6587\u6863\u7684\u80fd\u529b\u3002 \u540c\u65f6\uff0c<code>lxml</code> \u5141\u8bb8\u60a8\u5b9a\u4e49 <code>XMLSchema</code> \u5bf9\u8c61\u5e76\u901a\u8fc7\u5b83\u8fd0\u884c\u6587\u6863\uff0c\u540c\u65f6\u4fdd\u6301\u4e0e ElementTree API \u7684\u5f88\u5927\u7a0b\u5ea6\u4e0a\u517c\u5bb9\u3002</p> <p>\u9664\u4e86 ElementTree API \u4e4b\u5916\uff0c<code>lxml</code> \u8fd8\u652f\u6301\u66ff\u4ee3\u7684 <code>lxml.objectify</code> \u63a5\u53e3\uff0c\u7a0d\u540e\u60a8\u5c06\u5728\u6570\u636e\u7ed1\u5b9a\u90e8\u5206\u4e2d\u4ecb\u7ecd\u8be5\u63a5\u53e3\u3002</p> <p>If you want the best performance, the broadest spectrum of functionality, and the most familiar interface all wrapped in one package, then install lxml and forget about the rest of the libraries. It\u2019s a Python binding for the C libraries libxml2 and libxslt, which support several standards, including XPath, XML Schema, and XSLT.</p> <p>The library is compatible with Python\u2019s ElementTree API, which you learned about earlier in this tutorial. That means you can reuse your existing code by replacing only a single import statement:</p> <pre><code>import lxml.etree as ET\n</code></pre> <p>This will give you a great performance boost. On top of that, the lxml library comes with an extensive set of features and provides different ways of using them. For example, it lets you validate your XML documents against several schema languages, one of which is the XML Schema Definition:</p> <pre><code>&gt;&gt;&gt; import lxml.etree as ET\n\n&gt;&gt;&gt; xml_schema = ET.XMLSchema(\n...     ET.fromstring(\"\"\"\\\n...         &lt;xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n...             &lt;xsd:element name=\"parent\"/&gt;\n...             &lt;xsd:complexType name=\"SomeType\"&gt;\n...                 &lt;xsd:sequence&gt;\n...                     &lt;xsd:element name=\"child\" type=\"xsd:string\"/&gt;\n...                 &lt;/xsd:sequence&gt;\n...             &lt;/xsd:complexType&gt;\n...         &lt;/xsd:schema&gt;\"\"\"))\n\n&gt;&gt;&gt; valid = ET.fromstring(\"&lt;parent&gt;&lt;child&gt;&lt;/child&gt;&lt;/parent&gt;\")\n&gt;&gt;&gt; invalid = ET.fromstring(\"&lt;child&gt;&lt;parent&gt;&lt;/parent&gt;&lt;/child&gt;\")\n\n&gt;&gt;&gt; xml_schema.validate(valid)\nTrue\n\n&gt;&gt;&gt; xml_schema.validate(invalid)\nFalse\n</code></pre> <p>None of the XML parsers in Python\u2019s standard library have the capability to validate documents. Meanwhile, lxml lets you define an XMLSchema object and run documents through it while remaining largely compatible with the ElementTree API.</p> <p>Besides the ElementTree API, lxml supports an alternative lxml.objectify interface, which you\u2019ll cover later in the data binding section.</p>"},{"location":"xml/#beautifulsoup-\u5904\u7406\u9519\u8bef\u683c\u5f0f\u7684-xml","title":"BeautifulSoup: \u5904\u7406\u9519\u8bef\u683c\u5f0f\u7684 XML","text":"\u4e2d\u6587\u539f\u6587 <p>\u60a8\u901a\u5e38\u4e0d\u4f1a\u4f7f\u7528\u6b64\u6bd4\u8f83\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5e93\u6765\u89e3\u6790 XML\uff0c\u56e0\u4e3a\u60a8\u4e3b\u8981\u9047\u5230\u7684\u662f \u7f51\u9875\u6293\u53d6 HTML \u6587\u6863\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4e5f\u80fd\u591f\u89e3\u6790 XML\u3002 BeautifulSoup \u9644\u5e26\u4e00\u4e2a \u53ef\u63d2\u62d4\u67b6\u6784\uff0c\u53ef\u8ba9\u60a8\u9009\u62e9\u5e95\u5c42\u89e3\u6790\u5668\u3002 \u524d\u9762\u4ecb\u7ecd\u7684 lxml \u5b9e\u9645\u4e0a\u662f\u5b98\u65b9\u6587\u6863\u63a8\u8350\u7684\uff0c\u4e5f\u662f\u76ee\u524d\u8be5\u5e93\u652f\u6301\u7684\u552f\u4e00 XML \u89e3\u6790\u5668\u3002</p> <p>\u6839\u636e\u60a8\u60f3\u8981\u89e3\u6790\u7684\u6587\u6863\u7c7b\u578b\u3001\u6240\u9700\u7684\u6548\u7387\u548c\u529f\u80fd\u53ef\u7528\u6027\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4ee5\u4e0b\u89e3\u6790\u5668\u4e4b\u4e00\uff1a</p> \u6587\u6863\u540d\u79f0 \u89e3\u6790\u5668 Python \u5305 \u901f\u5ea6 HTML \"html.parser\" - Moderate HTML \"html5lib\" html5lib Slow HTML \"lxml\" lxml Fast XML \"lxml-xml\" or \"xml\" lxml Fast <p>\u9664\u4e86\u901f\u5ea6\u4e4b\u5916\uff0c\u5404\u4e2a\u89e3\u6790\u5668\u4e4b\u95f4\u8fd8\u5b58\u5728\u660e\u663e\u7684\u5dee\u5f02\u3002 \u4f8b\u5982\uff0c\u5f53\u6d89\u53ca\u5230\u683c\u5f0f\u9519\u8bef\u7684\u5143\u7d20\u65f6\uff0c\u5176\u4e2d\u4e00\u4e9b\u6bd4\u5176\u4ed6\u66f4\u5bbd\u5bb9\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u66f4\u597d\u5730\u6a21\u62df\u7f51\u7edc\u6d4f\u89c8\u5668\u3002</p> <p>\u6709\u8da3\u7684\u4e8b\u5b9e</p> <p>\u8be5\u5e93\u7684\u540d\u79f0\u6307\u7684\u662ftag soup\uff0c\u5b83\u63cf\u8ff0\u4e86\u8bed\u6cd5\u6216\u7ed3\u6784\u4e0a\u4e0d\u6b63\u786e\u7684 HTML \u4ee3\u7801\u3002</p> <p>\u5047\u8bbe\u60a8\u5df2\u7ecf\u5c06 <code>lxml</code> \u548c <code>beautifulsoup4</code> \u5e93\u5b89\u88c5\u5230\u6d3b\u52a8\u7684\u865a\u62df\u73af\u5883\u4e2d\uff0c\u60a8\u53ef\u4ee5\u7acb\u5373\u5f00\u59cb\u89e3\u6790 XML \u6587\u6863\u3002 \u4f60\u53ea\u9700\u8981\u5bfc\u5165 <code>BeautifulSoup</code>\uff1a</p> <pre><code>from bs4 import BeautifulSoup\n\n# Parse XML from a file object\nwith open(\"smiley.svg\") as file:\n    soup = BeautifulSoup(file, features=\"lxml-xml\")\n\n# Parse XML from a Python string\nsoup = BeautifulSoup(\"\"\"\\\n&lt;svg viewBox=\"-105 -100 210 270\"&gt;\n  &lt;!-- More content goes here... --&gt;\n&lt;/svg&gt;\n\"\"\", features=\"lxml-xml\")\n</code></pre> <p>\u5982\u679c\u60a8\u4e0d\u5c0f\u5fc3\u6307\u5b9a\u4e86\u4e0d\u540c\u7684\u89e3\u6790\u5668\uff08\u4f8b\u5982 <code>lxml</code>\uff09\uff0c\u90a3\u4e48\u8be5\u5e93\u4f1a\u4e3a\u60a8\u5c06\u7f3a\u5c11\u7684 HTML \u6807\u8bb0\uff08\u4f8b\u5982 <code>&lt;body&gt;</code>\uff09\u6dfb\u52a0\u5230\u89e3\u6790\u7684\u6587\u6863\u4e2d\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u60a8\u60f3\u8981\u7684\uff0c\u56e0\u6b64\u5728\u6307\u5b9a\u89e3\u6790\u5668\u540d\u79f0\u65f6\u8981\u5c0f\u5fc3\u3002</p> <p>BeautifulSoup \u662f\u4e00\u4e2a\u7528\u4e8e\u89e3\u6790 XML \u6587\u6863\u7684\u5f3a\u5927\u5de5\u5177\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5904\u7406\u65e0\u6548\u5185\u5bb9\uff0c\u5e76\u4e14\u5b83\u5177\u6709\u7528\u4e8e\u63d0\u53d6\u4fe1\u606f\u7684\u4e30\u5bcc\u7684 API\u3002 \u770b\u770b\u5b83\u5982\u4f55\u5904\u7406\u9519\u8bef\u5d4c\u5957\u7684\u6807\u7b7e\u3001\u7981\u6b62\u7684\u5b57\u7b26\u548c\u9519\u8bef\u653e\u7f6e\u7684\u6587\u672c\uff1a</p> <pre><code>&gt;&gt;&gt; from bs4 import BeautifulSoup\n\n&gt;&gt;&gt; soup = BeautifulSoup(\"\"\"\\\n... &lt;parent&gt;\n...     &lt;child&gt;Forbidden &lt; character &lt;/parent&gt;\n...     &lt;/child&gt;\n... ignored\n... \"\"\", features=\"lxml-xml\")\n\n&gt;&gt;&gt; print(soup.prettify())\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;parent&gt;\n &lt;child&gt;\n  Forbidden\n &lt;/child&gt;\n&lt;/parent&gt;\n</code></pre> <p>\u4e0d\u540c\u7684\u89e3\u6790\u5668\u4f1a\u5f15\u53d1\u5f02\u5e38\uff0c\u5e76\u5728\u68c0\u6d4b\u5230\u6587\u6863\u5b58\u5728\u95ee\u9898\u65f6\u7acb\u5373\u653e\u5f03\u3002 \u5728\u8fd9\u91cc\uff0c\u5b83\u4e0d\u4ec5\u5ffd\u7565\u4e86\u8fd9\u4e9b\u95ee\u9898\uff0c\u800c\u4e14\u8fd8\u627e\u5230\u4e86\u89e3\u51b3\u5176\u4e2d\u4e00\u4e9b\u95ee\u9898\u7684\u660e\u667a\u65b9\u6cd5\u3002 \u5143\u7d20\u73b0\u5728\u5df2\u6b63\u786e\u5d4c\u5957\u5e76\u4e14\u6ca1\u6709\u65e0\u6548\u5185\u5bb9\u3002</p> <p>\u4f7f\u7528 BeautifulSoup \u5b9a\u4f4d\u5143\u7d20\u7684\u65b9\u6cd5\u6709\u592a\u591a\uff0c\u8fd9\u91cc\u65e0\u6cd5\u4e00\u4e00\u6db5\u76d6\u3002 \u901a\u5e38\uff0c\u60a8\u4f1a\u5728 soup \u5143\u7d20\u4e0a\u8c03\u7528 <code>.find()</code> \u6216 <code>.findall()</code> \u7684\u53d8\u4f53\uff1a</p> <pre><code>&gt;&gt;&gt; from bs4 import BeautifulSoup\n\n&gt;&gt;&gt; with open(\"smiley.svg\") as file:\n...     soup = BeautifulSoup(file, features=\"lxml-xml\")\n...\n\n&gt;&gt;&gt; soup.find_all(\"ellipse\", limit=1)\n[&lt;ellipse cx=\"-20\" cy=\"-10\" fill=\"black\" rx=\"6\" ry=\"8\" stroke=\"none\"/&gt;]\n\n&gt;&gt;&gt; soup.find(x=42)\n&lt;inkscape:custom inkscape:z=\"555\" x=\"42\"&gt;Some value&lt;/inkscape:custom&gt;\n\n&gt;&gt;&gt; soup.find(\"stop\", {\"stop-color\": \"gold\"})\n&lt;stop offset=\"75%\" stop-color=\"gold\" stop-opacity=\"1.0\"/&gt;\n\n&gt;&gt;&gt; soup.find(text=lambda x: \"value\" in x).parent\n&lt;inkscape:custom inkscape:z=\"555\" x=\"42\"&gt;Some value&lt;/inkscape:custom&gt;\n</code></pre> <p><code>limit</code> \u53c2\u6570\u7c7b\u4f3c\u4e8e MySQL \u4e2d\u7684 LIMIT \u5b50\u53e5\uff0c\u5b83\u53ef\u4ee5\u8ba9\u60a8\u51b3\u5b9a\u6700\u591a\u5e0c\u671b\u63a5\u6536\u591a\u5c11\u4e2a\u7ed3\u679c\u3002 \u5b83\u5c06\u8fd4\u56de\u6307\u5b9a\u6570\u91cf\u7684\u7ed3\u679c\u6216\u66f4\u5c11\u3002 \u8fd9\u5e76\u975e\u5de7\u5408\u3002 \u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u641c\u7d22\u65b9\u6cd5\u89c6\u4e3a\u5177\u6709\u5f3a\u5927\u8fc7\u6ee4\u5668\u7684\u7b80\u5355\u67e5\u8be2\u8bed\u8a00\u3002</p> <p>\u641c\u7d22\u754c\u9762\u975e\u5e38\u7075\u6d3b\uff0c\u4f46\u8d85\u51fa\u4e86\u672c\u6559\u7a0b\u7684\u8303\u56f4\u3002 \u60a8\u53ef\u4ee5\u67e5\u770b\u5e93\u7684\u6587\u6863\u4e86\u89e3\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u6216\u9605\u8bfb\u53e6\u4e00\u4e2a\u5173\u4e8ePython\u4e2d\u7684\u6d89\u53ca\u57fa\u4e8eBeautifulSoup\u8fdb\u884c\u7f51\u9875\u6293\u53d6\u7684\u6559\u7a0b  </p> <p>You won\u2019t typically use the last library in this comparison for parsing XML since you mostly encounter it web scraping HTML documents. That said, it\u2019s capable of parsing XML just as well. BeautifulSoup comes with a pluggable architecture that lets you choose the underlying parser. The lxml one described earlier is actually recommended by the official documentation and is currently the only XML parser supported by the library.</p> <p>Depending on the kind of documents you\u2019ll want to parse, the desired efficiency, and feature availability, you can select one of these parsers:</p> Document Type Parser Name Python  Library Speed HTML \"html.parser\" - Moderate HTML \"html5lib\" html5lib Slow HTML \"lxml\" lxml Fast XML \"lxml-xml\" or \"xml\" lxml Fast <p>Other than speed, there are noticeable differences between the individual parsers. For example, some of them are more forgiving than others when it comes to malformed elements, while others emulate web browsers better.</p> <p>Fun Fact</p> <p>The library\u2019s name refers to the tag soup, which describes syntactically or structurally incorrect HTML code.</p> <p>Assuming you\u2019ve already installed the lxml and beautifulsoup4 libraries into your active virtual environment, you can start parsing XML documents right away. You only need to import BeautifulSoup:</p> <pre><code>from bs4 import BeautifulSoup\n\n# Parse XML from a file object\nwith open(\"smiley.svg\") as file:\n    soup = BeautifulSoup(file, features=\"lxml-xml\")\n\n# Parse XML from a Python string\nsoup = BeautifulSoup(\"\"\"\\\n&lt;svg viewBox=\"-105 -100 210 270\"&gt;\n  &lt;!-- More content goes here... --&gt;\n&lt;/svg&gt;\n\"\"\", features=\"lxml-xml\")\n</code></pre> <p>If you accidentally specified a different parser, say lxml, then the library would add missing HTML tags such as  to the parsed document for you. That probably isn\u2019t what you intended in this case, so be careful when specifying the parser name. <p>BeautifulSoup is a powerful tool for parsing XML documents because it can handle invalid content and it has a rich API for extracting information. Have a look at how it copes with incorrectly nested tags, forbidden characters, and badly placed text:</p> <pre><code>&gt;&gt;&gt; from bs4 import BeautifulSoup\n\n&gt;&gt;&gt; soup = BeautifulSoup(\"\"\"\\\n... &lt;parent&gt;\n...     &lt;child&gt;Forbidden &lt; character &lt;/parent&gt;\n...     &lt;/child&gt;\n... ignored\n... \"\"\", features=\"lxml-xml\")\n\n&gt;&gt;&gt; print(soup.prettify())\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;parent&gt;\n &lt;child&gt;\n  Forbidden\n &lt;/child&gt;\n&lt;/parent&gt;\n</code></pre> <p>A different parser would raise an exception and surrender as soon as it detected something wrong with the document. Here, not only did it ignore the problems, but it also figured out sensible ways to fix some of them. The elements are properly nested now and have no invalid content.</p> <p>There are way too many methods of locating elements with BeautifulSoup to cover them all here. Usually, you\u2019ll call a variant of <code>.find()</code> or <code>.findall()</code> on the soup element:</p> <pre><code>&gt;&gt;&gt; from bs4 import BeautifulSoup\n\n&gt;&gt;&gt; with open(\"smiley.svg\") as file:\n...     soup = BeautifulSoup(file, features=\"lxml-xml\")\n...\n\n&gt;&gt;&gt; soup.find_all(\"ellipse\", limit=1)\n[&lt;ellipse cx=\"-20\" cy=\"-10\" fill=\"black\" rx=\"6\" ry=\"8\" stroke=\"none\"/&gt;]\n\n&gt;&gt;&gt; soup.find(x=42)\n&lt;inkscape:custom inkscape:z=\"555\" x=\"42\"&gt;Some value&lt;/inkscape:custom&gt;\n\n&gt;&gt;&gt; soup.find(\"stop\", {\"stop-color\": \"gold\"})\n&lt;stop offset=\"75%\" stop-color=\"gold\" stop-opacity=\"1.0\"/&gt;\n\n&gt;&gt;&gt; soup.find(text=lambda x: \"value\" in x).parent\n&lt;inkscape:custom inkscape:z=\"555\" x=\"42\"&gt;Some value&lt;/inkscape:custom&gt;\n</code></pre> <p>The <code>limit</code> parameter is similar to the LIMIT clause in MySQL, which lets you decide how many results you want to receive at most. It will return the specified number of results or fewer. That\u2019s no coincidence. You can think of these search methods as being a simple query language with powerful filters.</p> <p>The search interface is very flexible but is outside the scope of this tutorial. You can check the library\u2019s documentation for more details or read yet another tutorial about web scraping in Python that touches on BeautifulSoup.</p>"},{"location":"xml/#\u5c06-xml-\u6570\u636e\u7ed1\u5b9a\u5230-python-\u5bf9\u8c61","title":"\u5c06 XML \u6570\u636e\u7ed1\u5b9a\u5230 Python \u5bf9\u8c61","text":"\u4e2d\u6587\u539f\u6587 <p>\u5047\u8bbe\u60a8\u60f3\u901a\u8fc7\u4f4e\u5ef6\u8fdf WebSocket \u8fde\u63a5\u4f7f\u7528\u5b9e\u65f6\u6570\u636e\u6e90\uff0c\u5e76\u4ee5 XML \u683c\u5f0f\u4ea4\u6362\u6d88\u606f\u3002 \u51fa\u4e8e\u672c\u6f14\u793a\u7684\u76ee\u7684\uff0c\u60a8\u5c06\u4f7f\u7528 Web \u6d4f\u89c8\u5668\u5c06\u9f20\u6807\u548c\u952e\u76d8\u4e8b\u4ef6\u5e7f\u64ad\u5230 Python \u670d\u52a1\u5668\u3002 \u60a8\u5c06\u6784\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u534f\u8bae\u5e76\u4f7f\u7528\u6570\u636e\u7ed1\u5b9a\u5c06 XML \u8f6c\u6362\u4e3a\u672c\u673a Python \u5bf9\u8c61\u3002</p> <p>\u6570\u636e\u7ed1\u5b9a\u80cc\u540e\u7684\u60f3\u6cd5\u662f\u4ee5\u58f0\u660e\u65b9\u5f0f\u5b9a\u4e49\u6570\u636e\u6a21\u578b\uff0c\u540c\u65f6\u8ba9\u7a0b\u5e8f\u5f04\u6e05\u695a\u5982\u4f55\u5728\u8fd0\u884c\u65f6\u4ece XML \u4e2d\u63d0\u53d6\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u3002 \u5982\u679c\u60a8\u66fe\u7ecf\u4f7f\u7528\u8fc7 Django \u6a21\u578b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6982\u5ff5\u542c\u8d77\u6765\u5e94\u8be5\u5f88\u719f\u6089\u3002</p> <p>\u9996\u5148\uff0c\u4ece\u8bbe\u8ba1\u6570\u636e\u6a21\u578b\u5f00\u59cb\u3002 \u5b83\u5c06\u5305\u542b\u4e24\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6\uff1a</p> <ol> <li>\u952e\u76d8\u4e8b\u4ef6</li> <li>\u9f20\u6807\u4e8b\u4ef6</li> </ol> <p>\u6bcf\u4e2a\u90fd\u53ef\u4ee5\u4ee3\u8868\u4e00\u4e9b\u4e13\u95e8\u7684\u5b50\u7c7b\u578b\uff0c\u4f8b\u5982\u952e\u76d8\u7684\u6309\u952e\u6216\u6309\u952e\u91ca\u653e\u4ee5\u53ca\u9f20\u6807\u7684\u5355\u51fb\u6216\u53f3\u952e\u5355\u51fb\u3002 \u4ee5\u4e0b\u662f\u54cd\u5e94\u6309\u4f4f\u201cShift+2\u201d\u7ec4\u5408\u952e\u800c\u751f\u6210\u7684\u793a\u4f8b XML \u6d88\u606f\uff1a</p> <pre><code>&lt;KeyboardEvent&gt;\n    &lt;Type&gt;keydown&lt;/Type&gt;\n    &lt;Timestamp&gt;253459.17999999982&lt;/Timestamp&gt;\n    &lt;Key&gt;\n        &lt;Code&gt;Digit2&lt;/Code&gt;\n        &lt;Unicode&gt;@&lt;/Unicode&gt;\n    &lt;/Key&gt;\n    &lt;Modifiers&gt;\n        &lt;Alt&gt;false&lt;/Alt&gt;\n        &lt;Ctrl&gt;false&lt;/Ctrl&gt;\n        &lt;Shift&gt;true&lt;/Shift&gt;\n        &lt;Meta&gt;false&lt;/Meta&gt;\n    &lt;/Modifiers&gt;\n&lt;/KeyboardEvent&gt;\n</code></pre> <p>\u8be5\u6d88\u606f\u5305\u542b\u7279\u5b9a\u7684\u952e\u76d8\u4e8b\u4ef6\u7c7b\u578b\u3001\u65f6\u95f4\u6233\u3001\u952e\u7801\u53ca\u5176 Unicode\uff0c\u4ee5\u53ca\u4fee\u9970\u952e\uff0c\u4f8b\u5982\u201cAlt\u201d\u3001\u201c Ctrl<code>\u6216</code>Shift`\u3002 \u5143\u952e\u901a\u5e38\u662f\u201cWin\u201d\u6216\u201cCmd\u201d\u952e\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u60a8\u7684\u952e\u76d8\u5e03\u5c40\u3002</p> <p>\u540c\u6837\uff0c\u9f20\u6807\u4e8b\u4ef6\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>&lt;MouseEvent&gt;\n    &lt;Type&gt;mousemove&lt;/Type&gt;\n    &lt;Timestamp&gt;52489.07000000145&lt;/Timestamp&gt;\n    &lt;Cursor&gt;\n        &lt;Delta x=\"-4\" y=\"8\"/&gt;\n        &lt;Window x=\"171\" y=\"480\"/&gt;\n        &lt;Screen x=\"586\" y=\"690\"/&gt;\n    &lt;/Cursor&gt;\n    &lt;Buttons bitField=\"0\"/&gt;\n    &lt;Modifiers&gt;\n        &lt;Alt&gt;false&lt;/Alt&gt;\n        &lt;Ctrl&gt;true&lt;/Ctrl&gt;\n        &lt;Shift&gt;false&lt;/Shift&gt;\n        &lt;Meta&gt;false&lt;/Meta&gt;\n    &lt;/Modifiers&gt;\n&lt;/MouseEvent&gt;\n</code></pre> <p>\u7136\u800c\uff0c\u4e0d\u662f\u6309\u952e\uff0c\u800c\u662f\u9f20\u6807\u5149\u6807\u4f4d\u7f6e\u548c\u7f16\u7801\u9f20\u6807\u6309\u94ae\u7684\u4f4d\u5b57\u6bb5 \u5728\u4e8b\u4ef6\u671f\u95f4\u6309\u4e0b\u3002 \u4f4d\u5b57\u6bb5\u4e3a\u96f6\u8868\u793a\u6ca1\u6709\u6309\u4e0b\u4efb\u4f55\u6309\u94ae\u3002</p> <p>\u4e00\u65e6\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5\uff0c\u5b83\u5c06\u5f00\u59cb\u5411\u670d\u52a1\u5668\u53d1\u9001\u5927\u91cf\u6d88\u606f\u3002 \u8be5\u534f\u8bae\u4e0d\u5305\u542b\u4efb\u4f55\u63e1\u624b\u3001\u5fc3\u8df3\u3001\u6b63\u5e38\u5173\u95ed\u3001\u4e3b\u9898\u8ba2\u9605\u6216\u63a7\u5236\u6d88\u606f\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u5e76\u7528\u4e0d\u5230 50 \u884c\u4ee3\u7801\u521b\u5efa WebSocket \u5bf9\u8c61\uff0c\u5728 JavaScript \u4e2d\u8fdb\u884c\u7f16\u7801\u3002</p> <p>\u7136\u800c\uff0c\u5b9e\u73b0\u5ba2\u6237\u7aef\u5e76\u4e0d\u662f\u672c\u6b21\u7ec3\u4e60\u7684\u91cd\u70b9\u3002 \u7531\u4e8e\u60a8\u4e0d\u9700\u8981\u7406\u89e3\u5b83\uff0c\u56e0\u6b64\u53ea\u9700\u5c55\u5f00\u4e0b\u9762\u7684\u53ef\u6298\u53e0\u90e8\u5206\u5373\u53ef\u663e\u793a\u5e26\u6709\u5d4c\u5165\u5f0f JavaScript \u7684 HTML \u4ee3\u7801\uff0c\u5e76\u5c06\u5176\u4fdd\u5b58\u5728\u60a8\u559c\u6b22\u7684\u6587\u4ef6\u4e2d\u3002</p> JavaScript \u548c HTML \u4e2d\u7684 WebSocket \u5ba2\u6237\u7aef <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Real-Time Data Feed&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script&gt;\n        const ws = new WebSocket(\"ws://localhost:8000\")\n        ws.onopen = event =&gt; {\n            [\"keydown\", \"keyup\"].forEach(name =&gt;\n                window.addEventListener(name, event =&gt;\n                    ws.send(`\\\n&lt;KeyboardEvent&gt;\n    &lt;Type&gt;${event.type}&lt;/Type&gt;\n    &lt;Timestamp&gt;${event.timeStamp}&lt;/Timestamp&gt;\n    &lt;Key&gt;\n        &lt;Code&gt;${event.code}&lt;/Code&gt;\n        &lt;Unicode&gt;${event.key}&lt;/Unicode&gt;\n    &lt;/Key&gt;\n    &lt;Modifiers&gt;\n        &lt;Alt&gt;${event.altKey}&lt;/Alt&gt;\n        &lt;Ctrl&gt;${event.ctrlKey}&lt;/Ctrl&gt;\n        &lt;Shift&gt;${event.shiftKey}&lt;/Shift&gt;\n        &lt;Meta&gt;${event.metaKey}&lt;/Meta&gt;\n    &lt;/Modifiers&gt;\n&lt;/KeyboardEvent&gt;`))\n            );\n            [\"mousedown\", \"mouseup\", \"mousemove\"].forEach(name =&gt;\n                window.addEventListener(name, event =&gt;\n                    ws.send(`\\\n&lt;MouseEvent&gt;\n    &lt;Type&gt;${event.type}&lt;/Type&gt;\n    &lt;Timestamp&gt;${event.timeStamp}&lt;/Timestamp&gt;\n    &lt;Cursor&gt;\n        &lt;Delta x=\"${event.movementX}\" y=\"${event.movementY}\"/&gt;\n        &lt;Window x=\"${event.clientX}\" y=\"${event.clientY}\"/&gt;\n        &lt;Screen x=\"${event.screenX}\" y=\"${event.screenY}\"/&gt;\n    &lt;/Cursor&gt;\n    &lt;Buttons bitField=\"${event.buttons}\"/&gt;\n    &lt;Modifiers&gt;\n        &lt;Alt&gt;${event.altKey}&lt;/Alt&gt;\n        &lt;Ctrl&gt;${event.ctrlKey}&lt;/Ctrl&gt;\n        &lt;Shift&gt;${event.shiftKey}&lt;/Shift&gt;\n        &lt;Meta&gt;${event.metaKey}&lt;/Meta&gt;\n    &lt;/Modifiers&gt;\n&lt;/MouseEvent&gt;`))\n            )\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u4fa6\u542c\u7aef\u53e3 8000 \u7684\u672c\u5730\u670d\u52a1\u5668\u3002\u5c06 HTML \u4ee3\u7801\u4fdd\u5b58\u5230\u6587\u4ef6\u4e2d\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u60a8\u559c\u6b22\u7684 Web \u6d4f\u89c8\u5668\u6253\u5f00\u5b83\u3002 \u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5b9e\u73b0\u670d\u52a1\u5668\u3002</p> <p>Python \u4e0d\u652f\u6301 WebSocket\uff0c\u4f46\u60a8\u53ef\u4ee5\u5c06 websockets \u5e93\u5b89\u88c5\u5230\u6d3b\u52a8\u865a\u62df\u73af\u5883\u4e2d\u3002 \u7a0d\u540e\u60a8\u8fd8\u9700\u8981 lxml\uff0c\u56e0\u6b64\u73b0\u5728\u662f\u4e00\u6b21\u6027\u5b89\u88c5\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u7684\u597d\u65f6\u673a\uff1a</p> <pre><code>python -m pip install websockets lxml\n</code></pre> <p>\u6700\u540e\uff0c\u60a8\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u6700\u5c0f\u7684\u5f02\u6b65 Web \u670d\u52a1\u5668\uff1a</p> <pre><code># server.py\n\nimport asyncio\nimport websockets\n\nasync def handle_connection(websocket, path):\n    async for message in websocket:\n        print(message)\n\nif __name__ == \"__main__\":\n    future = websockets.serve(handle_connection, \"localhost\", 8000)\n    asyncio.get_event_loop().run_until_complete(future)\n    asyncio.get_event_loop().run_forever()\n</code></pre> <p>\u5f53\u60a8\u542f\u52a8\u670d\u52a1\u5668\u5e76\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u4fdd\u5b58\u7684 HTML \u6587\u4ef6\u65f6\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u6807\u51c6\u8f93\u51fa\u4e2d\u51fa\u73b0 XML \u6d88\u606f\uff0c\u4ee5\u54cd\u5e94\u60a8\u7684\u9f20\u6807\u79fb\u52a8\u548c\u6309\u952e\u64cd\u4f5c\u3002 \u60a8\u53ef\u4ee5\u5728\u591a\u4e2a\u9009\u9879\u5361\u751a\u81f3\u591a\u4e2a\u6d4f\u89c8\u5668\u4e2d\u540c\u65f6\u6253\u5f00\u5ba2\u6237\u7aef\uff01</p> <p>Say you want to consume a real-time data feed over a low-latency WebSocket connection with messages exchanged in XML format. For the purposes of this presentation, you\u2019re going to use a web browser to broadcast your mouse and keyboard events to the Python server. You\u2019ll build a custom protocol and use data binding to translate XML into native Python objects.</p> <p>The idea behind data binding is to define a data model declaratively while letting the program figure out how to extract a valuable piece of information from the XML at runtime. If you\u2019ve ever worked with Django models, then this concept should sound familiar.</p> <p>First, begin by designing your data model. It\u2019s going to consist of two types of events:</p> <ol> <li>KeyboardEvent</li> <li>MouseEvent</li> </ol> <p>Each can represent a few specialized subtypes, like a keypress or key release for the keyboard and a click or right-click for the mouse. Here\u2019s a sample XML message produced in response to holding down the <code>Shift+2</code> key combination:</p> <pre><code>&lt;KeyboardEvent&gt;\n    &lt;Type&gt;keydown&lt;/Type&gt;\n    &lt;Timestamp&gt;253459.17999999982&lt;/Timestamp&gt;\n    &lt;Key&gt;\n        &lt;Code&gt;Digit2&lt;/Code&gt;\n        &lt;Unicode&gt;@&lt;/Unicode&gt;\n    &lt;/Key&gt;\n    &lt;Modifiers&gt;\n        &lt;Alt&gt;false&lt;/Alt&gt;\n        &lt;Ctrl&gt;false&lt;/Ctrl&gt;\n        &lt;Shift&gt;true&lt;/Shift&gt;\n        &lt;Meta&gt;false&lt;/Meta&gt;\n    &lt;/Modifiers&gt;\n&lt;/KeyboardEvent&gt;\n</code></pre> <p>This message contains a specific keyboard event type, a timestamp, the key code and its Unicode, as well as the modifier keys such as <code>Alt</code>, <code>Ctrl</code>, or <code>Shift</code>. The meta key is usually the <code>Win</code> or <code>Cmd</code> key, depending on your keyboard layout.</p> <p>Similarly, a mouse event could look like this:</p> <pre><code>&lt;MouseEvent&gt;\n    &lt;Type&gt;mousemove&lt;/Type&gt;\n    &lt;Timestamp&gt;52489.07000000145&lt;/Timestamp&gt;\n    &lt;Cursor&gt;\n        &lt;Delta x=\"-4\" y=\"8\"/&gt;\n        &lt;Window x=\"171\" y=\"480\"/&gt;\n        &lt;Screen x=\"586\" y=\"690\"/&gt;\n    &lt;/Cursor&gt;\n    &lt;Buttons bitField=\"0\"/&gt;\n    &lt;Modifiers&gt;\n        &lt;Alt&gt;false&lt;/Alt&gt;\n        &lt;Ctrl&gt;true&lt;/Ctrl&gt;\n        &lt;Shift&gt;false&lt;/Shift&gt;\n        &lt;Meta&gt;false&lt;/Meta&gt;\n    &lt;/Modifiers&gt;\n&lt;/MouseEvent&gt;\n</code></pre> <p>Instead of the key, however, there\u2019s the mouse cursor position and a bit field encoding the mouse buttons pressed during the event. A bit field of zero indicates that no button was pressed.</p> <p>As soon as a client makes the connection, it will start flooding the server with messages. The protocol won\u2019t consist of any handshakes, heartbeats, graceful shutdowns, topic subscriptions, or control messages. You can code this in JavaScript by registering event handlers and creating a WebSocket object in less than fifty lines of code.</p> <p>However, implementing the client isn\u2019t the point of this exercise. Since you don\u2019t need to understand it, just expand the collapsible section below to reveal the HTML code with embedded JavaScript and save it in a file named whatever you like.</p> A WebSocket Client in JavaScript and HTML <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Real-Time Data Feed&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script&gt;\n        const ws = new WebSocket(\"ws://localhost:8000\")\n        ws.onopen = event =&gt; {\n            [\"keydown\", \"keyup\"].forEach(name =&gt;\n                window.addEventListener(name, event =&gt;\n                    ws.send(`\\\n&lt;KeyboardEvent&gt;\n    &lt;Type&gt;${event.type}&lt;/Type&gt;\n    &lt;Timestamp&gt;${event.timeStamp}&lt;/Timestamp&gt;\n    &lt;Key&gt;\n        &lt;Code&gt;${event.code}&lt;/Code&gt;\n        &lt;Unicode&gt;${event.key}&lt;/Unicode&gt;\n    &lt;/Key&gt;\n    &lt;Modifiers&gt;\n        &lt;Alt&gt;${event.altKey}&lt;/Alt&gt;\n        &lt;Ctrl&gt;${event.ctrlKey}&lt;/Ctrl&gt;\n        &lt;Shift&gt;${event.shiftKey}&lt;/Shift&gt;\n        &lt;Meta&gt;${event.metaKey}&lt;/Meta&gt;\n    &lt;/Modifiers&gt;\n&lt;/KeyboardEvent&gt;`))\n            );\n            [\"mousedown\", \"mouseup\", \"mousemove\"].forEach(name =&gt;\n                window.addEventListener(name, event =&gt;\n                    ws.send(`\\\n&lt;MouseEvent&gt;\n    &lt;Type&gt;${event.type}&lt;/Type&gt;\n    &lt;Timestamp&gt;${event.timeStamp}&lt;/Timestamp&gt;\n    &lt;Cursor&gt;\n        &lt;Delta x=\"${event.movementX}\" y=\"${event.movementY}\"/&gt;\n        &lt;Window x=\"${event.clientX}\" y=\"${event.clientY}\"/&gt;\n        &lt;Screen x=\"${event.screenX}\" y=\"${event.screenY}\"/&gt;\n    &lt;/Cursor&gt;\n    &lt;Buttons bitField=\"${event.buttons}\"/&gt;\n    &lt;Modifiers&gt;\n        &lt;Alt&gt;${event.altKey}&lt;/Alt&gt;\n        &lt;Ctrl&gt;${event.ctrlKey}&lt;/Ctrl&gt;\n        &lt;Shift&gt;${event.shiftKey}&lt;/Shift&gt;\n        &lt;Meta&gt;${event.metaKey}&lt;/Meta&gt;\n    &lt;/Modifiers&gt;\n&lt;/MouseEvent&gt;`))\n            )\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The client connects to a local server listening on port 8000. Once you save the HTML code in a file, you\u2019ll be able to open it with your favorite web browser. But before that, you\u2019ll need to implement the server.</p> <p>Python doesn\u2019t come with WebSocket support, but you can install the websockets library into your active virtual environment. You\u2019re also going to need lxml later, so it\u2019s a good moment to install both dependencies in one go:</p> <pre><code>python -m pip install websockets lxml\n</code></pre> <p>Finally, you can scaffold a minimal asynchronous web server:</p> <pre><code># server.py\n\nimport asyncio\nimport websockets\n\nasync def handle_connection(websocket, path):\n    async for message in websocket:\n        print(message)\n\nif __name__ == \"__main__\":\n    future = websockets.serve(handle_connection, \"localhost\", 8000)\n    asyncio.get_event_loop().run_until_complete(future)\n    asyncio.get_event_loop().run_forever()\n</code></pre> <p>When you start the server and open the saved HTML file in a web browser, you should see XML messages appear in the standard output in response to your mouse moves and key presses. You can open the client in multiple tabs or even multiple browsers simultaneously!</p>"},{"location":"xml/#\u4f7f\u7528-xpath-\u8868\u8fbe\u5f0f\u5b9a\u4e49\u6a21\u578b","title":"\u4f7f\u7528 XPath \u8868\u8fbe\u5f0f\u5b9a\u4e49\u6a21\u578b","text":"\u4e2d\u6587\u539f\u6587 <p>\u73b0\u5728\uff0c\u60a8\u7684\u6d88\u606f\u4ee5\u7eaf\u5b57\u7b26\u4e32\u683c\u5f0f\u5230\u8fbe\u3002 \u5904\u7406\u8fd9\u79cd\u683c\u5f0f\u7684\u6d88\u606f\u4e0d\u592a\u65b9\u4fbf\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>lxml.objectify</code> \u6a21\u5757\u901a\u8fc7\u4e00\u884c\u4ee3\u7801\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u590d\u5408 Python \u5bf9\u8c61\uff1a</p> <pre><code># server.py\n\nimport asyncio\nimport websockets\nimport lxml.objectify\n\nasync def handle_connection(websocket, path):\n    async for message in websocket:\n        try:\n            xml = lxml.objectify.fromstring(message)\n        except SyntaxError:\n            print(\"Malformed XML message:\", repr(message))\n        else:\n            if xml.tag == \"KeyboardEvent\":\n                if xml.Type == \"keyup\":\n                    print(\"Key:\", xml.Key.Unicode)\n            elif xml.tag == \"MouseEvent\":\n                screen = xml.Cursor.Screen\n                print(\"Mouse:\", screen.get(\"x\"), screen.get(\"y\"))\n            else:\n                print(\"Unrecognized event type\")\n\n# ...\n</code></pre> <p>\u53ea\u8981XML\u89e3\u6790\u6210\u529f\uff0c\u60a8\u5c31\u53ef\u4ee5\u68c0\u67e5\u6839\u5143\u7d20\u7684\u5e38\u7528\u5c5e\u6027\uff0c\u4f8b\u5982\u6807\u7b7e\u540d\u79f0\u3001\u5c5e\u6027\u3001\u5185\u90e8\u6587\u672c\u7b49\u3002 \u60a8\u5c06\u80fd\u591f\u4f7f\u7528\u70b9\u8fd0\u7b97\u7b26\u6df1\u5165\u6d4f\u89c8\u5143\u7d20\u6811\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8be5\u5e93\u5c06\u8bc6\u522b\u5408\u9002\u7684 Python \u6570\u636e\u7c7b\u578b\u5e76\u4e3a\u60a8\u8f6c\u6362\u8be5\u503c\u3002</p> <p>\u4fdd\u5b58\u8fd9\u4e9b\u66f4\u6539\u5e76\u91cd\u65b0\u542f\u52a8\u670d\u52a1\u5668\u540e\uff0c\u60a8\u9700\u8981\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u4ee5\u5efa\u7acb\u65b0\u7684 WebSocket \u8fde\u63a5\u3002 \u4ee5\u4e0b\u662f\u4fee\u6539\u540e\u7684\u7a0b\u5e8f\u7684\u793a\u4f8b\u8f93\u51fa\uff1a</p> <pre><code>$ python server.py\nMouse: 820 121\nMouse: 820 122\nMouse: 820 123\nMouse: 820 124\nMouse: 820 125\nKey: a\nMouse: 820 125\nMouse: 820 125\nKey: a\nKey: A\nKey: Shift\nMouse: 821 125\nMouse: 821 125\nMouse: 820 123\n\u22ee\n</code></pre> <p>\u6709\u65f6\uff0cXML \u53ef\u80fd\u5305\u542b\u4e0d\u662f\u6709\u6548 Python \u6807\u8bc6\u7b26\u7684\u6807\u8bb0\u540d\u79f0\uff0c\u6216\u8005\u60a8\u53ef\u80fd\u5e0c\u671b\u8c03\u6574\u6d88\u606f\u7ed3\u6784\u4ee5\u9002\u5e94\u60a8\u7684\u6570\u636e\u6a21\u578b\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u6709\u8da3\u7684\u9009\u62e9\u662f\u4f7f\u7528\u63cf\u8ff0\u7b26\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6a21\u578b\u7c7b\uff0c\u58f0\u660e\u5982\u4f55\u4f7f\u7528 XPath \u8868\u8fbe\u5f0f\u67e5\u627e\u4fe1\u606f\u3002 \u8fd9\u90e8\u5206\u5f00\u59cb\u7c7b\u4f3c\u4e8e Django \u6a21\u578b\u6216 Pydantic \u6a21\u5f0f\u5b9a\u4e49\u3002</p> <p>\u60a8\u5c06\u4f7f\u7528\u81ea\u5b9a\u4e49 XPath \u63cf\u8ff0\u7b26\u548c\u968f\u9644\u7684 <code>Model</code> \u7c7b\uff0c\u5b83\u4eec\u4e3a\u60a8\u7684\u6570\u636e\u6a21\u578b\u63d0\u4f9b\u53ef\u91cd\u7528\u7684\u5c5e\u6027\u3002 \u63cf\u8ff0\u7b26\u9700\u8981\u4e00\u4e2a <code>XPath</code> \u8868\u8fbe\u5f0f\u6765\u5728\u63a5\u6536\u5230\u7684\u6d88\u606f\u4e2d\u8fdb\u884c\u5143\u7d20\u67e5\u627e\u3002 \u5e95\u5c42\u5b9e\u73b0\u6709\u70b9\u9ad8\u7ea7\uff0c\u56e0\u6b64\u8bf7\u968f\u610f\u4ece\u4e0b\u9762\u7684\u53ef\u6298\u53e0\u90e8\u5206\u590d\u5236\u4ee3\u7801\u3002</p> XPath \u63cf\u8ff0\u7b26\u548c\u6a21\u578b\u7c7b <pre><code>import lxml.objectify\n\nclass XPath:\n    def __init__(self, expression, /, default=None, multiple=False):\n        self.expression = expression\n        self.default = default\n        self.multiple = multiple\n\n    def __set_name__(self, owner, name):\n        self.attribute_name = name\n        self.annotation = owner.__annotations__.get(name)\n\n    def __get__(self, instance, owner):\n        value = self.extract(instance.xml)\n        instance.__dict__[self.attribute_name] = value\n        return value\n\n    def extract(self, xml):\n        elements = xml.xpath(self.expression)\n        if elements:\n            if self.multiple:\n                if self.annotation:\n                    return [self.annotation(x) for x in elements]\n                else:\n                    return elements\n            else:\n                first = elements[0]\n                if self.annotation:\n                    return self.annotation(first)\n                else:\n                    return first\n        else:\n            return self.default\n\nclass Model:\n    \"\"\"Abstract base class for your models.\"\"\"\n    def __init__(self, data):\n        if isinstance(data, str):\n            self.xml = lxml.objectify.fromstring(data)\n        elif isinstance(data, lxml.objectify.ObjectifiedElement):\n            self.xml = data\n        else:\n            raise TypeError(\"Unsupported data type:\", type(data))\n</code></pre> <p>\u5047\u8bbe\u60a8\u7684\u6a21\u5757\u4e2d\u5df2\u7ecf\u6709\u4e86\u6240\u9700\u7684 <code>XPath</code> \u63cf\u8ff0\u7b26\u548c <code>Model</code> \u62bd\u8c61\u57fa\u7c7b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u5b9a\u4e49 <code>KeyboardEvent</code> \u548c <code>MouseEvent</code> \u6d88\u606f\u7c7b\u578b\u4ee5\u53ca\u53ef\u91cd\u7528\u7684\u6784\u5efa\u5757\u4ee5\u907f\u514d\u91cd\u590d\u3002 \u6709\u65e0\u6570\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code># ...\n\nclass Event(Model):\n    \"\"\"\u5177\u6709\u516c\u5171\u5143\u7d20\u7684\u4e8b\u4ef6\u6d88\u606f\u7684\u57fa\u7c7b\u3002\"\"\"\n    type_: str = XPath(\"./Type\")\n    timestamp: float = XPath(\"./Timestamp\")\n\nclass Modifiers(Model):\n    alt: bool = XPath(\"./Alt\")\n    ctrl: bool = XPath(\"./Ctrl\")\n    shift: bool = XPath(\"./Shift\")\n    meta: bool = XPath(\"./Meta\")\n\nclass KeyboardEvent(Event):\n    key: str = XPath(\"./Key/Code\")\n    modifiers: Modifiers = XPath(\"./Modifiers\")\n\nclass MouseEvent(Event):\n    x: int = XPath(\"./Cursor/Screen/@x\")\n    y: int = XPath(\"./Cursor/Screen/@y\")\n    modifiers: Modifiers = XPath(\"./Modifiers\")\n</code></pre> <p>XPath \u63cf\u8ff0\u7b26\u5141\u8bb8\u60f0\u6027\u6c42\u503c\uff0c\u4ee5\u4fbf\u4ec5\u5728\u8bf7\u6c42\u65f6\u624d\u67e5\u627e XML \u6d88\u606f\u7684\u5143\u7d20\u3002 \u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u53ea\u6709\u5f53\u60a8\u8bbf\u95ee\u4e8b\u4ef6\u5bf9\u8c61\u7684\u5c5e\u6027\u65f6\u624d\u4f1a\u67e5\u627e\u5b83\u4eec\u3002 \u6b64\u5916\uff0c\u7ed3\u679c\u4f1a\u88ab\u7f13\u5b58\u4ee5\u907f\u514d\u591a\u6b21\u8fd0\u884c\u76f8\u540c\u7684 XPath \u67e5\u8be2\u3002 \u8be5\u63cf\u8ff0\u7b26\u8fd8\u5c0a\u91cd\u7c7b\u578b\u6ce8\u91ca\u5e76\u81ea\u52a8\u5c06\u53cd\u5e8f\u5217\u5316\u6570\u636e\u8f6c\u6362\u4e3a\u6b63\u786e\u7684Python\u7c7b\u578b\u3002</p> <p>\u4f7f\u7528\u8fd9\u4e9b\u4e8b\u4ef6\u5bf9\u8c61\u4e0e\u4e4b\u524d<code>lxml.objectify</code>\u81ea\u52a8\u751f\u6210\u7684\u4e8b\u4ef6\u5bf9\u8c61\u6ca1\u6709\u592a\u5927\u533a\u522b\uff1a</p> <pre><code>if xml.tag == \"KeyboardEvent\":\n    event = KeyboardEvent(xml)\n    if event.type_ == \"keyup\":\n        print(\"Key:\", event.key)\nelif xml.tag == \"MouseEvent\":\n    event = MouseEvent(xml)\n    print(\"Mouse:\", event.x, event.y)\nelse:\n    print(\"Unrecognized event type\")\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u6b65\u9aa4\u662f\u521b\u5efa\u7279\u5b9a\u4e8b\u4ef6\u7c7b\u578b\u7684\u65b0\u5bf9\u8c61\u3002 \u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u4e3a\u60a8\u63d0\u4f9b\u4e86\u72ec\u7acb\u4e8e XML \u534f\u8bae\u6784\u5efa\u6a21\u578b\u7684\u66f4\u5927\u7075\u6d3b\u6027\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u6839\u636e\u6536\u5230\u7684\u6d88\u606f\u4e2d\u7684\u5c5e\u6027\u6d3e\u751f\u65b0\u7684\u6a21\u578b\u5c5e\u6027\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u6dfb\u52a0\u66f4\u591a\u65b9\u6cd5\u3002</p> <p>Right now, your messages arrive in plain string format. It\u2019s not very convenient to work with the messages in this format. Fortunately, you can turn them into compound Python objects with a single line of code using the <code>lxml.objectify</code> module:</p> <pre><code># server.py\n\nimport asyncio\nimport websockets\nimport lxml.objectify\n\nasync def handle_connection(websocket, path):\n    async for message in websocket:\n        try:\n            xml = lxml.objectify.fromstring(message)\n        except SyntaxError:\n            print(\"Malformed XML message:\", repr(message))\n        else:\n            if xml.tag == \"KeyboardEvent\":\n                if xml.Type == \"keyup\":\n                    print(\"Key:\", xml.Key.Unicode)\n            elif xml.tag == \"MouseEvent\":\n                screen = xml.Cursor.Screen\n                print(\"Mouse:\", screen.get(\"x\"), screen.get(\"y\"))\n            else:\n                print(\"Unrecognized event type\")\n\n# ...\n</code></pre> <p>As long as the XML parsing is successful, you can inspect the root element\u2019s usual properties, such as the tag name, attributes, inner text, and so on. You\u2019ll be able to use the dot operator to navigate deep into the element tree. In most cases, the library will recognize a suitable Python data type and convert the value for you.</p> <p>After saving those changes and restarting the server, you\u2019ll need to reload the page in your web browser to make a new WebSocket connection. Here\u2019s a sample output of the modified program:</p> <pre><code>$ python server.py\nMouse: 820 121\nMouse: 820 122\nMouse: 820 123\nMouse: 820 124\nMouse: 820 125\nKey: a\nMouse: 820 125\nMouse: 820 125\nKey: a\nKey: A\nKey: Shift\nMouse: 821 125\nMouse: 821 125\nMouse: 820 123\n\u22ee\n</code></pre> <p>Sometimes, XML may contain tag names that aren\u2019t valid Python identifiers, or you might want to adapt the message structure to fit your data model. In such a case, an interesting option would be defining custom model classes with descriptors that declare how to look up information using XPath expressions. That\u2019s the part that starts to resemble Django models or Pydantic schema definitions.</p> <p>You\u2019re going to use a custom XPath descriptor and an accompanying Model class, which provide reusable properties for your data models. The descriptor expects an XPath expression for element lookup in the received message. The underlying implementation is a bit advanced, so feel free to copy the code from the collapsible section below.</p> XPath Descriptor and the Model Class <pre><code>import lxml.objectify\n\nclass XPath:\n    def __init__(self, expression, /, default=None, multiple=False):\n        self.expression = expression\n        self.default = default\n        self.multiple = multiple\n\n    def __set_name__(self, owner, name):\n        self.attribute_name = name\n        self.annotation = owner.__annotations__.get(name)\n\n    def __get__(self, instance, owner):\n        value = self.extract(instance.xml)\n        instance.__dict__[self.attribute_name] = value\n        return value\n\n    def extract(self, xml):\n        elements = xml.xpath(self.expression)\n        if elements:\n            if self.multiple:\n                if self.annotation:\n                    return [self.annotation(x) for x in elements]\n                else:\n                    return elements\n            else:\n                first = elements[0]\n                if self.annotation:\n                    return self.annotation(first)\n                else:\n                    return first\n        else:\n            return self.default\n\nclass Model:\n    \"\"\"Abstract base class for your models.\"\"\"\n    def __init__(self, data):\n        if isinstance(data, str):\n            self.xml = lxml.objectify.fromstring(data)\n        elif isinstance(data, lxml.objectify.ObjectifiedElement):\n            self.xml = data\n        else:\n            raise TypeError(\"Unsupported data type:\", type(data))\n</code></pre> <p>Assuming you already have the desired XPath descriptor and the Model abstract base class in your module, you might use them to define <code>KeyboardEvent</code> and <code>MouseEvent</code> message types along with reusable building blocks to avoid repetition. There are infinite ways to do so, but here\u2019s one example:</p> <pre><code># ...\n\nclass Event(Model):\n    \"\"\"Base class for event messages with common elements.\"\"\"\n    type_: str = XPath(\"./Type\")\n    timestamp: float = XPath(\"./Timestamp\")\n\nclass Modifiers(Model):\n    alt: bool = XPath(\"./Alt\")\n    ctrl: bool = XPath(\"./Ctrl\")\n    shift: bool = XPath(\"./Shift\")\n    meta: bool = XPath(\"./Meta\")\n\nclass KeyboardEvent(Event):\n    key: str = XPath(\"./Key/Code\")\n    modifiers: Modifiers = XPath(\"./Modifiers\")\n\nclass MouseEvent(Event):\n    x: int = XPath(\"./Cursor/Screen/@x\")\n    y: int = XPath(\"./Cursor/Screen/@y\")\n    modifiers: Modifiers = XPath(\"./Modifiers\")\n</code></pre> <p>The XPath descriptor allows for lazy evaluation so that elements of the XML messages are looked up only when requested. More specifically, they\u2019re only looked up when you access a property on the event object. Moreover, the results are cached to avoid running the same XPath query more than once. The descriptor also respects type annotations and converts deserialized data to the right Python type automatically.</p> <p>Using those event objects isn\u2019t much different from the ones auto-generated by <code>lxml.objectify</code> before:</p> <pre><code>if xml.tag == \"KeyboardEvent\":\n    event = KeyboardEvent(xml)\n    if event.type_ == \"keyup\":\n        print(\"Key:\", event.key)\nelif xml.tag == \"MouseEvent\":\n    event = MouseEvent(xml)\n    print(\"Mouse:\", event.x, event.y)\nelse:\n    print(\"Unrecognized event type\")\n</code></pre> <p>There\u2019s an additional step of creating new objects of the specific event type. But other than that, it gives you more flexibility in terms of structuring your model independently of the XML protocol. Additionally, it\u2019s possible to derive new model attributes based on the ones in the received messages and add more methods on top of that.</p>"},{"location":"xml/#\u4ece-xml-\u6a21\u5f0f\u751f\u6210\u6a21\u578b","title":"\u4ece XML \u6a21\u5f0f\u751f\u6210\u6a21\u578b","text":"\u4e2d\u6587\u539f\u6587 <p>\u5b9e\u73b0\u6a21\u578b\u7c7b\u662f\u4e00\u9879\u4e4f\u5473\u4e14\u5bb9\u6613\u51fa\u9519\u7684\u4efb\u52a1\u3002 \u4f46\u662f\uff0c\u53ea\u8981\u60a8\u7684\u6a21\u578b\u53cd\u6620\u4e86 XML \u6d88\u606f\uff0c\u60a8\u5c31\u53ef\u4ee5\u5229\u7528\u81ea\u52a8\u5316\u5de5\u5177\u57fa\u4e8e XML \u67b6\u6784\u4e3a\u60a8\u751f\u6210\u5fc5\u8981\u7684\u4ee3\u7801\u3002 \u6b64\u7c7b\u4ee3\u7801\u7684\u7f3a\u70b9\u662f\u5b83\u7684\u53ef\u8bfb\u6027\u901a\u5e38\u4e0d\u5982\u624b\u5de5\u7f16\u5199\u7684\u4ee3\u7801\u3002</p> <p>\u6700\u53e4\u8001\u7684\u7b2c\u4e09\u65b9\u6a21\u5757\u4e4b\u4e00\u662f PyXB\uff0c\u5b83\u6a21\u4eff Java \u6d41\u884c\u7684 JAXB\u5e93\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u7684\u6700\u540e\u4e00\u6b21\u53d1\u5e03\u662f\u5728\u51e0\u5e74\u524d\uff0c\u5e76\u4e14\u9488\u5bf9\u7684\u662f\u65e7\u7248 Python \u7248\u672c\u3002 \u60a8\u53ef\u4ee5\u7814\u7a76\u7c7b\u4f3c\u4f46\u79ef\u6781\u7ef4\u62a4\u7684 generateDS \u66ff\u4ee3\u65b9\u6848\uff0c\u5b83\u4ece XML \u6a21\u5f0f\u751f\u6210\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u5047\u8bbe\u60a8\u6709\u8fd9\u4e2a models.xsd \u67b6\u6784\u6587\u4ef6\u6765\u63cf\u8ff0\u60a8\u7684 <code>KeyboardEvent</code> \u6d88\u606f\uff1a</p> <pre><code>&lt;xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n    &lt;xsd:element name=\"KeyboardEvent\" type=\"KeyboardEventType\"/&gt;\n    &lt;xsd:complexType name=\"KeyboardEventType\"&gt;\n        &lt;xsd:sequence&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Type\"/&gt;\n            &lt;xsd:element type=\"xsd:float\" name=\"Timestamp\"/&gt;\n            &lt;xsd:element type=\"KeyType\" name=\"Key\"/&gt;\n            &lt;xsd:element type=\"ModifiersType\" name=\"Modifiers\"/&gt;\n        &lt;/xsd:sequence&gt;\n    &lt;/xsd:complexType&gt;\n    &lt;xsd:complexType name=\"KeyType\"&gt;\n        &lt;xsd:sequence&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Code\"/&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Unicode\"/&gt;\n        &lt;/xsd:sequence&gt;\n    &lt;/xsd:complexType&gt;\n    &lt;xsd:complexType name=\"ModifiersType\"&gt;\n        &lt;xsd:sequence&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Alt\"/&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Ctrl\"/&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Shift\"/&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Meta\"/&gt;\n        &lt;/xsd:sequence&gt;\n    &lt;/xsd:complexType&gt;\n&lt;/xsd:schema&gt;\n</code></pre> <p>\u6a21\u5f0f\u544a\u8bc9 XML \u89e3\u6790\u5668\u9700\u8981\u54ea\u4e9b\u5143\u7d20\u3001\u5b83\u4eec\u7684\u987a\u5e8f\u4ee5\u53ca\u5b83\u4eec\u5728\u6811\u4e2d\u7684\u7ea7\u522b\u3002 \u5b83\u8fd8\u9650\u5236 XML \u5c5e\u6027\u7684\u5141\u8bb8\u503c\u3002 \u8fd9\u4e9b\u58f0\u660e\u4e0e\u5b9e\u9645 XML \u6587\u6863\u4e4b\u95f4\u7684\u4efb\u4f55\u5dee\u5f02\u90fd\u4f1a\u4f7f\u5176\u65e0\u6548\u5e76\u5bfc\u81f4\u89e3\u6790\u5668\u62d2\u7edd\u8be5\u6587\u6863\u3002</p> <p>\u6b64\u5916\uff0c\u67d0\u4e9b\u5de5\u5177\u53ef\u4ee5\u5229\u7528\u6b64\u4fe1\u606f\u751f\u6210\u4e00\u6bb5\u4ee3\u7801\uff0c\u5411\u60a8\u9690\u85cf XML \u89e3\u6790\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u5b89\u88c5\u5e93\u540e\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u5728\u6d3b\u52a8\u865a\u62df\u73af\u5883\u4e2d\u8fd0\u884c <code>generateDS</code> \u547d\u4ee4\uff1a</p> <pre><code>$ generateDS -o models.py models.xsd\n</code></pre> <p>\u5b83\u5c06\u5728\u4e0e\u751f\u6210\u7684 Python \u6e90\u4ee3\u7801\u76f8\u540c\u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>models.py</code> \u7684\u65b0\u6587\u4ef6\u3002 \u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5bfc\u5165\u8be5\u6a21\u5757\u5e76\u4f7f\u7528\u5b83\u6765\u89e3\u6790\u4f20\u5165\u7684\u6d88\u606f\uff1a</p> <p> <pre><code>&gt;&gt;&gt; from models import parseString\n\n&gt;&gt;&gt; event = parseString(\"\"\"\\\n... &lt;KeyboardEvent&gt;\n...     &lt;Type&gt;keydown&lt;/Type&gt;\n...     &lt;Timestamp&gt;253459.17999999982&lt;/Timestamp&gt;\n...     &lt;Key&gt;\n...         &lt;Code&gt;Digit2&lt;/Code&gt;\n...         &lt;Unicode&gt;@&lt;/Unicode&gt;\n...     &lt;/Key&gt;\n...     &lt;Modifiers&gt;\n...         &lt;Alt&gt;false&lt;/Alt&gt;\n...         &lt;Ctrl&gt;false&lt;/Ctrl&gt;\n...         &lt;Shift&gt;true&lt;/Shift&gt;\n...         &lt;Meta&gt;false&lt;/Meta&gt;\n...     &lt;/Modifiers&gt;\n... &lt;/KeyboardEvent&gt;\"\"\", silence=True)\n\n&gt;&gt;&gt; event.Type, event.Key.Code\n('keydown', 'Digit2')\n</code></pre></p> <p>\u5b83\u770b\u8d77\u6765\u4e0e\u524d\u9762\u663e\u793a\u7684<code>lxml.objectify</code>\u793a\u4f8b\u7c7b\u4f3c\u3002 \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u4f7f\u7528\u6570\u636e\u7ed1\u5b9a\u5f3a\u5236\u9075\u5b88\u67b6\u6784\uff0c\u800c <code>lxml.objectify</code> \u4f1a\u52a8\u6001\u751f\u6210\u5bf9\u8c61\uff0c\u65e0\u8bba\u5b83\u4eec\u5728\u8bed\u4e49\u4e0a\u662f\u5426\u6b63\u786e\u3002</p> <p>Implementing model classes is a tedious and error-prone task. However, as long as your model mirrors the XML messages, you can take advantage of an automated tool to generate the necessary code for you based on XML Schema. The downside of such code is that it\u2019s usually less readable than if written by hand.</p> <p>One of the oldest third-party modules to allow that was PyXB, which mimics Java\u2019s popular JAXB library. Unfortunately, it was last released several years ago and was targeting legacy Python versions. You can look into a similar yet actively maintained generateDS alternative, which generates data structures from XML Schema.</p> <p>Let\u2019s say you have this models.xsd schema file describing your KeyboardEvent message:</p> <pre><code>&lt;xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n    &lt;xsd:element name=\"KeyboardEvent\" type=\"KeyboardEventType\"/&gt;\n    &lt;xsd:complexType name=\"KeyboardEventType\"&gt;\n        &lt;xsd:sequence&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Type\"/&gt;\n            &lt;xsd:element type=\"xsd:float\" name=\"Timestamp\"/&gt;\n            &lt;xsd:element type=\"KeyType\" name=\"Key\"/&gt;\n            &lt;xsd:element type=\"ModifiersType\" name=\"Modifiers\"/&gt;\n        &lt;/xsd:sequence&gt;\n    &lt;/xsd:complexType&gt;\n    &lt;xsd:complexType name=\"KeyType\"&gt;\n        &lt;xsd:sequence&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Code\"/&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Unicode\"/&gt;\n        &lt;/xsd:sequence&gt;\n    &lt;/xsd:complexType&gt;\n    &lt;xsd:complexType name=\"ModifiersType\"&gt;\n        &lt;xsd:sequence&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Alt\"/&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Ctrl\"/&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Shift\"/&gt;\n            &lt;xsd:element type=\"xsd:string\" name=\"Meta\"/&gt;\n        &lt;/xsd:sequence&gt;\n    &lt;/xsd:complexType&gt;\n&lt;/xsd:schema&gt;\n</code></pre> <p>A schema tells the XML parser what elements to expect, their order, and their level in the tree. It also restricts the allowed values for the XML attributes. Any discrepancies between these declarations and an actual XML document should render it invalid and make the parser reject the document.</p> <p>Additionally, some tools can leverage this information to produce a piece of code that hides the details of XML parsing from you. After installing the library, you should be able to run the generateDS command in your active virtual environment:</p> <pre><code>$ generateDS -o models.py models.xsd\n</code></pre> <p>It will create a new file named models.py in the same directory with the generated Python source code. You can then import that module and use it to parse the incoming messages:</p> <p> <pre><code>&gt;&gt;&gt; from models import parseString\n\n&gt;&gt;&gt; event = parseString(\"\"\"\\\n... &lt;KeyboardEvent&gt;\n...     &lt;Type&gt;keydown&lt;/Type&gt;\n...     &lt;Timestamp&gt;253459.17999999982&lt;/Timestamp&gt;\n...     &lt;Key&gt;\n...         &lt;Code&gt;Digit2&lt;/Code&gt;\n...         &lt;Unicode&gt;@&lt;/Unicode&gt;\n...     &lt;/Key&gt;\n...     &lt;Modifiers&gt;\n...         &lt;Alt&gt;false&lt;/Alt&gt;\n...         &lt;Ctrl&gt;false&lt;/Ctrl&gt;\n...         &lt;Shift&gt;true&lt;/Shift&gt;\n...         &lt;Meta&gt;false&lt;/Meta&gt;\n...     &lt;/Modifiers&gt;\n... &lt;/KeyboardEvent&gt;\"\"\", silence=True)\n\n&gt;&gt;&gt; event.Type, event.Key.Code\n('keydown', 'Digit2')\n</code></pre></p> <p>It looks similar to the <code>lxml.objectify</code> example shown earlier. The difference is that using data binding enforces compliance with the schema, whereas <code>lxml.objectify</code> produces objects dynamically no matter if they\u2019re semantically correct.</p>"},{"location":"xml/#\u4f7f\u7528\u5b89\u5168\u89e3\u6790\u5668\u62c6\u9664-xml-\u70b8\u5f39","title":"\u4f7f\u7528\u5b89\u5168\u89e3\u6790\u5668\u62c6\u9664 XML \u70b8\u5f39","text":"\u4e2d\u6587\u539f\u6587 <p>Python \u6807\u51c6\u5e93\u4e2d\u7684 XML \u89e3\u6790\u5668\u5bb9\u6613\u53d7\u5230\u8bb8\u591a\u5b89\u5168\u5a01\u80c1\u7684\u5f71\u54cd\uff0c\u8fd9\u4e9b\u5a01\u80c1\u5145\u5176\u91cf\u53ef\u80fd\u5bfc\u81f4[\u62d2\u7edd\u670d\u52a1 (DoS)]https://en.wikipedia.org/wiki/Denial-of-service_attack \u6216\u6570\u636e\u4e22\u5931\u3002 \u516c\u5e73\u5730\u8bf4\uff0c\u8fd9\u4e0d\u662f\u4ed6\u4eec\u7684\u9519\u3002 \u5b83\u4eec\u53ea\u662f\u9075\u5faa XML \u6807\u51c6\u7684\u89c4\u8303\uff0c\u8be5\u6807\u51c6\u6bd4\u5927\u591a\u6570\u4eba\u6240\u77e5\u9053\u7684\u66f4\u52a0\u590d\u6742\u548c\u5f3a\u5927\u3002</p> <p>Note</p> <p>\u8bf7\u6ce8\u610f\uff0c\u60a8\u5e94\u8be5\u660e\u667a\u5730\u4f7f\u7528\u60a8\u5c06\u8981\u770b\u5230\u7684\u4fe1\u606f\u3002 \u60a8\u4e0d\u60f3\u6700\u7ec8\u6210\u4e3a\u653b\u51fb\u8005\uff0c\u8ba9\u81ea\u5df1\u627f\u62c5\u6cd5\u5f8b\u540e\u679c\uff0c\u6216\u8005\u9762\u4e34\u7ec8\u8eab\u7981\u6b62\u4f7f\u7528\u7279\u5b9a\u670d\u52a1\u7684\u60c5\u51b5\u3002</p> <p>\u6700\u5e38\u89c1\u7684\u653b\u51fb\u4e4b\u4e00\u662f XML \u70b8\u5f39\uff0c\u4e5f\u79f0\u4e3a\u5341\u4ebf\u7b11\u58f0\u653b\u51fb\u3002 \u8be5\u653b\u51fb\u5229\u7528 DTD \u4e2d\u7684\u5b9e\u4f53\u6269\u5c55\u6765\u70b8\u6bc1\u5185\u5b58\u5e76\u5c3d\u53ef\u80fd\u957f\u65f6\u95f4\u5730\u5360\u7528 CPU\u3002 \u963b\u6b62\u672a\u53d7\u4fdd\u62a4\u7684 Web \u670d\u52a1\u5668\u63a5\u6536\u65b0\u6d41\u91cf\u6240\u9700\u7684\u53ea\u662f\u4ee5\u4e0b\u51e0\u884c XML \u4ee3\u7801\uff1a</p> <pre><code>import xml.etree.ElementTree as ET\nET.fromstring(\"\"\"\\\n&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol \"lol\"&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 \"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;\"&gt;\n &lt;!ENTITY lol2 \"&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;\"&gt;\n &lt;!ENTITY lol3 \"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;\"&gt;\n &lt;!ENTITY lol4 \"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;\"&gt;\n &lt;!ENTITY lol5 \"&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;\"&gt;\n &lt;!ENTITY lol6 \"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;\"&gt;\n &lt;!ENTITY lol7 \"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;\"&gt;\n &lt;!ENTITY lol8 \"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;\"&gt;\n &lt;!ENTITY lol9 \"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;\"&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;\"\"\")\n</code></pre> <p>\u5929\u771f\u7684\u89e3\u6790\u5668\u5c06\u5c1d\u8bd5\u89e3\u6790\u81ea\u5b9a\u4e49\u5b9e\u4f53 <code>&amp;lol9</code>; \u901a\u8fc7\u68c0\u67e5 DTD \u653e\u7f6e\u5728\u6587\u6863\u6839\u76ee\u5f55\u4e2d\u3002 \u7136\u800c\uff0c\u8be5\u5b9e\u4f53\u672c\u8eab\u591a\u6b21\u5f15\u7528\u53e6\u4e00\u4e2a\u5b9e\u4f53\uff0c\u800c\u53e6\u4e00\u4e2a\u5b9e\u4f53\u53c8\u5f15\u7528\u53e6\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u5f53\u60a8\u8fd0\u884c\u4e0a\u9762\u7684\u811a\u672c\u65f6\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230\u60a8\u7684\u5185\u5b58\u548c\u5904\u7406\u5355\u5143\u51fa\u73b0\u4e00\u4e9b\u4ee4\u4eba\u4e0d\u5b89\u7684\u60c5\u51b5\uff1a</p> <p>\u770b\u770b\u4e3b\u5185\u5b58\u548c\u4ea4\u6362\u5206\u533a\u5982\u4f55\u5728\u77ed\u77ed\u51e0\u79d2\u949f\u5185\u8017\u5c3d\uff0c\u800c\u5176\u4e2d\u4e00\u4e2a CPU \u5219\u4ee5 100% \u7684\u5bb9\u91cf\u8fd0\u884c\u3002 \u5f53\u7cfb\u7edf\u5185\u5b58\u5df2\u6ee1\u65f6\uff0c\u8bb0\u5f55\u4f1a\u7a81\u7136\u505c\u6b62\uff0c\u7136\u540e\u5728 Python \u8fdb\u7a0b\u88ab\u6740\u6b7b\u540e\u6062\u590d\u3002</p> <p>\u53e6\u4e00\u79cd\u6d41\u884c\u7684\u653b\u51fb\u7c7b\u578b\u79f0\u4e3a XXE\uff0c\u5b83\u5229\u7528\u4e00\u822c\u5916\u90e8\u5b9e\u4f53\u6765\u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u5e76\u53d1\u51fa\u7f51\u7edc\u8bf7\u6c42\u3002 \u4e0d\u8fc7\uff0c\u4ece Python 3.7.1 \u5f00\u59cb\uff0c\u4e3a\u4e86\u63d0\u9ad8\u5b89\u5168\u6027\uff0c\u8be5\u529f\u80fd\u5df2\u9ed8\u8ba4\u7981\u7528\u3002 \u5982\u679c\u60a8\u4fe1\u4efb\u60a8\u7684\u6570\u636e\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u544a\u8bc9 SAX \u89e3\u6790\u5668\u65e0\u8bba\u5982\u4f55\u5904\u7406\u5916\u90e8\u5b9e\u4f53\uff1a</p> <pre><code>&gt;&gt;&gt; from xml.sax import make_parser\n&gt;&gt;&gt; from xml.sax.handler import feature_external_ges\n\n&gt;&gt;&gt; parser = make_parser()\n&gt;&gt;&gt; parser.setFeature(feature_external_ges, True)\n</code></pre> <p>\u8be5\u89e3\u6790\u5668\u5c06\u80fd\u591f\u8bfb\u53d6\u60a8\u8ba1\u7b97\u673a\u4e0a\u7684\u672c\u5730\u6587\u4ef6\u3002 \u5b83\u53ef\u80fd\u4f1a\u5728\u7c7b Unix \u64cd\u4f5c\u7cfb\u7edf\u4e0a\u63d0\u53d6\u7528\u6237\u540d\uff0c\u4f8b\u5982\uff1a</p> <pre><code>&gt;&gt;&gt; from xml.dom.minidom import parseString\n\n&gt;&gt;&gt; xml = \"\"\"\\\n... &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n... &lt;!DOCTYPE root [\n...     &lt;!ENTITY usernames SYSTEM \"/etc/passwd\"&gt;\n... ]&gt;\n... &lt;root&gt;&amp;usernames;&lt;/root&gt;\"\"\"\n\n&gt;&gt;&gt; document = parseString(xml, parser)\n&gt;&gt;&gt; print(document.documentElement.toxml())\n&lt;root&gt;root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\n\u22ee\nrealpython:x:1001:1001:Real Python,,,:/home/realpython:/bin/bash\n&lt;/root&gt;\n</code></pre> <p>\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u8be5\u6570\u636e\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u662f\u5b8c\u5168\u53ef\u884c\u7684\uff01</p> <p>\u73b0\u5728\uff0c\u60a8\u5982\u4f55\u4fdd\u62a4\u81ea\u5df1\u514d\u53d7\u6b64\u7c7b\u653b\u51fb\uff1f Python \u5b98\u65b9\u6587\u6863\u660e\u786e\u8b66\u544a\u60a8\u4f7f\u7528\u5185\u7f6e XML \u89e3\u6790\u5668\u7684\u98ce\u9669\uff0c\u5e76\u5efa\u8bae\u5728\u5173\u952e\u4efb\u52a1\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5207\u6362\u5230\u5916\u90e8\u5305\u3002 \u867d\u7136\u672a\u968f Python \u4e00\u8d77\u5206\u53d1\uff0c\u4f46 defusedxml \u662f\u6807\u51c6\u5e93\u4e2d\u6240\u6709\u89e3\u6790\u5668\u7684\u76f4\u63a5\u66ff\u4ee3\u54c1\u3002</p> <p>\u8be5\u5e93\u65bd\u52a0\u4e86\u4e25\u683c\u7684\u9650\u5236\u5e76\u7981\u7528\u4e86\u8bb8\u591a\u5371\u9669\u7684 XML \u529f\u80fd\u3002 \u5b83\u5e94\u8be5\u53ef\u4ee5\u963b\u6b62\u5927\u591a\u6570\u4f17\u6240\u5468\u77e5\u7684\u653b\u51fb\uff0c\u5305\u62ec\u521a\u624d\u63cf\u8ff0\u7684\u4e24\u79cd\u653b\u51fb\u3002 \u8981\u4f7f\u7528\u5b83\uff0c\u8bf7\u4ece PyPI \u83b7\u53d6\u5e93\u5e76\u76f8\u5e94\u5730\u66ff\u6362\u5bfc\u5165\u8bed\u53e5\uff1a</p> <pre><code>&gt;&gt;&gt; import defusedxml.ElementTree as ET\n&gt;&gt;&gt; ET.parse(\"bomb.xml\")\nTraceback (most recent call last):\n  ...\n    raise EntitiesForbidden(name, value, base, sysid, pubid, notation_name)\ndefusedxml.common.EntitiesForbidden:\n EntitiesForbidden(name='lol', system_id=None, public_id=None)\n</code></pre> <p>\u5c31\u662f\u8fd9\u6837\uff01 \u7981\u6b62\u7684\u529f\u80fd\u5c06\u4e0d\u518d\u901a\u8fc7\u3002</p> <p>The XML parsers in Python\u2019s standard library are vulnerable to a host of security threats that can lead to denial-of-service (DoS) or data loss, at best. That isn\u2019t their fault, to be fair. They just follow the specification of the XML standard, which is more complicated and powerful than most people know.</p> <p>Note</p> <p>Note: Please be advised that you should use the information you\u2019re about to see wisely. You don\u2019t want to wind up being the attacker, exposing yourself to legal consequences, or facing lifetime banishment from using a particular service.</p> <p>One of the most common attacks is the XML Bomb, also known as the billion laughs attack. The attack exploits entity expansion in DTD to blow up the memory and occupy the CPU for as long as possible. All you need to stop an unprotected web server from receiving new traffic are these few lines of XML code:</p> <pre><code>import xml.etree.ElementTree as ET\nET.fromstring(\"\"\"\\\n&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol \"lol\"&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 \"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;\"&gt;\n &lt;!ENTITY lol2 \"&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;\"&gt;\n &lt;!ENTITY lol3 \"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;\"&gt;\n &lt;!ENTITY lol4 \"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;\"&gt;\n &lt;!ENTITY lol5 \"&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;\"&gt;\n &lt;!ENTITY lol6 \"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;\"&gt;\n &lt;!ENTITY lol7 \"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;\"&gt;\n &lt;!ENTITY lol8 \"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;\"&gt;\n &lt;!ENTITY lol9 \"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;\"&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;\"\"\")\n</code></pre> <p>A naive parser will try to resolve the custom entity &amp;lol9; placed in the document root by inspecting the DTD. However, that entity itself refers to another entity several times, which refers to yet another entity, and so forth. When you run the script above, you\u2019ll notice something disturbing about your memory and the processing unit:</p> <p>Look how the main memory and the swap partition are exhausted in just a matter of seconds while one of the CPUs works at 100% of its capacity. The recording stops abruptly when the system memory becomes full and then resumes after the Python process gets killed.</p> <p>Another popular type of attack known as XXE takes advantage of general external entities to read local files and make network requests. Nevertheless, starting from Python 3.7.1, this feature has been disabled by default to increase security. If you trust your data, then you can tell the SAX parser to process external entities anyway:</p> <pre><code>&gt;&gt;&gt; from xml.sax import make_parser\n&gt;&gt;&gt; from xml.sax.handler import feature_external_ges\n\n&gt;&gt;&gt; parser = make_parser()\n&gt;&gt;&gt; parser.setFeature(feature_external_ges, True)\n</code></pre> <p>This parser will be able to read local files on your computer. It may pull usernames on a Unix-like operating system, for example:</p> <pre><code>&gt;&gt;&gt; from xml.dom.minidom import parseString\n\n&gt;&gt;&gt; xml = \"\"\"\\\n... &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n... &lt;!DOCTYPE root [\n...     &lt;!ENTITY usernames SYSTEM \"/etc/passwd\"&gt;\n... ]&gt;\n... &lt;root&gt;&amp;usernames;&lt;/root&gt;\"\"\"\n\n&gt;&gt;&gt; document = parseString(xml, parser)\n&gt;&gt;&gt; print(document.documentElement.toxml())\n&lt;root&gt;root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\n\u22ee\nrealpython:x:1001:1001:Real Python,,,:/home/realpython:/bin/bash\n&lt;/root&gt;\n</code></pre> <p>It\u2019s perfectly feasible to send that data over the network to a remote server!</p> <p>Now, how can you protect yourself from such attacks? The Python official documentation prominently warns you about the risks of using the built-in XML parsers and recommends switching to an external package in mission-critical applications. While not distributed with Python, defusedxml is a drop-in replacement for all the parsers in the standard library.</p> <p>The library imposes strict limits and disables a lot of the dangerous XML features. It should stop most of the well-known attacks, including the two just described. To use it, grab the library from PyPI and replace your import statements accordingly:</p> <pre><code>&gt;&gt;&gt; import defusedxml.ElementTree as ET\n&gt;&gt;&gt; ET.parse(\"bomb.xml\")\nTraceback (most recent call last):\n  ...\n    raise EntitiesForbidden(name, value, base, sysid, pubid, notation_name)\ndefusedxml.common.EntitiesForbidden:\n EntitiesForbidden(name='lol', system_id=None, public_id=None)\n</code></pre> <p>That\u2019s it! Forbidden features won\u2019t make it through anymore.</p>"},{"location":"xml/#\u7ed3\u8bed","title":"\u7ed3\u8bed","text":"\u4e2d\u6587\u539f\u6587 <p>XML \u6570\u636e\u683c\u5f0f\u662f\u4e00\u79cd\u6210\u719f\u4e14\u5f3a\u5927\u7684\u6807\u51c6\uff0c\u81f3\u4eca\u4ecd\u5728\u4f7f\u7528\uff0c\u7279\u522b\u662f\u5728\u4f01\u4e1a\u73af\u5883\u4e2d\u3002 \u9009\u62e9\u6b63\u786e\u7684 XML \u89e3\u6790\u5668\u5bf9\u4e8e\u5728\u6027\u80fd\u3001\u5b89\u5168\u6027\u3001\u5408\u89c4\u6027\u548c\u4fbf\u5229\u6027\u4e4b\u95f4\u627e\u5230\u6700\u4f73\u5e73\u8861\u70b9\u81f3\u5173\u91cd\u8981\u3002</p> <p>\u672c\u6559\u7a0b\u4e3a\u60a8\u63d0\u4f9b\u4e86\u8be6\u7ec6\u7684\u8def\u7ebf\u56fe\uff0c\u5e2e\u52a9\u60a8\u5728 Python \u4e2d\u4ee4\u4eba\u56f0\u60d1\u7684 XML \u89e3\u6790\u5668\u8ff7\u5bab\u4e2d\u5bfc\u822a\u3002 \u60a8\u77e5\u9053\u5728\u54ea\u91cc\u8d70\u6377\u5f84\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u6b7b\u80e1\u540c\uff0c\u4ece\u800c\u8282\u7701\u5927\u91cf\u65f6\u95f4\u3002</p> <p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u5b66\u4e60\u4e86\u5982\u4f55\uff1a</p> <ul> <li>\u9009\u62e9\u6b63\u786e\u7684 XML \u89e3\u6790\u6a21\u578b</li> <li>\u4f7f\u7528 \u6807\u51c6\u5e93 \u4e2d\u7684 XML \u89e3\u6790\u5668</li> <li>\u4f7f\u7528\u4e3b\u8981\u7684 XML \u89e3\u6790\u5e93</li> <li>\u4f7f\u7528\u6570\u636e\u7ed1\u5b9a\u4ee5\u58f0\u660e\u65b9\u5f0f\u89e3\u6790 XML \u6587\u6863</li> <li>\u4f7f\u7528\u5b89\u5168\u7684 XML \u89e3\u6790\u5668\u6d88\u9664 \u5b89\u5168\u6f0f\u6d1e</li> </ul> <p>\u73b0\u5728\uff0c\u60a8\u4e86\u89e3\u4e86\u89e3\u6790 XML \u6587\u6863\u7684\u4e0d\u540c\u7b56\u7565\u53ca\u5176\u4f18\u7f3a\u70b9\u3002 \u6709\u4e86\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u60a8\u5c31\u53ef\u4ee5\u4e3a\u60a8\u7684\u7279\u5b9a\u7528\u4f8b\u9009\u62e9\u6700\u5408\u9002\u7684 XML \u89e3\u6790\u5668\uff0c\u751a\u81f3\u53ef\u4ee5\u7ec4\u5408\u591a\u4e2a\u89e3\u6790\u5668\u6765\u66f4\u5feb\u5730\u8bfb\u53d6\u6570 GB XML \u6587\u4ef6\u3002</p> <p>The XML data format is a mature and surprisingly powerful standard that is still in use today, especially in the enterprise setting. Choosing the right XML parser is crucial in finding the sweet spot between performance, security, compliance, and convenience.</p> <p>This tutorial puts a detailed roadmap in your hand to navigate the confusing maze of XML parsers in Python. You know where to take the shortcuts and how to avoid dead ends, saving you lots of time.</p> <p>In this tutorial, you learned how to:</p> <ul> <li>Choose the right XML parsing model</li> <li>Use the XML parsers in the standard library</li> <li>Use major XML parsing libraries</li> <li>Parse XML documents declaratively using data binding</li> <li>Use safe XML parsers to eliminate security vulnerabilities</li> </ul> <p>Now, you understand the different strategies for parsing XML documents as well as their strengths and weaknesses. With this knowledge, you\u2019re able to pick the most suitable XML parser for your specific use case and even combine more than one to read multi-gigabyte XML files faster.</p>"}]}